package co.edu.uniandes.proyectoautomatizacion.database;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ciudad.
 */
public class Ciudad implements java.io.Serializable {

    private Long id;
    private String nombre;
    private long departamentoId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CiudadDao myDao;

    private Departamento departamento;
    private Long departamento__resolvedKey;


    public Ciudad() {
    }

    public Ciudad(Long id) {
        this.id = id;
    }

    public Ciudad(Long id, String nombre, long departamentoId) {
        this.id = id;
        this.nombre = nombre;
        this.departamentoId = departamentoId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCiudadDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public long getDepartamentoId() {
        return departamentoId;
    }

    public void setDepartamentoId(long departamentoId) {
        this.departamentoId = departamentoId;
    }

    /** To-one relationship, resolved on first access. */
    public Departamento getDepartamento() {
        long __key = this.departamentoId;
        if (departamento__resolvedKey == null || !departamento__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DepartamentoDao targetDao = daoSession.getDepartamentoDao();
            Departamento departamentoNew = targetDao.load(__key);
            synchronized (this) {
                departamento = departamentoNew;
            	departamento__resolvedKey = __key;
            }
        }
        return departamento;
    }

    public void setDepartamento(Departamento departamento) {
        if (departamento == null) {
            throw new DaoException("To-one property 'departamentoId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.departamento = departamento;
            departamentoId = departamento.getId();
            departamento__resolvedKey = departamentoId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

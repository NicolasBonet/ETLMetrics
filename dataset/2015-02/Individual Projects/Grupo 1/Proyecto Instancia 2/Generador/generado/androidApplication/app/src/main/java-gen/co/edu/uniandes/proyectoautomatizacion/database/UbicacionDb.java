package co.edu.uniandes.proyectoautomatizacion.database;

import java.util.List;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ubicacionDb.
 */
public class UbicacionDb implements java.io.Serializable {

    private Long id;
    private String nombre;
    private String imagen;
    private Double latitud;
    private Double longitud;
    private String horario;
    private String mensaje;
    private String direccion;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient UbicacionDbDao myDao;

    private List<ProductoUbicDb> productosUbic;

    public UbicacionDb() {
    }

    public UbicacionDb(Long id) {
        this.id = id;
    }

    public UbicacionDb(Long id, String nombre, String imagen, Double latitud, Double longitud, String horario, String mensaje, String direccion) {
        this.id = id;
        this.nombre = nombre;
        this.imagen = imagen;
        this.latitud = latitud;
        this.longitud = longitud;
        this.horario = horario;
        this.mensaje = mensaje;
        this.direccion = direccion;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUbicacionDbDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public String getImagen() {
        return imagen;
    }

    public void setImagen(String imagen) {
        this.imagen = imagen;
    }

    public Double getLatitud() {
        return latitud;
    }

    public void setLatitud(Double latitud) {
        this.latitud = latitud;
    }

    public Double getLongitud() {
        return longitud;
    }

    public void setLongitud(Double longitud) {
        this.longitud = longitud;
    }

    public String getHorario() {
        return horario;
    }

    public void setHorario(String horario) {
        this.horario = horario;
    }

    public String getMensaje() {
        return mensaje;
    }

    public void setMensaje(String mensaje) {
        this.mensaje = mensaje;
    }

    public String getDireccion() {
        return direccion;
    }

    public void setDireccion(String direccion) {
        this.direccion = direccion;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<ProductoUbicDb> getProductosUbic() {
        if (productosUbic == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ProductoUbicDbDao targetDao = daoSession.getProductoUbicDbDao();
            List<ProductoUbicDb> productosUbicNew = targetDao._queryUbicacionDb_ProductosUbic(id);
            synchronized (this) {
                if(productosUbic == null) {
                    productosUbic = productosUbicNew;
                }
            }
        }
        return productosUbic;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetProductosUbic() {
        productosUbic = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

package co.edu.uniandes.proyectoautomatizacion.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table imagenSliderItemDb.
*/
public class ImagenSliderItemDbDao extends AbstractDao<ImagenSliderItemDb, Long> {

    public static final String TABLENAME = "imagenSliderItemDb";

    /**
     * Properties of entity ImagenSliderItemDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Imagen = new Property(1, String.class, "imagen", false, "IMAGEN");
        public final static Property Url = new Property(2, String.class, "url", false, "URL");
        public final static Property Tipo = new Property(3, String.class, "tipo", false, "TIPO");
        public final static Property Pantalla = new Property(4, String.class, "pantalla", false, "PANTALLA");
    };


    public ImagenSliderItemDbDao(DaoConfig config) {
        super(config);
    }
    
    public ImagenSliderItemDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'imagenSliderItemDb' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'IMAGEN' TEXT," + // 1: imagen
                "'URL' TEXT," + // 2: url
                "'TIPO' TEXT," + // 3: tipo
                "'PANTALLA' TEXT);"); // 4: pantalla
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'imagenSliderItemDb'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ImagenSliderItemDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String imagen = entity.getImagen();
        if (imagen != null) {
            stmt.bindString(2, imagen);
        }
 
        String url = entity.getUrl();
        if (url != null) {
            stmt.bindString(3, url);
        }
 
        String tipo = entity.getTipo();
        if (tipo != null) {
            stmt.bindString(4, tipo);
        }
 
        String pantalla = entity.getPantalla();
        if (pantalla != null) {
            stmt.bindString(5, pantalla);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ImagenSliderItemDb readEntity(Cursor cursor, int offset) {
        ImagenSliderItemDb entity = new ImagenSliderItemDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imagen
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tipo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // pantalla
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ImagenSliderItemDb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImagen(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTipo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPantalla(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ImagenSliderItemDb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ImagenSliderItemDb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

model crud driver EMF {path='crudGenerator.ecore'};
model angular driver EMF {path='crudAngularGenerator.ecore'};

pre{
}

rule App2App
	transform s : crud!Application
	to t : angular!Application {
	("App2App"+s.name).println();
	t.name = s.name; 
	t.services = s.entities.equivalent();
	t.cruds = s.getCruds(t.services,s.entities);
}

operation crud!Application getCruds(services,entities){

	
	var cruds : Sequence = Sequence {};
	//cruds = angular!Application.cruds;
	
	for(entity in entities){

		if(not (entity.crud == null)){
			var crud = new angular!Crud();
			crud.allowCreate = entity.crud.allowCreate;
			crud.allowRead = entity.crud.allowRead;
			crud.allowUpdate = entity.crud.allowUpdate;
			crud.allowDelete = entity.crud.allowDelete;
			for (service in services){
				if(service.name == entity.name.toLowerCase().firstToUpperCase().replace(' ','')){
					crud.service = service;	
				}
			}
			
			crud.fields = entity.crud.getFields(crud.service);
			cruds.add(crud);
		}
		
	}
	
	return cruds;
}

operation crud!Crud getFields(service): OrderedSet {
	var fieldsCrud = self.fields.select(f|f.isKindOf(crud!PrimitiveField));
	var fields : OrderedSet = OrderedSet{};
	for(f in fieldsCrud){
		var field = new angular!Field;
		field.key = f.attribute.name.toLowerCase().replace(' ','_');
		field.dataType = convertDataType(f.attribute.dataType);
		field.component = angular!UIComponent#primitive;
		for (val in f.attribute.validations){
			if(val.validationType.asString() = "required"){
				field.isRequired = true;
			}
		}
		if(f.attribute.isFilter){
			field.relatedService = service;
			service.filters.add(field);
		}
		fields.add(field);
	}
	
	var AssoCrud = self.fields.select(f|f.isKindOf(crud!AssociationField));
	for(asc in AssoCrud){
		var field = new angular!Field;
		if(asc.association.source==self.eContainer()){
			field.key = asc.association.target.name + "_id";
			if(asc.association.manyTarget){
				field.isMultiple = true;
				if(asc.association.target.name.endsWith('s'))
					field.key = asc.association.target.name.substring(0,asc.association.target.name.length-1) + "_ids";
				else
					field.key = asc.association.target.name + "_ids";
			}
			field.relatedService = asc.association.target.getService();
		}else{
			field.key = asc.association.source.name + "_id";
			if(asc.association.manySource){
				field.isMultiple = true;
				if(asc.association.source.name.endsWith('s'))
					field.key = asc.association.source.name.substring(0,asc.association.source.name.length-1) + "_ids";
				else
					field.key = asc.association.source.name + "_ids";
			}
			field.relatedService = asc.association.source.getService();
		}
		field.component = convertComponent(asc.component);
		field.dataType = angular!DataType#relation;
		
		fields.add(field); 
	}
	return fields;
}

operation crud!Entity getService(): angular!Service{
	var services = angular!Service.getAllInstances();
	for(service in services){
		if(service.name = self.name.toLowerCase().firstToUpperCase().replace(' ','')){
			return service;
		}
	}
	
	return null;
}

@lazy
rule Entity2Service
	transform s : crud!Entity
	to t : angular!Service {
	("  Entity2Service: "+s.name).println();
	t.name = s.name.toLowerCase().firstToUpperCase().replace(' ','');
	//t.filters = s.crud.fields.select(f|f.isKindOf(crud!AssociationField)).equivalent();
	t.url = "admin/"+s.name.toLowerCase().replace(' ','')+"s";
}

@lazy
rule PrimitiveField2Field
	transform s : crud!PrimitiveField
	to t : angular!Field {
	("    PrimitiveField2Field: "+s.attribute.name).println();
	t.key = s.attribute.name.toLowerCase().replace(' ','_');
	t.dataType=convertDataType(s.attribute.dataType);
	t.component = angular!UIComponent#primitive;
	for (val in s.attribute.validations){
		if(val.validationType.asString() = "required"){
			t.isRequired = true;
		}
	}
	
}

@lazy
rule AssociationField2Field
	transform s : crud!AssociationField
	to t : angular!Field{
	("    AssociationField2Field: "+s.association.sourceName+"->"+s.association.targetName).println();
	t.component = convertComponent(s.component);

}

operation convertComponent(component){
	switch(component){
		case crud!UIComponent#select: return angular!UIComponent#select;
		case crud!UIComponent#selectList:  return angular!UIComponent#selectList;
		case crud!UIComponent#radioButton:  return  angular!UIComponent#radioButton;
		case crud!UIComponent#autocomplete: return  angular!UIComponent#autocomplete;
		case crud!UIComponent#selectListMultiple: return angular!UIComponent#selectListMultiple;
		case crud!UIComponent#checkbox: return angular!UIComponent#checkbox;
		case crud!UIComponent#autocompleteMultiple: return angular!UIComponent#autocompleteMultiple;
	}
}

operation convertDataType(dataType){
	switch(dataType){
		case crud!DataType#int: return angular!DataType#int;
		case crud!DataType#string:  return angular!DataType#string;
		case crud!DataType#text:  return  angular!DataType#text;
		case crud!DataType#decimal: return  angular!DataType#decimal;
		case crud!DataType#dateTime: return angular!DataType#dateTime;
		case crud!DataType#date: return angular!DataType#date;
	}
}
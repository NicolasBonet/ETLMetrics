/*
* generated by Xtext
*/
grammar InternalJson;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package com.uniandes.jsontosql.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package com.uniandes.jsontosql.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import com.uniandes.jsontosql.xtext.services.JsonGrammarAccess;

}

@parser::members {

 	private JsonGrammarAccess grammarAccess;
 	
    public InternalJsonParser(TokenStream input, JsonGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Document";	
   	}
   	
   	@Override
   	protected JsonGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleDocument
entryRuleDocument returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDocumentRule()); }
	 iv_ruleDocument=ruleDocument 
	 { $current=$iv_ruleDocument.current; } 
	 EOF 
;

// Rule Document
ruleDocument returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDocumentAccess().getObjectsObjectParserRuleCall_0_0()); 
	    }
		lv_objects_0_0=ruleObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDocumentRule());
	        }
       		add(
       			$current, 
       			"objects",
        		lv_objects_0_0, 
        		"Object");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
    { 
        newCompositeNode(grammarAccess.getDocumentAccess().getLSQUAREParserRuleCall_1_0()); 
    }
ruleLSQUARE
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDocumentAccess().getObjectsObjectParserRuleCall_1_1_0()); 
	    }
		lv_objects_2_0=ruleObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDocumentRule());
	        }
       		add(
       			$current, 
       			"objects",
        		lv_objects_2_0, 
        		"Object");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getDocumentAccess().getCOMMAParserRuleCall_1_2_0()); 
    }
ruleCOMMA
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDocumentAccess().getObjectsObjectParserRuleCall_1_2_1_0()); 
	    }
		lv_objects_4_0=ruleObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDocumentRule());
	        }
       		add(
       			$current, 
       			"objects",
        		lv_objects_4_0, 
        		"Object");
	        afterParserOrEnumRuleCall();
	    }

)
))*
    { 
        newCompositeNode(grammarAccess.getDocumentAccess().getRSQUAREParserRuleCall_1_3()); 
    }
ruleRSQUARE
    { 
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleObject
entryRuleObject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getObjectRule()); }
	 iv_ruleObject=ruleObject 
	 { $current=$iv_ruleObject.current; } 
	 EOF 
;

// Rule Object
ruleObject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getObjectAccess().getLCURLYParserRuleCall_0()); 
    }
ruleLCURLY
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectAccess().getPairsPairParserRuleCall_1_0()); 
	    }
		lv_pairs_1_0=rulePair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectRule());
	        }
       		add(
       			$current, 
       			"pairs",
        		lv_pairs_1_0, 
        		"Pair");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getObjectAccess().getCOMMAParserRuleCall_2_0()); 
    }
ruleCOMMA
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getObjectAccess().getPairsPairParserRuleCall_2_1_0()); 
	    }
		lv_pairs_3_0=rulePair		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getObjectRule());
	        }
       		add(
       			$current, 
       			"pairs",
        		lv_pairs_3_0, 
        		"Pair");
	        afterParserOrEnumRuleCall();
	    }

)
))*
    { 
        newCompositeNode(grammarAccess.getObjectAccess().getRCURLYParserRuleCall_3()); 
    }
ruleRCURLY
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRulePair
entryRulePair returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPairRule()); }
	 iv_rulePair=rulePair 
	 { $current=$iv_rulePair.current; } 
	 EOF 
;

// Rule Pair
rulePair returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPairAccess().getNameEStringParserRuleCall_0_0()); 
	    }
		lv_name_0_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPairRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)
    { 
        newCompositeNode(grammarAccess.getPairAccess().getCOLONParserRuleCall_1()); 
    }
ruleCOLON
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPairAccess().getValueValueParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPairRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getValueAccess().getStringValueParserRuleCall_0()); 
    }
    this_StringValue_0=ruleStringValue
    { 
        $current = $this_StringValue_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getNumberValueParserRuleCall_1()); 
    }
    this_NumberValue_1=ruleNumberValue
    { 
        $current = $this_NumberValue_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getDecimalValueParserRuleCall_2()); 
    }
    this_DecimalValue_2=ruleDecimalValue
    { 
        $current = $this_DecimalValue_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getArrayValueParserRuleCall_3()); 
    }
    this_ArrayValue_3=ruleArrayValue
    { 
        $current = $this_ArrayValue_3.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getBooleanValueParserRuleCall_4()); 
    }
    this_BooleanValue_4=ruleBooleanValue
    { 
        $current = $this_BooleanValue_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getValueAccess().getValueObjectParserRuleCall_5()); 
    }
    this_ValueObject_5=ruleValueObject
    { 
        $current = $this_ValueObject_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	 iv_ruleStringValue=ruleStringValue 
	 { $current=$iv_ruleStringValue.current; } 
	 EOF 
;

// Rule StringValue
ruleStringValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringValueAccess().getValueEStringParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleEString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"EString");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleNumberValue
entryRuleNumberValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNumberValueRule()); }
	 iv_ruleNumberValue=ruleNumberValue 
	 { $current=$iv_ruleNumberValue.current; } 
	 EOF 
;

// Rule NumberValue
ruleNumberValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumberValueAccess().getValueEIntParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleEInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumberValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"EInt");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleDecimalValue
entryRuleDecimalValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDecimalValueRule()); }
	 iv_ruleDecimalValue=ruleDecimalValue 
	 { $current=$iv_ruleDecimalValue.current; } 
	 EOF 
;

// Rule DecimalValue
ruleDecimalValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getDecimalValueAccess().getValueEDoubleParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleEDouble		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDecimalValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"EDouble");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleValueObject
entryRuleValueObject returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueObjectRule()); }
	 iv_ruleValueObject=ruleValueObject 
	 { $current=$iv_ruleValueObject.current; } 
	 EOF 
;

// Rule ValueObject
ruleValueObject returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getValueObjectAccess().getValueObjectParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleObject		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueObjectRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"Object");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleArrayValue
entryRuleArrayValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getArrayValueRule()); }
	 iv_ruleArrayValue=ruleArrayValue 
	 { $current=$iv_ruleArrayValue.current; } 
	 EOF 
;

// Rule ArrayValue
ruleArrayValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getArrayValueAccess().getLSQUAREParserRuleCall_0()); 
    }
ruleLSQUARE
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayValueAccess().getValuesValueParserRuleCall_1_0()); 
	    }
		lv_values_1_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayValueRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_1_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)(
    { 
        newCompositeNode(grammarAccess.getArrayValueAccess().getCOMMAParserRuleCall_2_0()); 
    }
ruleCOMMA
    { 
        afterParserOrEnumRuleCall();
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayValueAccess().getValuesValueParserRuleCall_2_1_0()); 
	    }
		lv_values_3_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayValueRule());
	        }
       		add(
       			$current, 
       			"values",
        		lv_values_3_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))*
    { 
        newCompositeNode(grammarAccess.getArrayValueAccess().getRSQUAREParserRuleCall_3()); 
    }
ruleRSQUARE
    { 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBooleanValue
entryRuleBooleanValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBooleanValueRule()); }
	 iv_ruleBooleanValue=ruleBooleanValue 
	 { $current=$iv_ruleBooleanValue.current; } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getBooleanValueAccess().getValueEBooleanParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleEBoolean		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBooleanValueRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"EBoolean");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleLCURLY
entryRuleLCURLY returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLCURLYRule()); } 
	 iv_ruleLCURLY=ruleLCURLY 
	 { $current=$iv_ruleLCURLY.current.getText(); }  
	 EOF 
;

// Rule LCURLY
ruleLCURLY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='{' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLCURLYAccess().getLeftCurlyBracketKeyword()); 
    }

    ;





// Entry rule entryRuleRCURLY
entryRuleRCURLY returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRCURLYRule()); } 
	 iv_ruleRCURLY=ruleRCURLY 
	 { $current=$iv_ruleRCURLY.current.getText(); }  
	 EOF 
;

// Rule RCURLY
ruleRCURLY returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='}' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRCURLYAccess().getRightCurlyBracketKeyword()); 
    }

    ;





// Entry rule entryRuleLSQUARE
entryRuleLSQUARE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getLSQUARERule()); } 
	 iv_ruleLSQUARE=ruleLSQUARE 
	 { $current=$iv_ruleLSQUARE.current.getText(); }  
	 EOF 
;

// Rule LSQUARE
ruleLSQUARE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw='[' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getLSQUAREAccess().getLeftSquareBracketKeyword()); 
    }

    ;





// Entry rule entryRuleRSQUARE
entryRuleRSQUARE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getRSQUARERule()); } 
	 iv_ruleRSQUARE=ruleRSQUARE 
	 { $current=$iv_ruleRSQUARE.current.getText(); }  
	 EOF 
;

// Rule RSQUARE
ruleRSQUARE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw=']' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getRSQUAREAccess().getRightSquareBracketKeyword()); 
    }

    ;





// Entry rule entryRuleCOLON
entryRuleCOLON returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCOLONRule()); } 
	 iv_ruleCOLON=ruleCOLON 
	 { $current=$iv_ruleCOLON.current.getText(); }  
	 EOF 
;

// Rule COLON
ruleCOLON returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw=':' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCOLONAccess().getColonKeyword()); 
    }

    ;





// Entry rule entryRuleCOMMA
entryRuleCOMMA returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCOMMARule()); } 
	 iv_ruleCOMMA=ruleCOMMA 
	 { $current=$iv_ruleCOMMA.current.getText(); }  
	 EOF 
;

// Rule COMMA
ruleCOMMA returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getCOMMAAccess().getCommaKeyword()); 
    }

    ;









// Entry rule entryRuleEString
entryRuleEString returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEStringRule()); } 
	 iv_ruleEString=ruleEString 
	 { $current=$iv_ruleEString.current.getText(); }  
	 EOF 
;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); 
    }

    |    this_ID_1=RULE_ID    {
		$current.merge(this_ID_1);
    }

    { 
    newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEIntRule()); } 
	 iv_ruleEInt=ruleEInt 
	 { $current=$iv_ruleEInt.current.getText(); }  
	 EOF 
;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0()); 
    }
)?    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleEBoolean
entryRuleEBoolean returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEBooleanRule()); } 
	 iv_ruleEBoolean=ruleEBoolean 
	 { $current=$iv_ruleEBoolean.current.getText(); }  
	 EOF 
;

// Rule EBoolean
ruleEBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='true' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEBooleanAccess().getTrueKeyword_0()); 
    }

    |
	kw='false' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEBooleanAccess().getFalseKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleEDouble
entryRuleEDouble returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEDoubleRule()); } 
	 iv_ruleEDouble=ruleEDouble 
	 { $current=$iv_ruleEDouble.current.getText(); }  
	 EOF 
;

// Rule EDouble
ruleEDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_0()); 
    }
)?(    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_1()); 
    }
)?
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEDoubleAccess().getFullStopKeyword_2()); 
    }
    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    newLeafNode(this_INT_3, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_3()); 
    }
((
	kw='E' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEDoubleAccess().getEKeyword_4_0_0()); 
    }

    |
	kw='e' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEDoubleAccess().getEKeyword_4_0_1()); 
    }
)(
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_4_1()); 
    }
)?    this_INT_7=RULE_INT    {
		$current.merge(this_INT_7);
    }

    { 
    newLeafNode(this_INT_7, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_4_2()); 
    }
)?)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;



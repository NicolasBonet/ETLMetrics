model php driver EMF {path='webApiPHP.ecore'};
model cs driver EMF {path='webApiInput.ecore'};

pre
{
	var csharp= new cs!CSharp;
	var phpcore= new php!PHPCore;
}

//--------------------------------------------------
//---------------Ramas Iniciales--------------------
//--------------------------------------------------
//Obtener la clase "DTO"
rule Clase2DTO
	transform 
		clase: cs!Clase
	to
		dto: php!DTO
	{
		guard: (clase.name.endsWith("DTO"))
			dto.name=clase.name;
			phpcore.dtos.add(dto);
			dto.atributos=clase.propiedades.equivalent("Propiedad2Atributo");
			//dto.atributos=clase.enums.equivalent();
			
	}
//Obtener la clase "Clase"
rule Clase2Clase
	transform 
		clase: cs!Clase
	to
		phpclase:php!Clase
	{
		guard: (clase.name.endsWith("Controller"))
			phpclase.name=clase.name;
			for(atri in clase.atributos)
			{
				//Obtener el atributo routePrefix
				if(atri.name == "RoutePrefix")
				{
					phpclase.routePrefix=atri.valor;
				}
				
				//obtner el atributo domain
				if(atri.name == "Domain")
				{
					phpclase.domain=atri.valor;
				}
				//obtner el atributo domain
				if(atri.name == "Main")
				{
					"esverdad".println();
					phpclase.isMain=true;
				}
				
			}
			phpcore.clases.add(phpclase);
			phpclase.metodos=clase.metodos.equivalent();
			
	}

//---------------------------------------------------
//---------------Rama Clase--------------------------
//--------------------------------------------------


//Obtner la clase "Metodo"
@lazy
rule MetodoCS2MetodoPHP
	transform
		metodo: cs!Metodo
	to 
		phpmetodo: php!Metodo
	{
		phpmetodo.name=metodo.name;
		for(atri in metodo.atributos)
			{
				//obtener el atributo "verbo"
				if(atri.name.startsWith("Http"))
				{
					switch (atri.name)
					{
						case "HttpGet" : phpmetodo.verbo= php!TipoVerbo#GET;
						case "HttpPost" : phpmetodo.verbo= php!TipoVerbo#POST;
						case "HttpPut" : phpmetodo.verbo= php!TipoVerbo#PUT;
						case "HttpDelete" : phpmetodo.verbo= php!TipoVerbo#DELETE;
					}
				}
				
				//Obtener el atributo "route" 
				if(atri.name == "Route")
				{
					phpmetodo.route=atri.valor;
				}
			}
			phpmetodo.parametros=metodo.parametros.equivalent();	
		
	}
//Obtener la clase "Atributo"
//y lo elementos exeppto auqellos que sean tipo radioButton
@lazy
rule Propiedad2Atributo
	transform
		propiedad: cs!Propiedad
	to
		atributo: php!Atributo
	{
		atributo.name=propiedad.name;
		atributo.title=propiedad.name;
		
		//Obtine los valores de Hide y Title 
		//Si a propiedad de C# contine clases de tipo "Atributo"
		//con nombre "Hide" o "Display"
		for(atri in propiedad.atributos)
		{
			//Obtiene el atributo "isHide"
			if(atri.name == "Hide")
			{
				atributo.isHide=true;
			}
						
			//Obtines el atributo "title"
			if(atri.name == "Display")
			{
				var pro= atri.propiedades.select(a | a.name == "Name").first();
				atributo.title=pro.valor;			
				
			}
		}
		//Si la clase "propiedad" no contien atributos
		// toma valores por defecto de sus elementos
		if(propiedad.atributos.isEmpty)
		{
			//Obtengo la relación "elementos" por defecto
			//Si la propiedad es tipo string 
			if(propiedad.tipoPrimitivo == "string")
			{
				var elemento = new php!Input;
				elemento.placeholder=propiedad.name;
				elemento.tipo=php!TipoCampo#text;
				atributo.elementos=elemento;
			}
			if(propiedad.tipo <> null)
			{
				var enum: cs!Enum=propiedad.tipo;
				var radio= new php!Input;
				radio.placeholder=propiedad.name;
				radio.tipo=php!TipoCampo#radio;
				for(enuml in enum.valores)
				{
					var op= new php!Opcion;
					op.value=enuml.name;
					radio.opciones.add(op);
				}
				atributo.elementos=radio;
				
			}
		}
		else
		{
			for(atri in propiedad.atributos)
			{
				//Placeholder-Tittle
				if(atri.name == "Display")
					{
						for(pa in atri.propiedades)
						{
							atributo.title=pa.valor;
						}
					}
				
				//Checkbox
				if(propiedad.tipoPrimitivo == "bool")
				{
					var elemento= new php!Input;
					//tipo
					elemento.tipo=php!TipoCampo#checkbox;
					//placeholder
					elemento.placeholder=atributo.title;
					//isRequired
					if(atri.propiedades.select(a | a.name == "Required").size()>0)
					{
						elemento.isRequired=false;
					}	
					//Add Element
					atributo.elementos=elemento;
					
				}
				//TextArea
				if(atri.name =="Textarea")
				{
					var elemento= new php!TextArea;
					//placeholder
					elemento.placeholder=atributo.title;
					//isRequired
					if(atri.propiedades.select(a | a.name == "Required").size()>0)
					{
						elemento.isRequired=false;
					}	
					//Add Element
					atributo.elementos=elemento;
				}
				//DropDown
				if(atri.name =="Combobox")
				{
					var elemento= new php!DropDown;
					//placeholder
					elemento.placeholder=atributo.title;
					//isRequired
					if(atri.propiedades.select(a | a.name == "Required").size()>0)
					{
						elemento.isRequired=false;
					}									
					//Add Element
					atributo.elementos=elemento;
				}
				//Tipos de Input (Text, email, password)
				if(atri.name == "Textbox")
				{
					var elemento= new php!Input;
					//placeholder
					elemento.placeholder=atributo.title;
					//isRequired
					if(atri.propiedades.select(a | a.name == "Required").size()>0)
					{
						elemento.isRequired=false;
					}
					//Tipo
					if(atri.propiedades.select(a | a.name == "Type").size()>0)
					{
						var ti = atri.propiedades.select(a | a.name == "Type").first();
						switch (ti.valor)
						{
							case "Password": elemento.tipo=php!TipoCampo#password;
							case "Email": elemento.tipo=php!TipoCampo#email;
						}
						
					}
					else
					{
						elemento.tipo=php!TipoCampo#text;
					}
										
					//Add Element
					atributo.elementos=elemento;
					
				
				}
				
			
			}
		
		}
		
	}

//Obtener la clase "Parametro"
@lazy
rule ParametrosCS2ParametrosPHP
	transform
		parametro: cs!Parametro
	to
		parametrophp: php!Parametro
	{
		parametrophp.name=parametro.name;
		
		//Obtiene la relacion "valores""
		if(parametro.name.endsWith("DTO"))
		{
			for(dtos in phpcore.dtos)
			{
				var p= parametro.name.firstToUpperCase();
				if(dtos.name.equals(p))
				{
					parametrophp.valores=dtos;
				}
			}
			
			 
     	}
     
     
	}
	
	
//---------------------------------------------------
//---------------Rama DTO--------------------------
//--------------------------------------------------


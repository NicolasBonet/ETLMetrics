<?xml version="1.0" encoding="ASCII"?>
<xmi:XMI xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:jEE="http://www.example.org/jEE" xmlns:kdm="http://www.eclipse.org/MoDisco/kdm/kdm">
  <jEE:JEE/>
  <jEE:JEE>
    <Ejbs name="VentaVehiculosEJB">
      <bussinesMethods name="VentaVehiculos" return="void" code="        vehiculos = new ArrayList( );&#xA;&#xA;"/>
      <bussinesMethods name="darVehiculos" return="ArrayList&lt;E>" code="        ArrayList copiaLista = new ArrayList( vehiculos );&#xA;        return copiaLista;&#xA;"/>
      <bussinesMethods name="ordenarPorMarca" return="void" code="        int inicial;&#xA;&#xA;        for( inicial = 0; inicial &lt; vehiculos.size( ); inicial++ )&#xA;        {&#xA;            for( int i = vehiculos.size( ) - 1; i > inicial; i-- )&#xA;            {&#xA;                Vehiculo p2 = ( Vehiculo )vehiculos.get( i );&#xA;                Vehiculo p1 = ( Vehiculo )vehiculos.get( i - 1 );&#xA;&#xA;                if( p1.compararPorMarca( p2 ) > 0 )&#xA;                {&#xA;                    vehiculos.set( i, p1 );&#xA;                    vehiculos.set( i - 1, p2 );&#xA;                }&#xA;            }&#xA;        }&#xA;        verificarInvariante( );&#xA;"/>
      <bussinesMethods name="ordenarPorCilindrada" return="void" code="        int inicial;&#xA;&#xA;        // En cada paso se sabe que:&#xA;        // 1. Las posiciones antes de veh&#xfffd;culos[inicial] est&#xfffd;n ordenadas&#xA;        // En cada paso lo que se hace es encontrar en qu&#xfffd; posici&#xfffd;n entre veh&#xfffd;culos[0] y veh&#xfffd;culos[inicial] deber&#xfffd;a&#xA;        // estar el veh&#xfffd;culo que en este momento se encuentra en veh&#xfffd;culos[inicial]&#xA;&#xA;        for( inicial = 1; inicial &lt; vehiculos.size( ); inicial++ )&#xA;        {&#xA;            Vehiculo insertado = ( Vehiculo )vehiculos.get( inicial );&#xA;&#xA;            boolean termine = false;&#xA;            int i = inicial - 1;&#xA;&#xA;            while( !termine )&#xA;            {&#xA;                // Si encuentra una cilindrada mayor, entonces hay que intercambiarlos&#xA;                Vehiculo veh&#xfffd;culoPosicion = ( Vehiculo )vehiculos.get( i );&#xA;&#xA;                if( veh&#xfffd;culoPosicion.compararPorCilindrada( insertado ) > 0 )&#xA;                {&#xA;                    vehiculos.set( i, insertado );&#xA;                    vehiculos.set( i + 1, veh&#xfffd;culoPosicion );&#xA;                    i--;&#xA;                }&#xA;                // Si se encuentra un cilindrada igual o menor entonces ya se encontr&#xfffd; la posici&#xfffd;n&#xA;                else&#xA;                {&#xA;                    termine = true;&#xA;                }&#xA;&#xA;                // Si ya se lleg&#xfffd; al principio de la lista no hay nada m&#xfffd;s que hacer&#xA;                if( i &lt; 0 )&#xA;                {&#xA;                    termine = true;&#xA;                }&#xA;            }&#xA;        }&#xA;        verificarInvariante( );&#xA;"/>
      <bussinesMethods name="ordenarPorAnio" return="void" code="        int inicial;&#xA;&#xA;        // En cada paso se sabe que:&#xA;        // 1. Todos los valores antes de veh&#xfffd;culos[inicial] est&#xfffd;n ordenados&#xA;        // 2. No hay ning&#xfffd;n valor despu&#xfffd;s de veh&#xfffd;culos[inicial-1] que sea menor que veh&#xfffd;culos[inicial-1]&#xA;        // En cada paso se busca el menor entre veh&#xfffd;culos[inicial] y veh&#xfffd;culos[final] y se ubica en veh&#xfffd;culos[inicial]&#xA;&#xA;        for( inicial = 0; inicial &lt; vehiculos.size( ); inicial++ )&#xA;        {&#xA;            int posicionMenor = inicial;&#xA;            Vehiculo veh&#xfffd;culoMenor = ( Vehiculo )vehiculos.get( inicial );&#xA;&#xA;            for( int i = inicial + 1; i &lt; vehiculos.size( ); i++ )&#xA;            {&#xA;                Vehiculo veh&#xfffd;culoPosicion = ( Vehiculo )vehiculos.get( i );&#xA;&#xA;                // El veh&#xfffd;culo de la posici&#xfffd;n actual es menor que el menor encontrado hasta el momento&#xA;                if( veh&#xfffd;culoPosicion.compararPorAnio( veh&#xfffd;culoMenor ) &lt; 0 )&#xA;                {&#xA;                    veh&#xfffd;culoMenor = veh&#xfffd;culoPosicion;&#xA;                    posicionMenor = i;&#xA;                }&#xA;            }&#xA;&#xA;            if( posicionMenor != inicial )&#xA;            {&#xA;                Vehiculo temp = ( Vehiculo )vehiculos.get( inicial );&#xA;                vehiculos.set( inicial, veh&#xfffd;culoMenor );&#xA;                vehiculos.set( posicionMenor, temp );&#xA;            }&#xA;&#xA;        }&#xA;        verificarInvariante( );&#xA;"/>
    </Ejbs>
  </jEE:JEE>
  <jEE:Entity/>
  <jEE:Service/>
  <jEE:Method name="buscarVehiculo" return="int"/>
  <kdm:Attribute/>
  <jEE:JEE>
    <Ejbs name="VentaVehiculosEJB">
      <bussinesMethods name="VentaVehiculos" return="void" code="        vehiculos = new ArrayList( );&#xA;&#xA;"/>
      <bussinesMethods name="darVehiculos" return="ArrayList&lt;E>" code="        ArrayList copiaLista = new ArrayList( vehiculos );&#xA;        return copiaLista;&#xA;"/>
      <bussinesMethods name="ordenarPorMarca" return="void" code="        int inicial;&#xA;&#xA;        for( inicial = 0; inicial &lt; vehiculos.size( ); inicial++ )&#xA;        {&#xA;            for( int i = vehiculos.size( ) - 1; i > inicial; i-- )&#xA;            {&#xA;                Vehiculo p2 = ( Vehiculo )vehiculos.get( i );&#xA;                Vehiculo p1 = ( Vehiculo )vehiculos.get( i - 1 );&#xA;&#xA;                if( p1.compararPorMarca( p2 ) > 0 )&#xA;                {&#xA;                    vehiculos.set( i, p1 );&#xA;                    vehiculos.set( i - 1, p2 );&#xA;                }&#xA;            }&#xA;        }&#xA;        verificarInvariante( );&#xA;"/>
      <bussinesMethods name="ordenarPorCilindrada" return="void" code="        int inicial;&#xA;&#xA;        // En cada paso se sabe que:&#xA;        // 1. Las posiciones antes de veh&#xfffd;culos[inicial] est&#xfffd;n ordenadas&#xA;        // En cada paso lo que se hace es encontrar en qu&#xfffd; posici&#xfffd;n entre veh&#xfffd;culos[0] y veh&#xfffd;culos[inicial] deber&#xfffd;a&#xA;        // estar el veh&#xfffd;culo que en este momento se encuentra en veh&#xfffd;culos[inicial]&#xA;&#xA;        for( inicial = 1; inicial &lt; vehiculos.size( ); inicial++ )&#xA;        {&#xA;            Vehiculo insertado = ( Vehiculo )vehiculos.get( inicial );&#xA;&#xA;            boolean termine = false;&#xA;            int i = inicial - 1;&#xA;&#xA;            while( !termine )&#xA;            {&#xA;                // Si encuentra una cilindrada mayor, entonces hay que intercambiarlos&#xA;                Vehiculo veh&#xfffd;culoPosicion = ( Vehiculo )vehiculos.get( i );&#xA;&#xA;                if( veh&#xfffd;culoPosicion.compararPorCilindrada( insertado ) > 0 )&#xA;                {&#xA;                    vehiculos.set( i, insertado );&#xA;                    vehiculos.set( i + 1, veh&#xfffd;culoPosicion );&#xA;                    i--;&#xA;                }&#xA;                // Si se encuentra un cilindrada igual o menor entonces ya se encontr&#xfffd; la posici&#xfffd;n&#xA;                else&#xA;                {&#xA;                    termine = true;&#xA;                }&#xA;&#xA;                // Si ya se lleg&#xfffd; al principio de la lista no hay nada m&#xfffd;s que hacer&#xA;                if( i &lt; 0 )&#xA;                {&#xA;                    termine = true;&#xA;                }&#xA;            }&#xA;        }&#xA;        verificarInvariante( );&#xA;"/>
      <bussinesMethods name="ordenarPorAnio" return="void" code="        int inicial;&#xA;&#xA;        // En cada paso se sabe que:&#xA;        // 1. Todos los valores antes de veh&#xfffd;culos[inicial] est&#xfffd;n ordenados&#xA;        // 2. No hay ning&#xfffd;n valor despu&#xfffd;s de veh&#xfffd;culos[inicial-1] que sea menor que veh&#xfffd;culos[inicial-1]&#xA;        // En cada paso se busca el menor entre veh&#xfffd;culos[inicial] y veh&#xfffd;culos[final] y se ubica en veh&#xfffd;culos[inicial]&#xA;&#xA;        for( inicial = 0; inicial &lt; vehiculos.size( ); inicial++ )&#xA;        {&#xA;            int posicionMenor = inicial;&#xA;            Vehiculo veh&#xfffd;culoMenor = ( Vehiculo )vehiculos.get( inicial );&#xA;&#xA;            for( int i = inicial + 1; i &lt; vehiculos.size( ); i++ )&#xA;            {&#xA;                Vehiculo veh&#xfffd;culoPosicion = ( Vehiculo )vehiculos.get( i );&#xA;&#xA;                // El veh&#xfffd;culo de la posici&#xfffd;n actual es menor que el menor encontrado hasta el momento&#xA;                if( veh&#xfffd;culoPosicion.compararPorAnio( veh&#xfffd;culoMenor ) &lt; 0 )&#xA;                {&#xA;                    veh&#xfffd;culoMenor = veh&#xfffd;culoPosicion;&#xA;                    posicionMenor = i;&#xA;                }&#xA;            }&#xA;&#xA;            if( posicionMenor != inicial )&#xA;            {&#xA;                Vehiculo temp = ( Vehiculo )vehiculos.get( inicial );&#xA;                vehiculos.set( inicial, veh&#xfffd;culoMenor );&#xA;                vehiculos.set( posicionMenor, temp );&#xA;            }&#xA;&#xA;        }&#xA;        verificarInvariante( );&#xA;"/>
    </Ejbs>
  </jEE:JEE>
  <jEE:Entity/>
  <jEE:Service/>
  <jEE:Method name="buscarVehiculo" return="int"/>
  <kdm:Attribute/>
</xmi:XMI>

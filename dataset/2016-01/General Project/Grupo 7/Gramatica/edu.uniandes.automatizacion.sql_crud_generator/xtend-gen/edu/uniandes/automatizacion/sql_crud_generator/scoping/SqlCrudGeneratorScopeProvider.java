/**
 * generated by Xtext 2.9.1
 */
package edu.uniandes.automatizacion.sql_crud_generator.scoping;

import com.google.common.base.Objects;
import edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.Column;
import edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ForeignKey;
import edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.Table;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class SqlCrudGeneratorScopeProvider extends AbstractDeclarativeScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    boolean _and = false;
    if (!(context instanceof ForeignKey)) {
      _and = false;
    } else {
      String _name = reference.getName();
      boolean _equals = Objects.equal(_name, "reference");
      _and = _equals;
    }
    if (_and) {
      EObject rootElement = EcoreUtil2.getRootContainer(context);
      List<Table> tables = EcoreUtil2.<Table>getAllContentsOfType(rootElement, Table.class);
      return Scopes.scopeFor(tables);
    } else {
      boolean _and_1 = false;
      boolean _and_2 = false;
      if (!(context instanceof ForeignKey)) {
        _and_2 = false;
      } else {
        Table _reference = ((ForeignKey) context).getReference();
        boolean _notEquals = (!Objects.equal(_reference, null));
        _and_2 = _notEquals;
      }
      if (!_and_2) {
        _and_1 = false;
      } else {
        String _name_1 = reference.getName();
        boolean _equals_1 = Objects.equal(_name_1, "refsFrom");
        _and_1 = _equals_1;
      }
      if (_and_1) {
        Table _reference_1 = ((ForeignKey) context).getReference();
        final EList<Column> columns = _reference_1.getColumns();
        return Scopes.scopeFor(columns);
      } else {
        return super.getScope(context, reference);
      }
    }
  }
}

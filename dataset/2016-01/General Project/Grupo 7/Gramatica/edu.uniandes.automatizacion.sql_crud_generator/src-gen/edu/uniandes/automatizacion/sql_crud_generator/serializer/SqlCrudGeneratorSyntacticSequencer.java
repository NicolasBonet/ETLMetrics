/*
 * generated by Xtext 2.9.2
 */
package edu.uniandes.automatizacion.sql_crud_generator.serializer;

import com.google.inject.Inject;
import edu.uniandes.automatizacion.sql_crud_generator.services.SqlCrudGeneratorGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class SqlCrudGeneratorSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SqlCrudGeneratorGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Column_COMATerminalRuleCall_3_q;
	protected AbstractElementAlias match_Column___WNOTTerminalRuleCall_2_0_WNULLTerminalRuleCall_2_1__q;
	protected AbstractElementAlias match_ForeignKey_COMATerminalRuleCall_9_q;
	protected AbstractElementAlias match_PrimaryKey_COMATerminalRuleCall_5_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SqlCrudGeneratorGrammarAccess) access;
		match_Column_COMATerminalRuleCall_3_q = new TokenAlias(false, true, grammarAccess.getColumnAccess().getCOMATerminalRuleCall_3());
		match_Column___WNOTTerminalRuleCall_2_0_WNULLTerminalRuleCall_2_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getColumnAccess().getWNOTTerminalRuleCall_2_0()), new TokenAlias(false, false, grammarAccess.getColumnAccess().getWNULLTerminalRuleCall_2_1()));
		match_ForeignKey_COMATerminalRuleCall_9_q = new TokenAlias(false, true, grammarAccess.getForeignKeyAccess().getCOMATerminalRuleCall_9());
		match_PrimaryKey_COMATerminalRuleCall_5_q = new TokenAlias(false, true, grammarAccess.getPrimaryKeyAccess().getCOMATerminalRuleCall_5());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getCOMARule())
			return getCOMAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPARENTHESIS_DERRule())
			return getPARENTHESIS_DERToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPARENTHESIS_IZQRule())
			return getPARENTHESIS_IZQToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSEMICOLONRule())
			return getSEMICOLONToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWCREATERule())
			return getWCREATEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWFOREIGN_KEYRule())
			return getWFOREIGN_KEYToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWNEWRule())
			return getWNEWToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWNOTRule())
			return getWNOTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWNULLRule())
			return getWNULLToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWPRIMARY_KEYRule())
			return getWPRIMARY_KEYToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWREFERENCESRule())
			return getWREFERENCESToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWSCHEMARule())
			return getWSCHEMAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getWTABLERule())
			return getWTABLEToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal COMA:",";
	 */
	protected String getCOMAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	/**
	 * terminal PARENTHESIS_DER:")";
	 */
	protected String getPARENTHESIS_DERToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ")";
	}
	
	/**
	 * terminal PARENTHESIS_IZQ:"(";
	 */
	protected String getPARENTHESIS_IZQToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "(";
	}
	
	/**
	 * terminal SEMICOLON:";";
	 */
	protected String getSEMICOLONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ";";
	}
	
	/**
	 * terminal WCREATE:"CREATE";
	 */
	protected String getWCREATEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "CREATE";
	}
	
	/**
	 * terminal WFOREIGN_KEY:"FOREIGN KEY";
	 */
	protected String getWFOREIGN_KEYToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "FOREIGN KEY";
	}
	
	/**
	 * terminal WNEW:"NEW";
	 */
	protected String getWNEWToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "NEW";
	}
	
	/**
	 * terminal WNOT:"NOT";
	 */
	protected String getWNOTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "NOT";
	}
	
	/**
	 * terminal WNULL:"NULL";
	 */
	protected String getWNULLToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "NULL";
	}
	
	/**
	 * terminal WPRIMARY_KEY:"PRIMARY KEY";
	 */
	protected String getWPRIMARY_KEYToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "PRIMARY KEY";
	}
	
	/**
	 * terminal WREFERENCES:"REFERENCES";
	 */
	protected String getWREFERENCESToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "REFERENCES";
	}
	
	/**
	 * terminal WSCHEMA:"SCHEMA";
	 */
	protected String getWSCHEMAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "SCHEMA";
	}
	
	/**
	 * terminal WTABLE:"TABLE";
	 */
	protected String getWTABLEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "TABLE";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Column_COMATerminalRuleCall_3_q.equals(syntax))
				emit_Column_COMATerminalRuleCall_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Column___WNOTTerminalRuleCall_2_0_WNULLTerminalRuleCall_2_1__q.equals(syntax))
				emit_Column___WNOTTerminalRuleCall_2_0_WNULLTerminalRuleCall_2_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ForeignKey_COMATerminalRuleCall_9_q.equals(syntax))
				emit_ForeignKey_COMATerminalRuleCall_9_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryKey_COMATerminalRuleCall_5_q.equals(syntax))
				emit_PrimaryKey_COMATerminalRuleCall_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     COMA?
	 *
	 * This ambiguous syntax occurs at:
	 *     dataType=DataType (WNOT WNULL)? (ambiguity) (rule end)
	 */
	protected void emit_Column_COMATerminalRuleCall_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (WNOT WNULL)?
	 *
	 * This ambiguous syntax occurs at:
	 *     dataType=DataType (ambiguity) COMA? (rule end)
	 */
	protected void emit_Column___WNOTTerminalRuleCall_2_0_WNULLTerminalRuleCall_2_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     COMA?
	 *
	 * This ambiguous syntax occurs at:
	 *     refsFrom=[Column|ID] PARENTHESIS_DER (ambiguity) (rule end)
	 */
	protected void emit_ForeignKey_COMATerminalRuleCall_9_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     COMA?
	 *
	 * This ambiguous syntax occurs at:
	 *     ids+=[Column|ID] PARENTHESIS_DER (ambiguity) (rule end)
	 */
	protected void emit_PrimaryKey_COMATerminalRuleCall_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}

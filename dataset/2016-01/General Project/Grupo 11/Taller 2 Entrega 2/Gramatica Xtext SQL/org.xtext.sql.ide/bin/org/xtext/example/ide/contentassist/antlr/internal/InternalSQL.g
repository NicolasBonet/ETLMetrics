/*
 * generated by Xtext 2.9.1
 */
grammar InternalSQL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.services.SQLGrammarAccess;

}
@parser::members {
	private SQLGrammarAccess grammarAccess;

	public void setGrammarAccess(SQLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleDataBase
entryRuleDataBase
:
{ before(grammarAccess.getDataBaseRule()); }
	 ruleDataBase
{ after(grammarAccess.getDataBaseRule()); } 
	 EOF 
;

// Rule DataBase
ruleDataBase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getDataBaseAccess().getTablesAssignment()); }
			(rule__DataBase__TablesAssignment)
			{ after(grammarAccess.getDataBaseAccess().getTablesAssignment()); }
		)
		(
			{ before(grammarAccess.getDataBaseAccess().getTablesAssignment()); }
			(rule__DataBase__TablesAssignment)*
			{ after(grammarAccess.getDataBaseAccess().getTablesAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTable
entryRuleTable
:
{ before(grammarAccess.getTableRule()); }
	 ruleTable
{ after(grammarAccess.getTableRule()); } 
	 EOF 
;

// Rule Table
ruleTable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTableAccess().getGroup()); }
		(rule__Table__Group__0)
		{ after(grammarAccess.getTableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulecolumn
entryRulecolumn
:
{ before(grammarAccess.getColumnRule()); }
	 rulecolumn
{ after(grammarAccess.getColumnRule()); } 
	 EOF 
;

// Rule column
rulecolumn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColumnAccess().getGroup()); }
		(rule__Column__Group__0)
		{ after(grammarAccess.getColumnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleprimaryKey
entryRuleprimaryKey
:
{ before(grammarAccess.getPrimaryKeyRule()); }
	 ruleprimaryKey
{ after(grammarAccess.getPrimaryKeyRule()); } 
	 EOF 
;

// Rule primaryKey
ruleprimaryKey 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryKeyAccess().getGroup()); }
		(rule__PrimaryKey__Group__0)
		{ after(grammarAccess.getPrimaryKeyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleforeignKey
entryRuleforeignKey
:
{ before(grammarAccess.getForeignKeyRule()); }
	 ruleforeignKey
{ after(grammarAccess.getForeignKeyRule()); } 
	 EOF 
;

// Rule foreignKey
ruleforeignKey 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForeignKeyAccess().getGroup()); }
		(rule__ForeignKey__Group__0)
		{ after(grammarAccess.getForeignKeyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule DataType
ruleDataType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataTypeAccess().getAlternatives()); }
		(rule__DataType__Alternatives)
		{ after(grammarAccess.getDataTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__DataType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataTypeAccess().getVARCHAR255EnumLiteralDeclaration_0()); }
		('varchar(255)')
		{ after(grammarAccess.getDataTypeAccess().getVARCHAR255EnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getVARCHAREnumLiteralDeclaration_1()); }
		('varchar')
		{ after(grammarAccess.getDataTypeAccess().getVARCHAREnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getINTEnumLiteralDeclaration_2()); }
		('int')
		{ after(grammarAccess.getDataTypeAccess().getINTEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getCHAREnumLiteralDeclaration_3()); }
		('character')
		{ after(grammarAccess.getDataTypeAccess().getCHAREnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getBOOLEnumLiteralDeclaration_4()); }
		('boolean')
		{ after(grammarAccess.getDataTypeAccess().getBOOLEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getDATEEnumLiteralDeclaration_5()); }
		('date')
		{ after(grammarAccess.getDataTypeAccess().getDATEEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getTIMEEnumLiteralDeclaration_6()); }
		('time')
		{ after(grammarAccess.getDataTypeAccess().getTIMEEnumLiteralDeclaration_6()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getFLOATEnumLiteralDeclaration_7()); }
		('float')
		{ after(grammarAccess.getDataTypeAccess().getFLOATEnumLiteralDeclaration_7()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getDECIMALEnumLiteralDeclaration_8()); }
		('decimal')
		{ after(grammarAccess.getDataTypeAccess().getDECIMALEnumLiteralDeclaration_8()); }
	)
	|
	(
		{ before(grammarAccess.getDataTypeAccess().getNUMERICEnumLiteralDeclaration_9()); }
		('numeric')
		{ after(grammarAccess.getDataTypeAccess().getNUMERICEnumLiteralDeclaration_9()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__0__Impl
	rule__Table__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getCREATETerminalRuleCall_0()); }
	RULE_CREATE
	{ after(grammarAccess.getTableAccess().getCREATETerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__1__Impl
	rule__Table__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getTABLATerminalRuleCall_1()); }
	RULE_TABLA
	{ after(grammarAccess.getTableAccess().getTABLATerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__2__Impl
	rule__Table__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getNameAssignment_2()); }
	(rule__Table__NameAssignment_2)
	{ after(grammarAccess.getTableAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__3__Impl
	rule__Table__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getLPARENTerminalRuleCall_3()); }
	RULE_LPAREN
	{ after(grammarAccess.getTableAccess().getLPARENTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__4__Impl
	rule__Table__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getTableAccess().getColumnsAssignment_4()); }
		(rule__Table__ColumnsAssignment_4)
		{ after(grammarAccess.getTableAccess().getColumnsAssignment_4()); }
	)
	(
		{ before(grammarAccess.getTableAccess().getColumnsAssignment_4()); }
		(rule__Table__ColumnsAssignment_4)*
		{ after(grammarAccess.getTableAccess().getColumnsAssignment_4()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__5__Impl
	rule__Table__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getPrimaryKeyAssignment_5()); }
	(rule__Table__PrimaryKeyAssignment_5)
	{ after(grammarAccess.getTableAccess().getPrimaryKeyAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__6__Impl
	rule__Table__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getForeignkeysAssignment_6()); }
	(rule__Table__ForeignkeysAssignment_6)*
	{ after(grammarAccess.getTableAccess().getForeignkeysAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getRPARENTerminalRuleCall_7()); }
	RULE_RPAREN
	{ after(grammarAccess.getTableAccess().getRPARENTerminalRuleCall_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Column__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__0__Impl
	rule__Column__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getNameAssignment_0()); }
	(rule__Column__NameAssignment_0)
	{ after(grammarAccess.getColumnAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__1__Impl
	rule__Column__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getTypeAssignment_1()); }
	(rule__Column__TypeAssignment_1)
	{ after(grammarAccess.getColumnAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__2__Impl
	rule__Column__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getNOTTerminalRuleCall_2()); }
	(RULE_NOT)?
	{ after(grammarAccess.getColumnAccess().getNOTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__3__Impl
	rule__Column__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getNULLTerminalRuleCall_3()); }
	(RULE_NULL)?
	{ after(grammarAccess.getColumnAccess().getNULLTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getCOMATerminalRuleCall_4()); }
	(RULE_COMA)?
	{ after(grammarAccess.getColumnAccess().getCOMATerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryKey__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group__0__Impl
	rule__PrimaryKey__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getPRIMARYTerminalRuleCall_0()); }
	RULE_PRIMARY
	{ after(grammarAccess.getPrimaryKeyAccess().getPRIMARYTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group__1__Impl
	rule__PrimaryKey__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getKEYTerminalRuleCall_1()); }
	RULE_KEY
	{ after(grammarAccess.getPrimaryKeyAccess().getKEYTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group__2__Impl
	rule__PrimaryKey__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getLPARENTerminalRuleCall_2()); }
	RULE_LPAREN
	{ after(grammarAccess.getPrimaryKeyAccess().getLPARENTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group__3__Impl
	rule__PrimaryKey__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getNameAssignment_3()); }
	(rule__PrimaryKey__NameAssignment_3)
	{ after(grammarAccess.getPrimaryKeyAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group__4__Impl
	rule__PrimaryKey__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getGroup_4()); }
	(rule__PrimaryKey__Group_4__0)*
	{ after(grammarAccess.getPrimaryKeyAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group__5__Impl
	rule__PrimaryKey__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getRPARENTerminalRuleCall_5()); }
	RULE_RPAREN
	{ after(grammarAccess.getPrimaryKeyAccess().getRPARENTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getCOMATerminalRuleCall_6()); }
	(RULE_COMA)?
	{ after(grammarAccess.getPrimaryKeyAccess().getCOMATerminalRuleCall_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryKey__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group_4__0__Impl
	rule__PrimaryKey__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getCOMATerminalRuleCall_4_0()); }
	RULE_COMA
	{ after(grammarAccess.getPrimaryKeyAccess().getCOMATerminalRuleCall_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getIDTerminalRuleCall_4_1()); }
	RULE_ID
	{ after(grammarAccess.getPrimaryKeyAccess().getIDTerminalRuleCall_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForeignKey__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__0__Impl
	rule__ForeignKey__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getFOREIGNTerminalRuleCall_0()); }
	RULE_FOREIGN
	{ after(grammarAccess.getForeignKeyAccess().getFOREIGNTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__1__Impl
	rule__ForeignKey__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getKEYTerminalRuleCall_1()); }
	RULE_KEY
	{ after(grammarAccess.getForeignKeyAccess().getKEYTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__2__Impl
	rule__ForeignKey__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getLPARENTerminalRuleCall_2()); }
	RULE_LPAREN
	{ after(grammarAccess.getForeignKeyAccess().getLPARENTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__3__Impl
	rule__ForeignKey__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getNameAssignment_3()); }
	(rule__ForeignKey__NameAssignment_3)
	{ after(grammarAccess.getForeignKeyAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__4__Impl
	rule__ForeignKey__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getRPARENTerminalRuleCall_4()); }
	RULE_RPAREN
	{ after(grammarAccess.getForeignKeyAccess().getRPARENTerminalRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__5__Impl
	rule__ForeignKey__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getREFERENCESTerminalRuleCall_5()); }
	RULE_REFERENCES
	{ after(grammarAccess.getForeignKeyAccess().getREFERENCESTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__6__Impl
	rule__ForeignKey__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getReftableAssignment_6()); }
	(rule__ForeignKey__ReftableAssignment_6)
	{ after(grammarAccess.getForeignKeyAccess().getReftableAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__7__Impl
	rule__ForeignKey__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getLPARENTerminalRuleCall_7()); }
	RULE_LPAREN
	{ after(grammarAccess.getForeignKeyAccess().getLPARENTerminalRuleCall_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__8__Impl
	rule__ForeignKey__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getRefAssignment_8()); }
	(rule__ForeignKey__RefAssignment_8)
	{ after(grammarAccess.getForeignKeyAccess().getRefAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__9__Impl
	rule__ForeignKey__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getRPARENTerminalRuleCall_9()); }
	RULE_RPAREN
	{ after(grammarAccess.getForeignKeyAccess().getRPARENTerminalRuleCall_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getCOMATerminalRuleCall_10()); }
	(RULE_COMA)?
	{ after(grammarAccess.getForeignKeyAccess().getCOMATerminalRuleCall_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DataBase__TablesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDataBaseAccess().getTablesTableParserRuleCall_0()); }
		ruleTable
		{ after(grammarAccess.getDataBaseAccess().getTablesTableParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getTableAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__ColumnsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAccess().getColumnsColumnParserRuleCall_4_0()); }
		rulecolumn
		{ after(grammarAccess.getTableAccess().getColumnsColumnParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__PrimaryKeyAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAccess().getPrimaryKeyPrimaryKeyParserRuleCall_5_0()); }
		ruleprimaryKey
		{ after(grammarAccess.getTableAccess().getPrimaryKeyPrimaryKeyParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__ForeignkeysAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAccess().getForeignkeysForeignKeyParserRuleCall_6_0()); }
		ruleforeignKey
		{ after(grammarAccess.getTableAccess().getForeignkeysForeignKeyParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getTypeDataTypeEnumRuleCall_1_0()); }
		ruleDataType
		{ after(grammarAccess.getColumnAccess().getTypeDataTypeEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryKeyAccess().getNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getPrimaryKeyAccess().getNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForeignKeyAccess().getNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getForeignKeyAccess().getNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__ReftableAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForeignKeyAccess().getReftableTableCrossReference_6_0()); }
		(
			{ before(grammarAccess.getForeignKeyAccess().getReftableTableIDTerminalRuleCall_6_0_1()); }
			RULE_ID
			{ after(grammarAccess.getForeignKeyAccess().getReftableTableIDTerminalRuleCall_6_0_1()); }
		)
		{ after(grammarAccess.getForeignKeyAccess().getReftableTableCrossReference_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__RefAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForeignKeyAccess().getRefColumnCrossReference_8_0()); }
		(
			{ before(grammarAccess.getForeignKeyAccess().getRefColumnIDTerminalRuleCall_8_0_1()); }
			RULE_ID
			{ after(grammarAccess.getForeignKeyAccess().getRefColumnIDTerminalRuleCall_8_0_1()); }
		)
		{ after(grammarAccess.getForeignKeyAccess().getRefColumnCrossReference_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_CREATE : 'CREATE';

RULE_TABLA : 'TABLE';

RULE_LPAREN : '(';

RULE_RPAREN : ')';

RULE_COMA : ',';

RULE_PRIMARY : 'PRIMARY';

RULE_FOREIGN : 'FOREIGN';

RULE_REFERENCES : 'REFERENCES';

RULE_KEY : 'KEY';

RULE_NOT : 'NOT';

RULE_NULL : 'NULL';

RULE_ID : ('a'..'z'|'A'..'Z')+ ('0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

/*
 * generated by Xtext 2.9.1
 */
package org.xtext.example.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SQLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DataBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SQL.DataBase");
		private final Assignment cTablesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTablesTableParserRuleCall_0 = (RuleCall)cTablesAssignment.eContents().get(0);
		
		//DataBase:
		//	Tables+=Table+;
		@Override public ParserRule getRule() { return rule; }
		
		//Tables+=Table+
		public Assignment getTablesAssignment() { return cTablesAssignment; }
		
		//Table
		public RuleCall getTablesTableParserRuleCall_0() { return cTablesTableParserRuleCall_0; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SQL.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCREATETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cTABLATerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cLPARENTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cColumnsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cColumnsColumnParserRuleCall_4_0 = (RuleCall)cColumnsAssignment_4.eContents().get(0);
		private final Assignment cPrimaryKeyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPrimaryKeyPrimaryKeyParserRuleCall_5_0 = (RuleCall)cPrimaryKeyAssignment_5.eContents().get(0);
		private final Assignment cForeignkeysAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cForeignkeysForeignKeyParserRuleCall_6_0 = (RuleCall)cForeignkeysAssignment_6.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//Table:
		//	CREATE TABLA
		//	name=ID
		//	LPAREN
		//	columns+=column+
		//	primaryKey=primaryKey
		//	foreignkeys+=foreignKey*
		//	RPAREN;
		@Override public ParserRule getRule() { return rule; }
		
		//CREATE TABLA name=ID LPAREN columns+=column+ primaryKey=primaryKey foreignkeys+=foreignKey* RPAREN
		public Group getGroup() { return cGroup; }
		
		//CREATE
		public RuleCall getCREATETerminalRuleCall_0() { return cCREATETerminalRuleCall_0; }
		
		//TABLA
		public RuleCall getTABLATerminalRuleCall_1() { return cTABLATerminalRuleCall_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_3() { return cLPARENTerminalRuleCall_3; }
		
		//columns+=column+
		public Assignment getColumnsAssignment_4() { return cColumnsAssignment_4; }
		
		//column
		public RuleCall getColumnsColumnParserRuleCall_4_0() { return cColumnsColumnParserRuleCall_4_0; }
		
		//primaryKey=primaryKey
		public Assignment getPrimaryKeyAssignment_5() { return cPrimaryKeyAssignment_5; }
		
		//primaryKey
		public RuleCall getPrimaryKeyPrimaryKeyParserRuleCall_5_0() { return cPrimaryKeyPrimaryKeyParserRuleCall_5_0; }
		
		//foreignkeys+=foreignKey*
		public Assignment getForeignkeysAssignment_6() { return cForeignkeysAssignment_6; }
		
		//foreignKey
		public RuleCall getForeignkeysForeignKeyParserRuleCall_6_0() { return cForeignkeysForeignKeyParserRuleCall_6_0; }
		
		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_7() { return cRPARENTerminalRuleCall_7; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SQL.column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDataTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cNOTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cNULLTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final RuleCall cCOMATerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//column:
		//	name=ID type=DataType NOT? NULL? COMA?;
		@Override public ParserRule getRule() { return rule; }
		
		////name=ID type=(INTEGER|VARCHAR|CHARACTER|BOOLEAN|DATE|TIME|FLOAT|DECIMAL|NUMERIC) NOT? NULL? COMA?
		//name=ID type=DataType NOT? NULL? COMA?
		public Group getGroup() { return cGroup; }
		
		////name=ID type=(INTEGER|VARCHAR|CHARACTER|BOOLEAN|DATE|TIME|FLOAT|DECIMAL|NUMERIC) NOT? NULL? COMA?
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//type=DataType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//DataType
		public RuleCall getTypeDataTypeEnumRuleCall_1_0() { return cTypeDataTypeEnumRuleCall_1_0; }
		
		//NOT?
		public RuleCall getNOTTerminalRuleCall_2() { return cNOTTerminalRuleCall_2; }
		
		//NULL?
		public RuleCall getNULLTerminalRuleCall_3() { return cNULLTerminalRuleCall_3; }
		
		//COMA?
		public RuleCall getCOMATerminalRuleCall_4() { return cCOMATerminalRuleCall_4; }
	}
	public class PrimaryKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SQL.primaryKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPRIMARYTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cKEYTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cLPARENTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cCOMATerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_4_1 = (RuleCall)cGroup_4.eContents().get(1);
		private final RuleCall cRPARENTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cCOMATerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//primaryKey:
		//	PRIMARY KEY LPAREN name=ID (COMA ID)* RPAREN COMA?;
		@Override public ParserRule getRule() { return rule; }
		
		//PRIMARY KEY LPAREN name=ID (COMA ID)* RPAREN COMA?
		public Group getGroup() { return cGroup; }
		
		//PRIMARY
		public RuleCall getPRIMARYTerminalRuleCall_0() { return cPRIMARYTerminalRuleCall_0; }
		
		//KEY
		public RuleCall getKEYTerminalRuleCall_1() { return cKEYTerminalRuleCall_1; }
		
		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_2() { return cLPARENTerminalRuleCall_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//(COMA ID)*
		public Group getGroup_4() { return cGroup_4; }
		
		//COMA
		public RuleCall getCOMATerminalRuleCall_4_0() { return cCOMATerminalRuleCall_4_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_4_1() { return cIDTerminalRuleCall_4_1; }
		
		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_5() { return cRPARENTerminalRuleCall_5; }
		
		//COMA?
		public RuleCall getCOMATerminalRuleCall_6() { return cCOMATerminalRuleCall_6; }
	}
	public class ForeignKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SQL.foreignKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFOREIGNTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cKEYTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cLPARENTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final RuleCall cRPARENTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cREFERENCESTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final Assignment cReftableAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cReftableTableCrossReference_6_0 = (CrossReference)cReftableAssignment_6.eContents().get(0);
		private final RuleCall cReftableTableIDTerminalRuleCall_6_0_1 = (RuleCall)cReftableTableCrossReference_6_0.eContents().get(1);
		private final RuleCall cLPARENTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Assignment cRefAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cRefColumnCrossReference_8_0 = (CrossReference)cRefAssignment_8.eContents().get(0);
		private final RuleCall cRefColumnIDTerminalRuleCall_8_0_1 = (RuleCall)cRefColumnCrossReference_8_0.eContents().get(1);
		private final RuleCall cRPARENTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final RuleCall cCOMATerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		
		//foreignKey:
		//	FOREIGN KEY LPAREN name=ID RPAREN
		//	REFERENCES reftable=[Table] LPAREN ref=[column] RPAREN COMA?;
		@Override public ParserRule getRule() { return rule; }
		
		//FOREIGN KEY LPAREN name=ID RPAREN REFERENCES reftable=[Table] LPAREN ref=[column] RPAREN COMA?
		public Group getGroup() { return cGroup; }
		
		//FOREIGN
		public RuleCall getFOREIGNTerminalRuleCall_0() { return cFOREIGNTerminalRuleCall_0; }
		
		//KEY
		public RuleCall getKEYTerminalRuleCall_1() { return cKEYTerminalRuleCall_1; }
		
		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_2() { return cLPARENTerminalRuleCall_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_4() { return cRPARENTerminalRuleCall_4; }
		
		//REFERENCES
		public RuleCall getREFERENCESTerminalRuleCall_5() { return cREFERENCESTerminalRuleCall_5; }
		
		//reftable=[Table]
		public Assignment getReftableAssignment_6() { return cReftableAssignment_6; }
		
		//[Table]
		public CrossReference getReftableTableCrossReference_6_0() { return cReftableTableCrossReference_6_0; }
		
		//ID
		public RuleCall getReftableTableIDTerminalRuleCall_6_0_1() { return cReftableTableIDTerminalRuleCall_6_0_1; }
		
		//LPAREN
		public RuleCall getLPARENTerminalRuleCall_7() { return cLPARENTerminalRuleCall_7; }
		
		//ref=[column]
		public Assignment getRefAssignment_8() { return cRefAssignment_8; }
		
		//[column]
		public CrossReference getRefColumnCrossReference_8_0() { return cRefColumnCrossReference_8_0; }
		
		//ID
		public RuleCall getRefColumnIDTerminalRuleCall_8_0_1() { return cRefColumnIDTerminalRuleCall_8_0_1; }
		
		//RPAREN
		public RuleCall getRPARENTerminalRuleCall_9() { return cRPARENTerminalRuleCall_9; }
		
		//COMA?
		public RuleCall getCOMATerminalRuleCall_10() { return cCOMATerminalRuleCall_10; }
	}
	
	public class DataTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SQL.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVARCHAR255EnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVARCHAR255Varchar255Keyword_0_0 = (Keyword)cVARCHAR255EnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cVARCHAREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cVARCHARVarcharKeyword_1_0 = (Keyword)cVARCHAREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cINTIntKeyword_2_0 = (Keyword)cINTEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cCHAREnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cCHARCharacterKeyword_3_0 = (Keyword)cCHAREnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cBOOLEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cBOOLBooleanKeyword_4_0 = (Keyword)cBOOLEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cDATEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cDATEDateKeyword_5_0 = (Keyword)cDATEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cTIMEEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cTIMETimeKeyword_6_0 = (Keyword)cTIMEEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cFLOATFloatKeyword_7_0 = (Keyword)cFLOATEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cDECIMALEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cDECIMALDecimalKeyword_8_0 = (Keyword)cDECIMALEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cNUMERICEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cNUMERICNumericKeyword_9_0 = (Keyword)cNUMERICEnumLiteralDeclaration_9.eContents().get(0);
		
		//enum DataType:
		//	VARCHAR255="varchar(255)" | VARCHAR="varchar" | INT="int" | CHAR="character" | BOOL="boolean" | DATE="date" |
		//	TIME="time" | FLOAT="float" | DECIMAL="decimal" | NUMERIC="numeric";
		public EnumRule getRule() { return rule; }
		
		//VARCHAR255="varchar(255)" | VARCHAR="varchar" | INT="int" | CHAR="character" | BOOL="boolean" | DATE="date" |
		//TIME="time" | FLOAT="float" | DECIMAL="decimal" | NUMERIC="numeric"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VARCHAR255="varchar(255)"
		public EnumLiteralDeclaration getVARCHAR255EnumLiteralDeclaration_0() { return cVARCHAR255EnumLiteralDeclaration_0; }
		
		//"varchar(255)"
		public Keyword getVARCHAR255Varchar255Keyword_0_0() { return cVARCHAR255Varchar255Keyword_0_0; }
		
		//VARCHAR="varchar"
		public EnumLiteralDeclaration getVARCHAREnumLiteralDeclaration_1() { return cVARCHAREnumLiteralDeclaration_1; }
		
		//"varchar"
		public Keyword getVARCHARVarcharKeyword_1_0() { return cVARCHARVarcharKeyword_1_0; }
		
		//INT="int"
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_2() { return cINTEnumLiteralDeclaration_2; }
		
		//"int"
		public Keyword getINTIntKeyword_2_0() { return cINTIntKeyword_2_0; }
		
		//CHAR="character"
		public EnumLiteralDeclaration getCHAREnumLiteralDeclaration_3() { return cCHAREnumLiteralDeclaration_3; }
		
		//"character"
		public Keyword getCHARCharacterKeyword_3_0() { return cCHARCharacterKeyword_3_0; }
		
		//BOOL="boolean"
		public EnumLiteralDeclaration getBOOLEnumLiteralDeclaration_4() { return cBOOLEnumLiteralDeclaration_4; }
		
		//"boolean"
		public Keyword getBOOLBooleanKeyword_4_0() { return cBOOLBooleanKeyword_4_0; }
		
		//DATE="date"
		public EnumLiteralDeclaration getDATEEnumLiteralDeclaration_5() { return cDATEEnumLiteralDeclaration_5; }
		
		//"date"
		public Keyword getDATEDateKeyword_5_0() { return cDATEDateKeyword_5_0; }
		
		//TIME="time"
		public EnumLiteralDeclaration getTIMEEnumLiteralDeclaration_6() { return cTIMEEnumLiteralDeclaration_6; }
		
		//"time"
		public Keyword getTIMETimeKeyword_6_0() { return cTIMETimeKeyword_6_0; }
		
		//FLOAT="float"
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_7() { return cFLOATEnumLiteralDeclaration_7; }
		
		//"float"
		public Keyword getFLOATFloatKeyword_7_0() { return cFLOATFloatKeyword_7_0; }
		
		//DECIMAL="decimal"
		public EnumLiteralDeclaration getDECIMALEnumLiteralDeclaration_8() { return cDECIMALEnumLiteralDeclaration_8; }
		
		//"decimal"
		public Keyword getDECIMALDecimalKeyword_8_0() { return cDECIMALDecimalKeyword_8_0; }
		
		//NUMERIC="numeric"
		public EnumLiteralDeclaration getNUMERICEnumLiteralDeclaration_9() { return cNUMERICEnumLiteralDeclaration_9; }
		
		//"numeric"
		public Keyword getNUMERICNumericKeyword_9_0() { return cNUMERICNumericKeyword_9_0; }
	}
	
	private final DataBaseElements pDataBase;
	private final TableElements pTable;
	private final ColumnElements pColumn;
	private final PrimaryKeyElements pPrimaryKey;
	private final ForeignKeyElements pForeignKey;
	private final DataTypeElements eDataType;
	private final TerminalRule tCREATE;
	private final TerminalRule tTABLA;
	private final TerminalRule tLPAREN;
	private final TerminalRule tRPAREN;
	private final TerminalRule tCOMA;
	private final TerminalRule tPRIMARY;
	private final TerminalRule tFOREIGN;
	private final TerminalRule tREFERENCES;
	private final TerminalRule tKEY;
	private final TerminalRule tNOT;
	private final TerminalRule tNULL;
	private final TerminalRule tID;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SQLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDataBase = new DataBaseElements();
		this.pTable = new TableElements();
		this.pColumn = new ColumnElements();
		this.pPrimaryKey = new PrimaryKeyElements();
		this.pForeignKey = new ForeignKeyElements();
		this.eDataType = new DataTypeElements();
		this.tCREATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SQL.CREATE");
		this.tTABLA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SQL.TABLA");
		this.tLPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SQL.LPAREN");
		this.tRPAREN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SQL.RPAREN");
		this.tCOMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SQL.COMA");
		this.tPRIMARY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SQL.PRIMARY");
		this.tFOREIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SQL.FOREIGN");
		this.tREFERENCES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SQL.REFERENCES");
		this.tKEY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SQL.KEY");
		this.tNOT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SQL.NOT");
		this.tNULL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SQL.NULL");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.SQL.ID");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.SQL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DataBase:
	//	Tables+=Table+;
	public DataBaseElements getDataBaseAccess() {
		return pDataBase;
	}
	
	public ParserRule getDataBaseRule() {
		return getDataBaseAccess().getRule();
	}
	
	//Table:
	//	CREATE TABLA
	//	name=ID
	//	LPAREN
	//	columns+=column+
	//	primaryKey=primaryKey
	//	foreignkeys+=foreignKey*
	//	RPAREN;
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//column:
	//	name=ID type=DataType NOT? NULL? COMA?;
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//primaryKey:
	//	PRIMARY KEY LPAREN name=ID (COMA ID)* RPAREN COMA?;
	public PrimaryKeyElements getPrimaryKeyAccess() {
		return pPrimaryKey;
	}
	
	public ParserRule getPrimaryKeyRule() {
		return getPrimaryKeyAccess().getRule();
	}
	
	//foreignKey:
	//	FOREIGN KEY LPAREN name=ID RPAREN
	//	REFERENCES reftable=[Table] LPAREN ref=[column] RPAREN COMA?;
	public ForeignKeyElements getForeignKeyAccess() {
		return pForeignKey;
	}
	
	public ParserRule getForeignKeyRule() {
		return getForeignKeyAccess().getRule();
	}
	
	//enum DataType:
	//	VARCHAR255="varchar(255)" | VARCHAR="varchar" | INT="int" | CHAR="character" | BOOL="boolean" | DATE="date" |
	//	TIME="time" | FLOAT="float" | DECIMAL="decimal" | NUMERIC="numeric";
	public DataTypeElements getDataTypeAccess() {
		return eDataType;
	}
	
	public EnumRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//terminal CREATE:
	//	"CREATE";
	public TerminalRule getCREATERule() {
		return tCREATE;
	}
	
	//terminal TABLA:
	//	"TABLE";
	public TerminalRule getTABLARule() {
		return tTABLA;
	}
	
	//terminal LPAREN:
	//	"(";
	public TerminalRule getLPARENRule() {
		return tLPAREN;
	}
	
	//terminal RPAREN:
	//	")";
	public TerminalRule getRPARENRule() {
		return tRPAREN;
	}
	
	//terminal COMA:
	//	",";
	public TerminalRule getCOMARule() {
		return tCOMA;
	}
	
	//terminal PRIMARY:
	//	"PRIMARY";
	public TerminalRule getPRIMARYRule() {
		return tPRIMARY;
	}
	
	//terminal FOREIGN:
	//	"FOREIGN";
	public TerminalRule getFOREIGNRule() {
		return tFOREIGN;
	}
	
	//terminal REFERENCES:
	//	"REFERENCES";
	public TerminalRule getREFERENCESRule() {
		return tREFERENCES;
	}
	
	//terminal KEY:
	//	"KEY";
	public TerminalRule getKEYRule() {
		return tKEY;
	}
	
	//terminal NOT:
	//	"NOT";
	public TerminalRule getNOTRule() {
		return tNOT;
	}
	
	//terminal NULL:
	//	"NULL";
	public TerminalRule getNULLRule() {
		return tNULL;
	}
	
	//terminal ID:
	//	('a'..'z' | 'A'..'Z')+ '0'..'9'*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

/*
 * generated by Xtext 2.9.1
 */
package org.xtext.example.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.services.SQLGrammarAccess;

@SuppressWarnings("all")
public class SQLSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SQLGrammarAccess grammarAccess;
	protected AbstractElementAlias match_column_COMATerminalRuleCall_4_q;
	protected AbstractElementAlias match_column_NOTTerminalRuleCall_2_q;
	protected AbstractElementAlias match_column_NULLTerminalRuleCall_3_q;
	protected AbstractElementAlias match_foreignKey_COMATerminalRuleCall_10_q;
	protected AbstractElementAlias match_primaryKey_COMATerminalRuleCall_6_q;
	protected AbstractElementAlias match_primaryKey___COMATerminalRuleCall_4_0_IDTerminalRuleCall_4_1__a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SQLGrammarAccess) access;
		match_column_COMATerminalRuleCall_4_q = new TokenAlias(false, true, grammarAccess.getColumnAccess().getCOMATerminalRuleCall_4());
		match_column_NOTTerminalRuleCall_2_q = new TokenAlias(false, true, grammarAccess.getColumnAccess().getNOTTerminalRuleCall_2());
		match_column_NULLTerminalRuleCall_3_q = new TokenAlias(false, true, grammarAccess.getColumnAccess().getNULLTerminalRuleCall_3());
		match_foreignKey_COMATerminalRuleCall_10_q = new TokenAlias(false, true, grammarAccess.getForeignKeyAccess().getCOMATerminalRuleCall_10());
		match_primaryKey_COMATerminalRuleCall_6_q = new TokenAlias(false, true, grammarAccess.getPrimaryKeyAccess().getCOMATerminalRuleCall_6());
		match_primaryKey___COMATerminalRuleCall_4_0_IDTerminalRuleCall_4_1__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getPrimaryKeyAccess().getCOMATerminalRuleCall_4_0()), new TokenAlias(false, false, grammarAccess.getPrimaryKeyAccess().getIDTerminalRuleCall_4_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getCOMARule())
			return getCOMAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCREATERule())
			return getCREATEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getFOREIGNRule())
			return getFOREIGNToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getKEYRule())
			return getKEYToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLPARENRule())
			return getLPARENToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNOTRule())
			return getNOTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNULLRule())
			return getNULLToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPRIMARYRule())
			return getPRIMARYToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getREFERENCESRule())
			return getREFERENCESToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRPARENRule())
			return getRPARENToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTABLARule())
			return getTABLAToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal COMA: ",";
	 */
	protected String getCOMAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	/**
	 * terminal CREATE: "CREATE";
	 */
	protected String getCREATEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "CREATE";
	}
	
	/**
	 * terminal FOREIGN: "FOREIGN";
	 */
	protected String getFOREIGNToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "FOREIGN";
	}
	
	/**
	 * terminal ID: (('a'..'z')|('A'..'Z'))+('0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal KEY: "KEY";
	 */
	protected String getKEYToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "KEY";
	}
	
	/**
	 * terminal LPAREN: "(";
	 */
	protected String getLPARENToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "(";
	}
	
	/**
	 * terminal NOT: "NOT";
	 */
	protected String getNOTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "NOT";
	}
	
	/**
	 * terminal NULL: "NULL";
	 */
	protected String getNULLToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "NULL";
	}
	
	/**
	 * terminal PRIMARY: "PRIMARY";
	 */
	protected String getPRIMARYToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "PRIMARY";
	}
	
	/**
	 * terminal REFERENCES: "REFERENCES";
	 */
	protected String getREFERENCESToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "REFERENCES";
	}
	
	/**
	 * terminal RPAREN: ")";
	 */
	protected String getRPARENToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ")";
	}
	
	/**
	 * terminal TABLA: "TABLE";
	 */
	protected String getTABLAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "TABLE";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_column_COMATerminalRuleCall_4_q.equals(syntax))
				emit_column_COMATerminalRuleCall_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_column_NOTTerminalRuleCall_2_q.equals(syntax))
				emit_column_NOTTerminalRuleCall_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_column_NULLTerminalRuleCall_3_q.equals(syntax))
				emit_column_NULLTerminalRuleCall_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_foreignKey_COMATerminalRuleCall_10_q.equals(syntax))
				emit_foreignKey_COMATerminalRuleCall_10_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_primaryKey_COMATerminalRuleCall_6_q.equals(syntax))
				emit_primaryKey_COMATerminalRuleCall_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_primaryKey___COMATerminalRuleCall_4_0_IDTerminalRuleCall_4_1__a.equals(syntax))
				emit_primaryKey___COMATerminalRuleCall_4_0_IDTerminalRuleCall_4_1__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     COMA?
	 *
	 * This ambiguous syntax occurs at:
	 *     type=DataType NOT? NULL? (ambiguity) (rule end)
	 */
	protected void emit_column_COMATerminalRuleCall_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     NOT?
	 *
	 * This ambiguous syntax occurs at:
	 *     type=DataType (ambiguity) NULL? COMA? (rule end)
	 */
	protected void emit_column_NOTTerminalRuleCall_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     NULL?
	 *
	 * This ambiguous syntax occurs at:
	 *     type=DataType NOT? (ambiguity) COMA? (rule end)
	 */
	protected void emit_column_NULLTerminalRuleCall_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     COMA?
	 *
	 * This ambiguous syntax occurs at:
	 *     ref=[column|ID] RPAREN (ambiguity) (rule end)
	 */
	protected void emit_foreignKey_COMATerminalRuleCall_10_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     COMA?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (COMA ID)* RPAREN (ambiguity) (rule end)
	 */
	protected void emit_primaryKey_COMATerminalRuleCall_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (COMA ID)*
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) RPAREN COMA? (rule end)
	 */
	protected void emit_primaryKey___COMATerminalRuleCall_4_0_IDTerminalRuleCall_4_1__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}

model sql driver EMF {path='SQL.ecore'};
model java driver EMF {path='mmJavaMinimalista.ecore'};

 /**
* This file is called from masterSql2Java.etl, and handle the transformation of
* all elements inside of the entities package
*/
 

/**
* Transform a Table element into entity Class Entity element
*/
@lazy
rule Table2Class
	transform t : sql!Table
	to c : java!Class {
		c.name = t.name;
		c.visibility = java!Visibility#public;
		
		// OrderedSet to save the unique imports for the class element
		var imports : new OrderedSet;
		
		// Define entity attributes (all types are primitives at this moment)
		c.attributes = t.column.equivalent();
		
		// Find primary key attributes
		var primaryKeyAttributes = c.attributes.select(a|t.primarykey.column.collect(c|c.name).includes(a.name));
		for (attribute : java!Attribute in primaryKeyAttributes) {
			// Add annotation and import its class
			attribute.annotateAttribute.add(getAnnotation("@Id"));
			imports.add("javax.persistence.Id");
		}
		
		// Find many to one relations
		var foreignKeyAttributes = c.attributes.select(a|t.foreignkey.column.collect(c|c.name).flatten().includes(a.name));
		for (attribute : java!Attribute in foreignKeyAttributes) {
			
			// Annotate the attribute and add imports to the class
			attribute.annotateAttribute.add(annotateManyToOne());
			imports.add("javax.persistence.ManyToOne");
			imports.add("javax.persistence.FetchType");
			attribute.annotateAttribute.add(getAnnotation("@PrimaryKeyJoinColumn"));
			imports.add("javax.persistence.PrimaryKeyJoinColumn");
			attribute.annotateAttribute.add(getAnnotation("@PodamExclude"));
			imports.add("uk.co.jemos.podam.common.PodamExclude");
			imports.add("javax.persistence.CascadeType");
			
			// Update the name and type of the attribute to reference the related class
			var tableRef = t.foreignkey.select(f|f.column.collect(c|c.name).flatten().includes(attribute.name)).tableRef;
			attribute.name = tableRef.first().name.toLowerCase();
			attribute.datatypeAttribute = typeMap.get(attribute.name);
		}
		
		// Find one to many relations
		for (anotherTable : sql!Table in sql!Table.all().select(a|a.name <> t.name)) {
			for(foreignKey : ForeignKey in anotherTable.foreignkey.select(f|f.tableRef.name == t.name)) {
				
				// When found a reference to the class from another entity, add a new attribute for the relation
				var attributeOneToMany = new java!Attribute;
				attributeOneToMany.name = anotherTable.name.firstToLowerCase() + "s";
				attributeOneToMany.datatypeAttribute = typeMap.get(anotherTable.name.firstToLowerCase() + "List");
				attributeOneToMany.visibility = java!Visibility#private;
				
				// Add annotations and import the required classes
				attributeOneToMany.annotateAttribute.add(annotateOneToMany(t.name.toLowerCase()));
				imports.add("javax.persistence.OneToMany");
				imports.add("javax.persistence.CascadeType");
				attributeOneToMany.annotateAttribute.add(getAnnotation("@PodamExclude"));
				imports.add("uk.co.jemos.podam.common.PodamExclude");
				c.attributes.add(attributeOneToMany);
				imports.add("java.util.List");
			}
		}
		
		// Define getters and setters method for each attribute
		c.methods.addAll(c.attributes.collect(a|a.getMethods()));
		c.methods.addAll(c.attributes.collect(a|a.setMethods()));
		
		// Add main annotation for the entity and its import
		c.annotateClass.add(getAnnotation("@Entity"));
		imports.add("javax.persistence.Entity");
		
		// Iterate imports and add the elements to the class
		for (importString : String in imports) {
			c.imports.add(getImport(importString));
		}
	}

/**
* This rule handle a Column element to an Attribute 
*/
@lazy
rule Column2Attribute
	transform c : sql!Column
	to a : java!Attribute {
		a.name = c.name;
		a.visibility = java!Visibility#private;
		
		// Get the Java primitive type for the SQL type
		a.datatypeAttribute = typeMap.get(c.type);
	}

/**
* Return getter method for an attribute
*/
operation java!Attribute getMethods() : java!Method {
	var getter = new java!Method;
	getter.name = "get" + self.name.firstToUpperCase();
	getter.visibility = java!Visibility#public;
	
	// The return data type is the same of the attribute
	getter.datatypeReturn = self.datatypeAttribute;
	return getter;
}

/**
* Return setter method for an attribute
*/
operation java!Attribute setMethods() : java!Method {
	var setter = new java!Method;
	setter.name = "set" + self.name.firstToUpperCase();
	setter.visibility = java!Visibility#public;
	
	// Add a parameter equal to the attribute
	var parameter = new java!Parameter;
	parameter.name = self.name;
	parameter.datatypeParameter = self.datatypeAttribute;
	setter.methodParameters.add(parameter);
	return setter;
}

/**
* Returns a special annotation for the many to one relation
*/
operation annotateManyToOne() : java!Annotation {
	// Define the key value for the fetch type  
	var keyValueFetch = new java!KeyValue;
	keyValueFetch.key = "fetch";
	keyValueFetch.value = "FetchType.LAZY";
	
	// Define the key value for the cascade operation
	var keyValueCascade = new java!KeyValue;
	keyValueCascade.key = "cascade";
	keyValueCascade.value = "CascadeType.PERSIST";
	
	// Create annotation with the two parameters
	var manyToOne = getAnnotation("@ManyToOne");
	manyToOne.annotationParameters.add(keyValueFetch);
	manyToOne.annotationParameters.add(keyValueCascade);
	return manyToOne;
}

/**
* Returns a special annotation for the one to many relation
*/
operation annotateOneToMany(mappedBy : String) : java!Annotation {
	// Define the key value for the fetch type
	var keyValueCascade = new java!KeyValue;
	keyValueCascade.key = "cascade";
	keyValueCascade.value = "CascadeType.ALL";
	
	// Define the key value for the map and reference to the element
	var keyValueFetch = new java!KeyValue;
	keyValueFetch.key = "mappedBy";
	keyValueFetch.value = "\"" + mappedBy + "\"";
	
	// Create annotation
	var oneToMany = getAnnotation("@OneToMany");
	oneToMany.annotationParameters.add(keyValueFetch);
	oneToMany.annotationParameters.add(keyValueCascade);
	return oneToMany;
}

/*
 * generated by Xtext 2.9.1
 */
grammar InternalSQL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.mydsl.services.SQLGrammarAccess;

}
@parser::members {
	private SQLGrammarAccess grammarAccess;

	public void setGrammarAccess(SQLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleDatabase
entryRuleDatabase
:
{ before(grammarAccess.getDatabaseRule()); }
	 ruleDatabase
{ after(grammarAccess.getDatabaseRule()); } 
	 EOF 
;

// Rule Database
ruleDatabase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDatabaseAccess().getGroup()); }
		(rule__Database__Group__0)
		{ after(grammarAccess.getDatabaseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTable
entryRuleTable
:
{ before(grammarAccess.getTableRule()); }
	 ruleTable
{ after(grammarAccess.getTableRule()); } 
	 EOF 
;

// Rule Table
ruleTable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTableAccess().getGroup()); }
		(rule__Table__Group__0)
		{ after(grammarAccess.getTableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColumn
entryRuleColumn
:
{ before(grammarAccess.getColumnRule()); }
	 ruleColumn
{ after(grammarAccess.getColumnRule()); } 
	 EOF 
;

// Rule Column
ruleColumn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColumnAccess().getGroup()); }
		(rule__Column__Group__0)
		{ after(grammarAccess.getColumnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryKey
entryRulePrimaryKey
:
{ before(grammarAccess.getPrimaryKeyRule()); }
	 rulePrimaryKey
{ after(grammarAccess.getPrimaryKeyRule()); } 
	 EOF 
;

// Rule PrimaryKey
rulePrimaryKey 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryKeyAccess().getGroup()); }
		(rule__PrimaryKey__Group__0)
		{ after(grammarAccess.getPrimaryKeyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForeignKey
entryRuleForeignKey
:
{ before(grammarAccess.getForeignKeyRule()); }
	 ruleForeignKey
{ after(grammarAccess.getForeignKeyRule()); } 
	 EOF 
;

// Rule ForeignKey
ruleForeignKey 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForeignKeyAccess().getGroup()); }
		(rule__ForeignKey__Group__0)
		{ after(grammarAccess.getForeignKeyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Database__Group__0__Impl
	rule__Database__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatabaseAccess().getDatabaseAction_0()); }
	()
	{ after(grammarAccess.getDatabaseAccess().getDatabaseAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Database__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDatabaseAccess().getTablesAssignment_1()); }
	(rule__Database__TablesAssignment_1)*
	{ after(grammarAccess.getDatabaseAccess().getTablesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Table__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__0__Impl
	rule__Table__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getCREATE_TABLETerminalRuleCall_0()); }
	RULE_CREATE_TABLE
	{ after(grammarAccess.getTableAccess().getCREATE_TABLETerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__1__Impl
	rule__Table__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getNameAssignment_1()); }
	(rule__Table__NameAssignment_1)
	{ after(grammarAccess.getTableAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__2__Impl
	rule__Table__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getLPARTerminalRuleCall_2()); }
	RULE_LPAR
	{ after(grammarAccess.getTableAccess().getLPARTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__3__Impl
	rule__Table__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getColumnsAssignment_3()); }
	(rule__Table__ColumnsAssignment_3)
	{ after(grammarAccess.getTableAccess().getColumnsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__4__Impl
	rule__Table__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getGroup_4()); }
	(rule__Table__Group_4__0)*
	{ after(grammarAccess.getTableAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__5__Impl
	rule__Table__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getPrimaryKeyAssignment_5()); }
	(rule__Table__PrimaryKeyAssignment_5)?
	{ after(grammarAccess.getTableAccess().getPrimaryKeyAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__6__Impl
	rule__Table__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getForeignKeysAssignment_6()); }
	(rule__Table__ForeignKeysAssignment_6)*
	{ after(grammarAccess.getTableAccess().getForeignKeysAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getRPARTerminalRuleCall_7()); }
	RULE_RPAR
	{ after(grammarAccess.getTableAccess().getRPARTerminalRuleCall_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Table__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group_4__0__Impl
	rule__Table__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getCOMMATerminalRuleCall_4_0()); }
	RULE_COMMA
	{ after(grammarAccess.getTableAccess().getCOMMATerminalRuleCall_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getColumnsAssignment_4_1()); }
	(rule__Table__ColumnsAssignment_4_1)
	{ after(grammarAccess.getTableAccess().getColumnsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Column__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__0__Impl
	rule__Column__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getNameAssignment_0()); }
	(rule__Column__NameAssignment_0)
	{ after(grammarAccess.getColumnAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__1__Impl
	rule__Column__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getDataTypeAssignment_1()); }
	(rule__Column__DataTypeAssignment_1)
	{ after(grammarAccess.getColumnAccess().getDataTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getNotNullAssignment_2()); }
	(rule__Column__NotNullAssignment_2)?
	{ after(grammarAccess.getColumnAccess().getNotNullAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryKey__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group__0__Impl
	rule__PrimaryKey__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getCOMMATerminalRuleCall_0()); }
	RULE_COMMA
	{ after(grammarAccess.getPrimaryKeyAccess().getCOMMATerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group__1__Impl
	rule__PrimaryKey__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getPRIMARY_KEYTerminalRuleCall_1()); }
	RULE_PRIMARY_KEY
	{ after(grammarAccess.getPrimaryKeyAccess().getPRIMARY_KEYTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group__2__Impl
	rule__PrimaryKey__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getLPARTerminalRuleCall_2()); }
	RULE_LPAR
	{ after(grammarAccess.getPrimaryKeyAccess().getLPARTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group__3__Impl
	rule__PrimaryKey__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getColumnsAssignment_3()); }
	(rule__PrimaryKey__ColumnsAssignment_3)
	{ after(grammarAccess.getPrimaryKeyAccess().getColumnsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group__4__Impl
	rule__PrimaryKey__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getGroup_4()); }
	(rule__PrimaryKey__Group_4__0)*
	{ after(grammarAccess.getPrimaryKeyAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getRPARTerminalRuleCall_5()); }
	RULE_RPAR
	{ after(grammarAccess.getPrimaryKeyAccess().getRPARTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryKey__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group_4__0__Impl
	rule__PrimaryKey__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getCOMMATerminalRuleCall_4_0()); }
	RULE_COMMA
	{ after(grammarAccess.getPrimaryKeyAccess().getCOMMATerminalRuleCall_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getColumnsAssignment_4_1()); }
	(rule__PrimaryKey__ColumnsAssignment_4_1)
	{ after(grammarAccess.getPrimaryKeyAccess().getColumnsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForeignKey__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__0__Impl
	rule__ForeignKey__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getCOMMATerminalRuleCall_0()); }
	RULE_COMMA
	{ after(grammarAccess.getForeignKeyAccess().getCOMMATerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__1__Impl
	rule__ForeignKey__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getFOREIGN_KEYTerminalRuleCall_1()); }
	RULE_FOREIGN_KEY
	{ after(grammarAccess.getForeignKeyAccess().getFOREIGN_KEYTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__2__Impl
	rule__ForeignKey__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getLPARTerminalRuleCall_2()); }
	RULE_LPAR
	{ after(grammarAccess.getForeignKeyAccess().getLPARTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__3__Impl
	rule__ForeignKey__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getColumnsAssignment_3()); }
	(rule__ForeignKey__ColumnsAssignment_3)
	{ after(grammarAccess.getForeignKeyAccess().getColumnsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__4__Impl
	rule__ForeignKey__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getGroup_4()); }
	(rule__ForeignKey__Group_4__0)*
	{ after(grammarAccess.getForeignKeyAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__5__Impl
	rule__ForeignKey__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getRPARTerminalRuleCall_5()); }
	RULE_RPAR
	{ after(grammarAccess.getForeignKeyAccess().getRPARTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__6__Impl
	rule__ForeignKey__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getREFERENCESTerminalRuleCall_6()); }
	RULE_REFERENCES
	{ after(grammarAccess.getForeignKeyAccess().getREFERENCESTerminalRuleCall_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__7__Impl
	rule__ForeignKey__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getRefTableAssignment_7()); }
	(rule__ForeignKey__RefTableAssignment_7)
	{ after(grammarAccess.getForeignKeyAccess().getRefTableAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__8__Impl
	rule__ForeignKey__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getLPARTerminalRuleCall_8()); }
	RULE_LPAR
	{ after(grammarAccess.getForeignKeyAccess().getLPARTerminalRuleCall_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__9__Impl
	rule__ForeignKey__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getRefColumnsAssignment_9()); }
	(rule__ForeignKey__RefColumnsAssignment_9)
	{ after(grammarAccess.getForeignKeyAccess().getRefColumnsAssignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__10__Impl
	rule__ForeignKey__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getGroup_10()); }
	(rule__ForeignKey__Group_10__0)*
	{ after(grammarAccess.getForeignKeyAccess().getGroup_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__11__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getRPARTerminalRuleCall_11()); }
	RULE_RPAR
	{ after(grammarAccess.getForeignKeyAccess().getRPARTerminalRuleCall_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForeignKey__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group_4__0__Impl
	rule__ForeignKey__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getCOMMATerminalRuleCall_4_0()); }
	RULE_COMMA
	{ after(grammarAccess.getForeignKeyAccess().getCOMMATerminalRuleCall_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getColumnsAssignment_4_1()); }
	(rule__ForeignKey__ColumnsAssignment_4_1)
	{ after(grammarAccess.getForeignKeyAccess().getColumnsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForeignKey__Group_10__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group_10__0__Impl
	rule__ForeignKey__Group_10__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group_10__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getCOMMATerminalRuleCall_10_0()); }
	RULE_COMMA
	{ after(grammarAccess.getForeignKeyAccess().getCOMMATerminalRuleCall_10_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group_10__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group_10__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group_10__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getRefColumnsAssignment_10_1()); }
	(rule__ForeignKey__RefColumnsAssignment_10_1)
	{ after(grammarAccess.getForeignKeyAccess().getRefColumnsAssignment_10_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Database__TablesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDatabaseAccess().getTablesTableParserRuleCall_1_0()); }
		ruleTable
		{ after(grammarAccess.getDatabaseAccess().getTablesTableParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getTableAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__ColumnsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAccess().getColumnsColumnParserRuleCall_3_0()); }
		ruleColumn
		{ after(grammarAccess.getTableAccess().getColumnsColumnParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__ColumnsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAccess().getColumnsColumnParserRuleCall_4_1_0()); }
		ruleColumn
		{ after(grammarAccess.getTableAccess().getColumnsColumnParserRuleCall_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__PrimaryKeyAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAccess().getPrimaryKeyPrimaryKeyParserRuleCall_5_0()); }
		rulePrimaryKey
		{ after(grammarAccess.getTableAccess().getPrimaryKeyPrimaryKeyParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__ForeignKeysAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAccess().getForeignKeysForeignKeyParserRuleCall_6_0()); }
		ruleForeignKey
		{ after(grammarAccess.getTableAccess().getForeignKeysForeignKeyParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__DataTypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getDataTypeDATA_TYPETerminalRuleCall_1_0()); }
		RULE_DATA_TYPE
		{ after(grammarAccess.getColumnAccess().getDataTypeDATA_TYPETerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__NotNullAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getNotNullNOT_NULLTerminalRuleCall_2_0()); }
		RULE_NOT_NULL
		{ after(grammarAccess.getColumnAccess().getNotNullNOT_NULLTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__ColumnsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryKeyAccess().getColumnsColumnCrossReference_3_0()); }
		(
			{ before(grammarAccess.getPrimaryKeyAccess().getColumnsColumnIDTerminalRuleCall_3_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPrimaryKeyAccess().getColumnsColumnIDTerminalRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getPrimaryKeyAccess().getColumnsColumnCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__ColumnsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryKeyAccess().getColumnsColumnCrossReference_4_1_0()); }
		(
			{ before(grammarAccess.getPrimaryKeyAccess().getColumnsColumnIDTerminalRuleCall_4_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPrimaryKeyAccess().getColumnsColumnIDTerminalRuleCall_4_1_0_1()); }
		)
		{ after(grammarAccess.getPrimaryKeyAccess().getColumnsColumnCrossReference_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__ColumnsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForeignKeyAccess().getColumnsColumnCrossReference_3_0()); }
		(
			{ before(grammarAccess.getForeignKeyAccess().getColumnsColumnIDTerminalRuleCall_3_0_1()); }
			RULE_ID
			{ after(grammarAccess.getForeignKeyAccess().getColumnsColumnIDTerminalRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getForeignKeyAccess().getColumnsColumnCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__ColumnsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForeignKeyAccess().getColumnsColumnCrossReference_4_1_0()); }
		(
			{ before(grammarAccess.getForeignKeyAccess().getColumnsColumnIDTerminalRuleCall_4_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getForeignKeyAccess().getColumnsColumnIDTerminalRuleCall_4_1_0_1()); }
		)
		{ after(grammarAccess.getForeignKeyAccess().getColumnsColumnCrossReference_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__RefTableAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForeignKeyAccess().getRefTableTableCrossReference_7_0()); }
		(
			{ before(grammarAccess.getForeignKeyAccess().getRefTableTableIDTerminalRuleCall_7_0_1()); }
			RULE_ID
			{ after(grammarAccess.getForeignKeyAccess().getRefTableTableIDTerminalRuleCall_7_0_1()); }
		)
		{ after(grammarAccess.getForeignKeyAccess().getRefTableTableCrossReference_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__RefColumnsAssignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForeignKeyAccess().getRefColumnsColumnCrossReference_9_0()); }
		(
			{ before(grammarAccess.getForeignKeyAccess().getRefColumnsColumnIDTerminalRuleCall_9_0_1()); }
			RULE_ID
			{ after(grammarAccess.getForeignKeyAccess().getRefColumnsColumnIDTerminalRuleCall_9_0_1()); }
		)
		{ after(grammarAccess.getForeignKeyAccess().getRefColumnsColumnCrossReference_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__RefColumnsAssignment_10_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForeignKeyAccess().getRefColumnsColumnCrossReference_10_1_0()); }
		(
			{ before(grammarAccess.getForeignKeyAccess().getRefColumnsColumnIDTerminalRuleCall_10_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getForeignKeyAccess().getRefColumnsColumnIDTerminalRuleCall_10_1_0_1()); }
		)
		{ after(grammarAccess.getForeignKeyAccess().getRefColumnsColumnCrossReference_10_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_CREATE_TABLE : 'CREATE TABLE';

RULE_NOT_NULL : 'NOT NULL';

RULE_PRIMARY_KEY : 'PRIMARY KEY';

RULE_FOREIGN_KEY : 'FOREIGN KEY';

RULE_REFERENCES : 'REFERENCES';

RULE_COMMA : ',';

RULE_LPAR : '(';

RULE_RPAR : ')';

fragment RULE_TINT : 'int' RULE_MAX_LENGTH?;

fragment RULE_TVARCHAR : 'varchar' RULE_MAX_LENGTH;

fragment RULE_TCHARACTER : 'char' RULE_MAX_LENGTH;

fragment RULE_TBINARY : 'binary' RULE_MAX_LENGTH;

fragment RULE_TBOOLEAN : 'boolean';

fragment RULE_TVARBINARY : 'varbinary' RULE_MAX_LENGTH;

fragment RULE_TSMALLINT : 'smallint';

fragment RULE_TBIGINT : 'bigint';

fragment RULE_TDECIMAL : 'decimal' RULE_PRECISION;

fragment RULE_TNUMERIC : 'numeric' RULE_PRECISION;

fragment RULE_TFLOAT : 'float';

fragment RULE_TDATE : 'date';

fragment RULE_TTIME : 'time';

fragment RULE_TTIMESTAMP : 'timestamp';

RULE_DATA_TYPE : (RULE_TINT|RULE_TVARCHAR|RULE_TCHARACTER|RULE_TBINARY|RULE_TBOOLEAN|RULE_TVARBINARY|RULE_TSMALLINT|RULE_TBIGINT|RULE_TDECIMAL|RULE_TNUMERIC|RULE_TFLOAT|RULE_TDATE|RULE_TTIME|RULE_TTIMESTAMP);

fragment RULE_MAX_LENGTH : RULE_LPAR RULE_INT RULE_RPAR;

fragment RULE_PRECISION : RULE_LPAR RULE_INT RULE_COMMA RULE_INT RULE_RPAR;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

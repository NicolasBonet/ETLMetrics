/*
 * generated by Xtext 2.9.1
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SQLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DatabaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.Database");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDatabaseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTablesTableParserRuleCall_1_0 = (RuleCall)cTablesAssignment_1.eContents().get(0);
		
		//Database:
		//	{Database} tables+=Table*;
		@Override public ParserRule getRule() { return rule; }
		
		//{Database} tables+=Table*
		public Group getGroup() { return cGroup; }
		
		//{Database}
		public Action getDatabaseAction_0() { return cDatabaseAction_0; }
		
		//tables+=Table*
		public Assignment getTablesAssignment_1() { return cTablesAssignment_1; }
		
		//Table
		public RuleCall getTablesTableParserRuleCall_1_0() { return cTablesTableParserRuleCall_1_0; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCREATE_TABLETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final RuleCall cLPARTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cColumnsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColumnsColumnParserRuleCall_3_0 = (RuleCall)cColumnsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cCOMMATerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cColumnsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cColumnsColumnParserRuleCall_4_1_0 = (RuleCall)cColumnsAssignment_4_1.eContents().get(0);
		private final Assignment cPrimaryKeyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPrimaryKeyPrimaryKeyParserRuleCall_5_0 = (RuleCall)cPrimaryKeyAssignment_5.eContents().get(0);
		private final Assignment cForeignKeysAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cForeignKeysForeignKeyParserRuleCall_6_0 = (RuleCall)cForeignKeysAssignment_6.eContents().get(0);
		private final RuleCall cRPARTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//Table:
		//	CREATE_TABLE name=ID
		//	LPAR
		//	columns+=Column (COMMA columns+=Column)*
		//	primaryKey=PrimaryKey?
		//	foreignKeys+=ForeignKey*
		//	RPAR;
		@Override public ParserRule getRule() { return rule; }
		
		//CREATE_TABLE name=ID LPAR columns+=Column (COMMA columns+=Column)* primaryKey=PrimaryKey? foreignKeys+=ForeignKey* RPAR
		public Group getGroup() { return cGroup; }
		
		//CREATE_TABLE
		public RuleCall getCREATE_TABLETerminalRuleCall_0() { return cCREATE_TABLETerminalRuleCall_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//LPAR
		public RuleCall getLPARTerminalRuleCall_2() { return cLPARTerminalRuleCall_2; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_3() { return cColumnsAssignment_3; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_3_0() { return cColumnsColumnParserRuleCall_3_0; }
		
		//(COMMA columns+=Column)*
		public Group getGroup_4() { return cGroup_4; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_4_0() { return cCOMMATerminalRuleCall_4_0; }
		
		//columns+=Column
		public Assignment getColumnsAssignment_4_1() { return cColumnsAssignment_4_1; }
		
		//Column
		public RuleCall getColumnsColumnParserRuleCall_4_1_0() { return cColumnsColumnParserRuleCall_4_1_0; }
		
		//primaryKey=PrimaryKey?
		public Assignment getPrimaryKeyAssignment_5() { return cPrimaryKeyAssignment_5; }
		
		//PrimaryKey
		public RuleCall getPrimaryKeyPrimaryKeyParserRuleCall_5_0() { return cPrimaryKeyPrimaryKeyParserRuleCall_5_0; }
		
		//foreignKeys+=ForeignKey*
		public Assignment getForeignKeysAssignment_6() { return cForeignKeysAssignment_6; }
		
		//ForeignKey
		public RuleCall getForeignKeysForeignKeyParserRuleCall_6_0() { return cForeignKeysForeignKeyParserRuleCall_6_0; }
		
		//RPAR
		public RuleCall getRPARTerminalRuleCall_7() { return cRPARTerminalRuleCall_7; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cDataTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDataTypeDATA_TYPETerminalRuleCall_1_0 = (RuleCall)cDataTypeAssignment_1.eContents().get(0);
		private final Assignment cNotNullAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNotNullNOT_NULLTerminalRuleCall_2_0 = (RuleCall)cNotNullAssignment_2.eContents().get(0);
		
		//Column:
		//	name=ID dataType=DATA_TYPE notNull=NOT_NULL?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID dataType=DATA_TYPE notNull=NOT_NULL?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//dataType=DATA_TYPE
		public Assignment getDataTypeAssignment_1() { return cDataTypeAssignment_1; }
		
		//DATA_TYPE
		public RuleCall getDataTypeDATA_TYPETerminalRuleCall_1_0() { return cDataTypeDATA_TYPETerminalRuleCall_1_0; }
		
		//notNull=NOT_NULL?
		public Assignment getNotNullAssignment_2() { return cNotNullAssignment_2; }
		
		//NOT_NULL
		public RuleCall getNotNullNOT_NULLTerminalRuleCall_2_0() { return cNotNullNOT_NULLTerminalRuleCall_2_0; }
	}
	public class PrimaryKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.PrimaryKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cPRIMARY_KEYTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cLPARTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cColumnsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cColumnsColumnCrossReference_3_0 = (CrossReference)cColumnsAssignment_3.eContents().get(0);
		private final RuleCall cColumnsColumnIDTerminalRuleCall_3_0_1 = (RuleCall)cColumnsColumnCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cCOMMATerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cColumnsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cColumnsColumnCrossReference_4_1_0 = (CrossReference)cColumnsAssignment_4_1.eContents().get(0);
		private final RuleCall cColumnsColumnIDTerminalRuleCall_4_1_0_1 = (RuleCall)cColumnsColumnCrossReference_4_1_0.eContents().get(1);
		private final RuleCall cRPARTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//PrimaryKey:
		//	COMMA PRIMARY_KEY LPAR columns+=[Column] (COMMA columns+=[Column])* RPAR;
		@Override public ParserRule getRule() { return rule; }
		
		//COMMA PRIMARY_KEY LPAR columns+=[Column] (COMMA columns+=[Column])* RPAR
		public Group getGroup() { return cGroup; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_0() { return cCOMMATerminalRuleCall_0; }
		
		//PRIMARY_KEY
		public RuleCall getPRIMARY_KEYTerminalRuleCall_1() { return cPRIMARY_KEYTerminalRuleCall_1; }
		
		//LPAR
		public RuleCall getLPARTerminalRuleCall_2() { return cLPARTerminalRuleCall_2; }
		
		//columns+=[Column]
		public Assignment getColumnsAssignment_3() { return cColumnsAssignment_3; }
		
		//[Column]
		public CrossReference getColumnsColumnCrossReference_3_0() { return cColumnsColumnCrossReference_3_0; }
		
		//ID
		public RuleCall getColumnsColumnIDTerminalRuleCall_3_0_1() { return cColumnsColumnIDTerminalRuleCall_3_0_1; }
		
		//(COMMA columns+=[Column])*
		public Group getGroup_4() { return cGroup_4; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_4_0() { return cCOMMATerminalRuleCall_4_0; }
		
		//columns+=[Column]
		public Assignment getColumnsAssignment_4_1() { return cColumnsAssignment_4_1; }
		
		//[Column]
		public CrossReference getColumnsColumnCrossReference_4_1_0() { return cColumnsColumnCrossReference_4_1_0; }
		
		//ID
		public RuleCall getColumnsColumnIDTerminalRuleCall_4_1_0_1() { return cColumnsColumnIDTerminalRuleCall_4_1_0_1; }
		
		//RPAR
		public RuleCall getRPARTerminalRuleCall_5() { return cRPARTerminalRuleCall_5; }
	}
	public class ForeignKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.ForeignKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cFOREIGN_KEYTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cLPARTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cColumnsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cColumnsColumnCrossReference_3_0 = (CrossReference)cColumnsAssignment_3.eContents().get(0);
		private final RuleCall cColumnsColumnIDTerminalRuleCall_3_0_1 = (RuleCall)cColumnsColumnCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cCOMMATerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cColumnsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cColumnsColumnCrossReference_4_1_0 = (CrossReference)cColumnsAssignment_4_1.eContents().get(0);
		private final RuleCall cColumnsColumnIDTerminalRuleCall_4_1_0_1 = (RuleCall)cColumnsColumnCrossReference_4_1_0.eContents().get(1);
		private final RuleCall cRPARTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cREFERENCESTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cRefTableAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cRefTableTableCrossReference_7_0 = (CrossReference)cRefTableAssignment_7.eContents().get(0);
		private final RuleCall cRefTableTableIDTerminalRuleCall_7_0_1 = (RuleCall)cRefTableTableCrossReference_7_0.eContents().get(1);
		private final RuleCall cLPARTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Assignment cRefColumnsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cRefColumnsColumnCrossReference_9_0 = (CrossReference)cRefColumnsAssignment_9.eContents().get(0);
		private final RuleCall cRefColumnsColumnIDTerminalRuleCall_9_0_1 = (RuleCall)cRefColumnsColumnCrossReference_9_0.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final RuleCall cCOMMATerminalRuleCall_10_0 = (RuleCall)cGroup_10.eContents().get(0);
		private final Assignment cRefColumnsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final CrossReference cRefColumnsColumnCrossReference_10_1_0 = (CrossReference)cRefColumnsAssignment_10_1.eContents().get(0);
		private final RuleCall cRefColumnsColumnIDTerminalRuleCall_10_1_0_1 = (RuleCall)cRefColumnsColumnCrossReference_10_1_0.eContents().get(1);
		private final RuleCall cRPARTerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		
		//ForeignKey:
		//	COMMA FOREIGN_KEY
		//	LPAR columns+=[Column] (COMMA columns+=[Column])* RPAR
		//	REFERENCES refTable=[Table] LPAR refColumns+=[Column] (COMMA refColumns+=[Column])* RPAR;
		@Override public ParserRule getRule() { return rule; }
		
		//COMMA FOREIGN_KEY LPAR columns+=[Column] (COMMA columns+=[Column])* RPAR REFERENCES refTable=[Table] LPAR
		//refColumns+=[Column] (COMMA refColumns+=[Column])* RPAR
		public Group getGroup() { return cGroup; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_0() { return cCOMMATerminalRuleCall_0; }
		
		//FOREIGN_KEY
		public RuleCall getFOREIGN_KEYTerminalRuleCall_1() { return cFOREIGN_KEYTerminalRuleCall_1; }
		
		//LPAR
		public RuleCall getLPARTerminalRuleCall_2() { return cLPARTerminalRuleCall_2; }
		
		//columns+=[Column]
		public Assignment getColumnsAssignment_3() { return cColumnsAssignment_3; }
		
		//[Column]
		public CrossReference getColumnsColumnCrossReference_3_0() { return cColumnsColumnCrossReference_3_0; }
		
		//ID
		public RuleCall getColumnsColumnIDTerminalRuleCall_3_0_1() { return cColumnsColumnIDTerminalRuleCall_3_0_1; }
		
		//(COMMA columns+=[Column])*
		public Group getGroup_4() { return cGroup_4; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_4_0() { return cCOMMATerminalRuleCall_4_0; }
		
		//columns+=[Column]
		public Assignment getColumnsAssignment_4_1() { return cColumnsAssignment_4_1; }
		
		//[Column]
		public CrossReference getColumnsColumnCrossReference_4_1_0() { return cColumnsColumnCrossReference_4_1_0; }
		
		//ID
		public RuleCall getColumnsColumnIDTerminalRuleCall_4_1_0_1() { return cColumnsColumnIDTerminalRuleCall_4_1_0_1; }
		
		//RPAR
		public RuleCall getRPARTerminalRuleCall_5() { return cRPARTerminalRuleCall_5; }
		
		//REFERENCES
		public RuleCall getREFERENCESTerminalRuleCall_6() { return cREFERENCESTerminalRuleCall_6; }
		
		//refTable=[Table]
		public Assignment getRefTableAssignment_7() { return cRefTableAssignment_7; }
		
		//[Table]
		public CrossReference getRefTableTableCrossReference_7_0() { return cRefTableTableCrossReference_7_0; }
		
		//ID
		public RuleCall getRefTableTableIDTerminalRuleCall_7_0_1() { return cRefTableTableIDTerminalRuleCall_7_0_1; }
		
		//LPAR
		public RuleCall getLPARTerminalRuleCall_8() { return cLPARTerminalRuleCall_8; }
		
		//refColumns+=[Column]
		public Assignment getRefColumnsAssignment_9() { return cRefColumnsAssignment_9; }
		
		//[Column]
		public CrossReference getRefColumnsColumnCrossReference_9_0() { return cRefColumnsColumnCrossReference_9_0; }
		
		//ID
		public RuleCall getRefColumnsColumnIDTerminalRuleCall_9_0_1() { return cRefColumnsColumnIDTerminalRuleCall_9_0_1; }
		
		//(COMMA refColumns+=[Column])*
		public Group getGroup_10() { return cGroup_10; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_10_0() { return cCOMMATerminalRuleCall_10_0; }
		
		//refColumns+=[Column]
		public Assignment getRefColumnsAssignment_10_1() { return cRefColumnsAssignment_10_1; }
		
		//[Column]
		public CrossReference getRefColumnsColumnCrossReference_10_1_0() { return cRefColumnsColumnCrossReference_10_1_0; }
		
		//ID
		public RuleCall getRefColumnsColumnIDTerminalRuleCall_10_1_0_1() { return cRefColumnsColumnIDTerminalRuleCall_10_1_0_1; }
		
		//RPAR
		public RuleCall getRPARTerminalRuleCall_11() { return cRPARTerminalRuleCall_11; }
	}
	
	
	private final DatabaseElements pDatabase;
	private final TableElements pTable;
	private final ColumnElements pColumn;
	private final PrimaryKeyElements pPrimaryKey;
	private final ForeignKeyElements pForeignKey;
	private final TerminalRule tCREATE_TABLE;
	private final TerminalRule tNOT_NULL;
	private final TerminalRule tPRIMARY_KEY;
	private final TerminalRule tFOREIGN_KEY;
	private final TerminalRule tREFERENCES;
	private final TerminalRule tCOMMA;
	private final TerminalRule tLPAR;
	private final TerminalRule tRPAR;
	private final TerminalRule tTINT;
	private final TerminalRule tTVARCHAR;
	private final TerminalRule tTCHARACTER;
	private final TerminalRule tTBINARY;
	private final TerminalRule tTBOOLEAN;
	private final TerminalRule tTVARBINARY;
	private final TerminalRule tTSMALLINT;
	private final TerminalRule tTBIGINT;
	private final TerminalRule tTDECIMAL;
	private final TerminalRule tTNUMERIC;
	private final TerminalRule tTFLOAT;
	private final TerminalRule tTDATE;
	private final TerminalRule tTTIME;
	private final TerminalRule tTTIMESTAMP;
	private final TerminalRule tDATA_TYPE;
	private final TerminalRule tMAX_LENGTH;
	private final TerminalRule tPRECISION;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SQLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDatabase = new DatabaseElements();
		this.pTable = new TableElements();
		this.pColumn = new ColumnElements();
		this.pPrimaryKey = new PrimaryKeyElements();
		this.pForeignKey = new ForeignKeyElements();
		this.tCREATE_TABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.CREATE_TABLE");
		this.tNOT_NULL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.NOT_NULL");
		this.tPRIMARY_KEY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.PRIMARY_KEY");
		this.tFOREIGN_KEY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.FOREIGN_KEY");
		this.tREFERENCES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.REFERENCES");
		this.tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.COMMA");
		this.tLPAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.LPAR");
		this.tRPAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.RPAR");
		this.tTINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.TINT");
		this.tTVARCHAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.TVARCHAR");
		this.tTCHARACTER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.TCHARACTER");
		this.tTBINARY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.TBINARY");
		this.tTBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.TBOOLEAN");
		this.tTVARBINARY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.TVARBINARY");
		this.tTSMALLINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.TSMALLINT");
		this.tTBIGINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.TBIGINT");
		this.tTDECIMAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.TDECIMAL");
		this.tTNUMERIC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.TNUMERIC");
		this.tTFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.TFLOAT");
		this.tTDATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.TDATE");
		this.tTTIME = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.TTIME");
		this.tTTIMESTAMP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.TTIMESTAMP");
		this.tDATA_TYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.DATA_TYPE");
		this.tMAX_LENGTH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.MAX_LENGTH");
		this.tPRECISION = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.SQL.PRECISION");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.SQL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Database:
	//	{Database} tables+=Table*;
	public DatabaseElements getDatabaseAccess() {
		return pDatabase;
	}
	
	public ParserRule getDatabaseRule() {
		return getDatabaseAccess().getRule();
	}
	
	//Table:
	//	CREATE_TABLE name=ID
	//	LPAR
	//	columns+=Column (COMMA columns+=Column)*
	//	primaryKey=PrimaryKey?
	//	foreignKeys+=ForeignKey*
	//	RPAR;
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//Column:
	//	name=ID dataType=DATA_TYPE notNull=NOT_NULL?;
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//PrimaryKey:
	//	COMMA PRIMARY_KEY LPAR columns+=[Column] (COMMA columns+=[Column])* RPAR;
	public PrimaryKeyElements getPrimaryKeyAccess() {
		return pPrimaryKey;
	}
	
	public ParserRule getPrimaryKeyRule() {
		return getPrimaryKeyAccess().getRule();
	}
	
	//ForeignKey:
	//	COMMA FOREIGN_KEY
	//	LPAR columns+=[Column] (COMMA columns+=[Column])* RPAR
	//	REFERENCES refTable=[Table] LPAR refColumns+=[Column] (COMMA refColumns+=[Column])* RPAR;
	public ForeignKeyElements getForeignKeyAccess() {
		return pForeignKey;
	}
	
	public ParserRule getForeignKeyRule() {
		return getForeignKeyAccess().getRule();
	}
	
	//terminal CREATE_TABLE:
	//	"CREATE TABLE";
	public TerminalRule getCREATE_TABLERule() {
		return tCREATE_TABLE;
	}
	
	//terminal NOT_NULL:
	//	"NOT NULL";
	public TerminalRule getNOT_NULLRule() {
		return tNOT_NULL;
	}
	
	//terminal PRIMARY_KEY:
	//	"PRIMARY KEY";
	public TerminalRule getPRIMARY_KEYRule() {
		return tPRIMARY_KEY;
	}
	
	//terminal FOREIGN_KEY:
	//	"FOREIGN KEY";
	public TerminalRule getFOREIGN_KEYRule() {
		return tFOREIGN_KEY;
	}
	
	//terminal REFERENCES:
	//	"REFERENCES";
	public TerminalRule getREFERENCESRule() {
		return tREFERENCES;
	}
	
	//terminal COMMA:
	//	",";
	public TerminalRule getCOMMARule() {
		return tCOMMA;
	}
	
	//terminal LPAR:
	//	"(";
	public TerminalRule getLPARRule() {
		return tLPAR;
	}
	
	//terminal RPAR:
	//	")";
	public TerminalRule getRPARRule() {
		return tRPAR;
	}
	
	//terminal TINT:
	//	"int" MAX_LENGTH?;
	public TerminalRule getTINTRule() {
		return tTINT;
	}
	
	//terminal TVARCHAR:
	//	"varchar" MAX_LENGTH;
	public TerminalRule getTVARCHARRule() {
		return tTVARCHAR;
	}
	
	//terminal TCHARACTER:
	//	"char" MAX_LENGTH;
	public TerminalRule getTCHARACTERRule() {
		return tTCHARACTER;
	}
	
	//terminal TBINARY:
	//	"binary" MAX_LENGTH;
	public TerminalRule getTBINARYRule() {
		return tTBINARY;
	}
	
	//terminal TBOOLEAN:
	//	"boolean";
	public TerminalRule getTBOOLEANRule() {
		return tTBOOLEAN;
	}
	
	//terminal TVARBINARY:
	//	"varbinary" MAX_LENGTH;
	public TerminalRule getTVARBINARYRule() {
		return tTVARBINARY;
	}
	
	//terminal TSMALLINT:
	//	"smallint";
	public TerminalRule getTSMALLINTRule() {
		return tTSMALLINT;
	}
	
	//terminal TBIGINT:
	//	"bigint";
	public TerminalRule getTBIGINTRule() {
		return tTBIGINT;
	}
	
	//terminal TDECIMAL:
	//	"decimal" PRECISION;
	public TerminalRule getTDECIMALRule() {
		return tTDECIMAL;
	}
	
	//terminal TNUMERIC:
	//	"numeric" PRECISION;
	public TerminalRule getTNUMERICRule() {
		return tTNUMERIC;
	}
	
	//terminal TFLOAT:
	//	"float";
	public TerminalRule getTFLOATRule() {
		return tTFLOAT;
	}
	
	//terminal TDATE:
	//	"date";
	public TerminalRule getTDATERule() {
		return tTDATE;
	}
	
	//terminal TTIME:
	//	"time";
	public TerminalRule getTTIMERule() {
		return tTTIME;
	}
	
	//terminal TTIMESTAMP:
	//	"timestamp";
	public TerminalRule getTTIMESTAMPRule() {
		return tTTIMESTAMP;
	}
	
	//terminal DATA_TYPE:
	//	TINT | TVARCHAR | TCHARACTER | TBINARY | TBOOLEAN | TVARBINARY | TSMALLINT | TBIGINT | TDECIMAL | TNUMERIC | TFLOAT |
	//	TDATE | TTIME | TTIMESTAMP;
	public TerminalRule getDATA_TYPERule() {
		return tDATA_TYPE;
	}
	
	//terminal MAX_LENGTH:
	//	LPAR INT RPAR;
	public TerminalRule getMAX_LENGTHRule() {
		return tMAX_LENGTH;
	}
	
	//terminal PRECISION:
	//	LPAR INT COMMA INT RPAR;
	public TerminalRule getPRECISIONRule() {
		return tPRECISION;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

/*
 * generated by Xtext 2.9.1
 */
package co.edu.uniandes.scoping
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference


import co.edu.uniandes.genSql.ForeignKey;
import co.edu.uniandes.genSql.Table
import co.edu.uniandes.genSql.DataBase
import co.edu.uniandes.genSql.PrimaryKey


/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class GenSqlScopeProvider extends AbstractGenSqlScopeProvider {
/* 
	 * Metodo que sobreescribe el metodo getScope de AbstractDeclarativeScopeProvider 
	 * con el fin de aplicar nuestro propio scoping. En el cuerpo de este metodo debemos usar
	 * los parametros: context (el objeto sobre el que se aplicar al scope) y reference (el atributo del objeto en cuestion).
	 * Se debe aplicar un scope para el caso del cambio de scope:
	 * 		Objeto: Table 	  | Atributo: tableRef
	 * 		Objeto: Column 	  | Atrubuto: columnsRef
	 */
	override public IScope getScope(EObject context, EReference reference)
	{	
		/*
		 * Este scope se carga cuando se modifica el atributo tableRef de un FK que es de tipo Table
		 */
		 if (context instanceof ForeignKey && reference.name == "columnsRef"){
		 	/*
		 	 * La parte: context.eContainer.eContainer.eContents hace referencia a los elementos
			 * del contenedor del contenedor de la ForeignKey, es decir: fk->table->Database
		 	 * por lo que carga todas tablas de la gramatica
		 	 */
		 	 
		 	 for(var i = 0; i < context.eContainer.eContainer.eContents.size(); i++){
		 	 	
		 	 	/*
				 * Ahora se compara si la tabla en cuestion lleva el mismo identificador de la tablaRef
				 * que se especifica antes del punto: E.j. si se tiene el tablaRef: "Carrito" busca la Tabla con nombre Carrito
				 */
//				 var a = (context as ForeignKey).tableRef;
//				 var b = (context.eContainer.eContainer.eContents.get(i) as Table);
//				if ((context.eContainer.eContainer.eContents.get(i) as Table).name == (context as ForeignKey).tableRef.name)
//				{
//					/*
//					 * Una vez encontrada dicha Tabla sencillamente devuelve todos sus Nodos como nuevos elementos del Scope
//					 */
//					return Scopes::scopeFor((context.eContainer.eContainer.eContents.get(i) as Table).columns);
//				}
		 	 }
		 	 
		 	 return Scopes::scopeFor((context.eContainer.eContainer.eContents.get(0) as Table).columns);
		 }	
		 /* 
		 * Se deja cargar el Scope que viene por defecto
		 */
		else
		{	
			return super.getScope(context, reference)
		} 
		 
	}
}

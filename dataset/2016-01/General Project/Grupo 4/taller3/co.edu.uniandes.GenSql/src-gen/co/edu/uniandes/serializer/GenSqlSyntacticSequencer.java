/*
 * generated by Xtext 2.9.1
 */
package co.edu.uniandes.serializer;

import co.edu.uniandes.services.GenSqlGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class GenSqlSyntacticSequencer extends AbstractSyntacticSequencer {

	protected GenSqlGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Column_COMMATerminalRuleCall_4_q;
	protected AbstractElementAlias match_Column___NOTTerminalRuleCall_3_0_NULLTerminalRuleCall_3_1__q;
	protected AbstractElementAlias match_ForeignKey_COMMATerminalRuleCall_10_0_p;
	protected AbstractElementAlias match_ForeignKey_COMMATerminalRuleCall_12_q;
	protected AbstractElementAlias match_ForeignKey_COMMATerminalRuleCall_4_0_p;
	protected AbstractElementAlias match_PrimaryKey_COMMATerminalRuleCall_4_0_p;
	protected AbstractElementAlias match_PrimaryKey_COMMATerminalRuleCall_6_q;
	protected AbstractElementAlias match_Table___FINTerminalRuleCall_8_1_or_SEMICOLONTerminalRuleCall_8_0__q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (GenSqlGrammarAccess) access;
		match_Column_COMMATerminalRuleCall_4_q = new TokenAlias(false, true, grammarAccess.getColumnAccess().getCOMMATerminalRuleCall_4());
		match_Column___NOTTerminalRuleCall_3_0_NULLTerminalRuleCall_3_1__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getColumnAccess().getNOTTerminalRuleCall_3_0()), new TokenAlias(false, false, grammarAccess.getColumnAccess().getNULLTerminalRuleCall_3_1()));
		match_ForeignKey_COMMATerminalRuleCall_10_0_p = new TokenAlias(true, false, grammarAccess.getForeignKeyAccess().getCOMMATerminalRuleCall_10_0());
		match_ForeignKey_COMMATerminalRuleCall_12_q = new TokenAlias(false, true, grammarAccess.getForeignKeyAccess().getCOMMATerminalRuleCall_12());
		match_ForeignKey_COMMATerminalRuleCall_4_0_p = new TokenAlias(true, false, grammarAccess.getForeignKeyAccess().getCOMMATerminalRuleCall_4_0());
		match_PrimaryKey_COMMATerminalRuleCall_4_0_p = new TokenAlias(true, false, grammarAccess.getPrimaryKeyAccess().getCOMMATerminalRuleCall_4_0());
		match_PrimaryKey_COMMATerminalRuleCall_6_q = new TokenAlias(false, true, grammarAccess.getPrimaryKeyAccess().getCOMMATerminalRuleCall_6());
		match_Table___FINTerminalRuleCall_8_1_or_SEMICOLONTerminalRuleCall_8_0__q = new AlternativeAlias(false, true, new TokenAlias(false, false, grammarAccess.getTableAccess().getFINTerminalRuleCall_8_1()), new TokenAlias(false, false, grammarAccess.getTableAccess().getSEMICOLONTerminalRuleCall_8_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getCOMMARule())
			return getCOMMAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCREATERule())
			return getCREATEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCTABLERule())
			return getCTABLEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getFINRule())
			return getFINToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getFOREIGNRule())
			return getFOREIGNToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getKEYRule())
			return getKEYToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLPARENTRule())
			return getLPARENTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNOTRule())
			return getNOTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNULLRule())
			return getNULLToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPRIMARYRule())
			return getPRIMARYToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getREFERENCESRule())
			return getREFERENCESToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRPARENTRule())
			return getRPARENTToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getSEMICOLONRule())
			return getSEMICOLONToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal COMMA: ",";
	 */
	protected String getCOMMAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	/**
	 * terminal CREATE: "CREATE";
	 */
	protected String getCREATEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "CREATE";
	}
	
	/**
	 * terminal CTABLE: "TABLE";
	 */
	protected String getCTABLEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "TABLE";
	}
	
	/**
	 * terminal FIN: EOF;
	 */
	protected String getFINToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	/**
	 * terminal FOREIGN: "FOREIGN";
	 */
	protected String getFOREIGNToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "FOREIGN";
	}
	
	/**
	 * terminal KEY: "KEY";
	 */
	protected String getKEYToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "KEY";
	}
	
	/**
	 * terminal LPARENT: "(";
	 */
	protected String getLPARENTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "(";
	}
	
	/**
	 * terminal NOT: "NOT";
	 */
	protected String getNOTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "NOT";
	}
	
	/**
	 * terminal NULL: "NULL";
	 */
	protected String getNULLToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "NULL";
	}
	
	/**
	 * terminal PRIMARY: "PRIMARY";
	 */
	protected String getPRIMARYToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "PRIMARY";
	}
	
	/**
	 * terminal REFERENCES: "REFERENCES";
	 */
	protected String getREFERENCESToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "REFERENCES";
	}
	
	/**
	 * terminal RPARENT: ")";
	 */
	protected String getRPARENTToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ")";
	}
	
	/**
	 * terminal SEMICOLON: ";";
	 */
	protected String getSEMICOLONToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ";";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Column_COMMATerminalRuleCall_4_q.equals(syntax))
				emit_Column_COMMATerminalRuleCall_4_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Column___NOTTerminalRuleCall_3_0_NULLTerminalRuleCall_3_1__q.equals(syntax))
				emit_Column___NOTTerminalRuleCall_3_0_NULLTerminalRuleCall_3_1__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ForeignKey_COMMATerminalRuleCall_10_0_p.equals(syntax))
				emit_ForeignKey_COMMATerminalRuleCall_10_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ForeignKey_COMMATerminalRuleCall_12_q.equals(syntax))
				emit_ForeignKey_COMMATerminalRuleCall_12_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ForeignKey_COMMATerminalRuleCall_4_0_p.equals(syntax))
				emit_ForeignKey_COMMATerminalRuleCall_4_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryKey_COMMATerminalRuleCall_4_0_p.equals(syntax))
				emit_PrimaryKey_COMMATerminalRuleCall_4_0_p(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryKey_COMMATerminalRuleCall_6_q.equals(syntax))
				emit_PrimaryKey_COMMATerminalRuleCall_6_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Table___FINTerminalRuleCall_8_1_or_SEMICOLONTerminalRuleCall_8_0__q.equals(syntax))
				emit_Table___FINTerminalRuleCall_8_1_or_SEMICOLONTerminalRuleCall_8_0__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     COMMA?
	 *
	 * This ambiguous syntax occurs at:
	 *     Longitud=LONGITUD (NOT NULL)? (ambiguity) (rule end)
	 *     SQLType=TIPO (NOT NULL)? (ambiguity) (rule end)
	 *     name=ID (NOT NULL)? (ambiguity) (rule end)
	 */
	protected void emit_Column_COMMATerminalRuleCall_4_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (NOT NULL)?
	 *
	 * This ambiguous syntax occurs at:
	 *     Longitud=LONGITUD (ambiguity) COMMA? (rule end)
	 *     SQLType=TIPO (ambiguity) COMMA? (rule end)
	 *     name=ID (ambiguity) COMMA? (rule end)
	 */
	protected void emit_Column___NOTTerminalRuleCall_3_0_NULLTerminalRuleCall_3_1__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     COMMA+
	 *
	 * This ambiguous syntax occurs at:
	 *     columnsRef+=[Column|ID] (ambiguity) columnsRef+=[Column|ID]
	 */
	protected void emit_ForeignKey_COMMATerminalRuleCall_10_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     COMMA?
	 *
	 * This ambiguous syntax occurs at:
	 *     columnsRef+=[Column|ID] RPARENT (ambiguity) (rule end)
	 */
	protected void emit_ForeignKey_COMMATerminalRuleCall_12_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     COMMA+
	 *
	 * This ambiguous syntax occurs at:
	 *     columns+=[Column|ID] (ambiguity) columns+=[Column|ID]
	 */
	protected void emit_ForeignKey_COMMATerminalRuleCall_4_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     COMMA+
	 *
	 * This ambiguous syntax occurs at:
	 *     columns+=[Column|ID] (ambiguity) columns+=[Column|ID]
	 */
	protected void emit_PrimaryKey_COMMATerminalRuleCall_4_0_p(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     COMMA?
	 *
	 * This ambiguous syntax occurs at:
	 *     columns+=[Column|ID] RPARENT (ambiguity) (rule end)
	 */
	protected void emit_PrimaryKey_COMMATerminalRuleCall_6_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (SEMICOLON | FIN)?
	 *
	 * This ambiguous syntax occurs at:
	 *     foreignkeys+=ForeignKey RPARENT (ambiguity) (rule end)
	 *     primarykey=PrimaryKey RPARENT (ambiguity) (rule end)
	 */
	protected void emit_Table___FINTerminalRuleCall_8_1_or_SEMICOLONTerminalRuleCall_8_0__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}

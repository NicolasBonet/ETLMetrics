/*
 * generated by Xtext 2.9.1
 */
package co.edu.uniandes.serializer;

import co.edu.uniandes.grammarSql.Column;
import co.edu.uniandes.grammarSql.ForeignKey;
import co.edu.uniandes.grammarSql.GrammarSqlPackage;
import co.edu.uniandes.grammarSql.Model;
import co.edu.uniandes.grammarSql.PrimaryKey;
import co.edu.uniandes.grammarSql.Reference;
import co.edu.uniandes.grammarSql.Table;
import co.edu.uniandes.services.GrammarSqlGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class GrammarSqlSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GrammarSqlGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GrammarSqlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GrammarSqlPackage.COLUMN:
				sequence_Column(context, (Column) semanticObject); 
				return; 
			case GrammarSqlPackage.FOREIGN_KEY:
				sequence_ForeignKey(context, (ForeignKey) semanticObject); 
				return; 
			case GrammarSqlPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case GrammarSqlPackage.PRIMARY_KEY:
				sequence_PrimaryKey(context, (PrimaryKey) semanticObject); 
				return; 
			case GrammarSqlPackage.REFERENCE:
				sequence_Reference(context, (Reference) semanticObject); 
				return; 
			case GrammarSqlPackage.TABLE:
				sequence_Table(context, (Table) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Column returns Column
	 *
	 * Constraint:
	 *     (name=ID (type='int' | type='varchar' | type='Double' | type='Float') isNotNull?=NOTNULL?)
	 */
	protected void sequence_Column(ISerializationContext context, Column semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ForeignKey returns ForeignKey
	 *
	 * Constraint:
	 *     (localColumns+=[Column|ID] localColumns+=[Column|ID]* ref=Reference)
	 */
	protected void sequence_ForeignKey(ISerializationContext context, ForeignKey semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     tables+=Table+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrimaryKey returns PrimaryKey
	 *
	 * Constraint:
	 *     (col+=[Column|ID] col+=[Column|ID]*)
	 */
	protected void sequence_PrimaryKey(ISerializationContext context, PrimaryKey semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Reference returns Reference
	 *
	 * Constraint:
	 *     (fromT+=[Table|ID] fromC+=[Column|ID] fromC+=[Column|ID]*)
	 */
	protected void sequence_Reference(ISerializationContext context, Reference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Table returns Table
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         (elements+=Column | elements+=PrimaryKey | elements+=ForeignKey) 
	 *         elements+=Column? 
	 *         ((elements+=PrimaryKey | elements+=ForeignKey)? elements+=Column?)*
	 *     )
	 */
	protected void sequence_Table(ISerializationContext context, Table semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}

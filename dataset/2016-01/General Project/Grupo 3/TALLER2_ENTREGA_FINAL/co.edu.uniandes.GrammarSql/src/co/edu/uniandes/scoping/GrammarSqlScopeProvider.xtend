/*
 * generated by Xtext 2.9.1
 */
package co.edu.uniandes.scoping

import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.eclipse.xtext.scoping.IScope
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes;
import co.edu.uniandes.grammarSql.impl.ReferenceImpl;
import co.edu.uniandes.grammarSql.impl.ModelImpl;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class GrammarSqlScopeProvider extends AbstractDeclarativeScopeProvider {
	override public IScope getScope(EObject context, EReference reference) {
		if (context instanceof ReferenceImpl) {
			//System.out.println("JLPO OK :: [" + (reference.name) + "]");
			if (reference.name == "fromT") {
				return Scopes::scopeFor((context.eContainer.eContainer.eContainer as ModelImpl).getTables);
			} else {
				//System.out.println("[" + (context.eContainer.eContainer.eContainer as ModelImpl).getTables.size() + "]" +context.getFromT().get(0).getName());
				for (var i = 0; i < (context.eContainer.eContainer.eContainer as ModelImpl).getTables.size(); i++) {
					if ((context.eContainer.eContainer.eContainer as ModelImpl).getTables.get(i).getName() ==
						context.getFromT().get(0).getName()) {
						return Scopes::scopeFor(
							(context.eContainer.eContainer.eContainer as ModelImpl).getTables.get(i).getElements());
					}
				}
			}
		} else {
			//System.out.println("JLPO NOT OK [" + context.eContainer.eContainer.eContents.size() + "]" + context);
			return Scopes::scopeFor(context.eContainer.eContents);
		}
	}
}

/*
 * generated by Xtext 2.9.1
 */
grammar InternalGrammarSql;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package co.edu.uniandes.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package co.edu.uniandes.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import co.edu.uniandes.services.GrammarSqlGrammarAccess;

}
@parser::members {
	private GrammarSqlGrammarAccess grammarAccess;

	public void setGrammarAccess(GrammarSqlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getModelAccess().getTablesAssignment()); }
			(rule__Model__TablesAssignment)
			{ after(grammarAccess.getModelAccess().getTablesAssignment()); }
		)
		(
			{ before(grammarAccess.getModelAccess().getTablesAssignment()); }
			(rule__Model__TablesAssignment)*
			{ after(grammarAccess.getModelAccess().getTablesAssignment()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTable
entryRuleTable
:
{ before(grammarAccess.getTableRule()); }
	 ruleTable
{ after(grammarAccess.getTableRule()); } 
	 EOF 
;

// Rule Table
ruleTable 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTableAccess().getGroup()); }
		(rule__Table__Group__0)
		{ after(grammarAccess.getTableAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColumn
entryRuleColumn
:
{ before(grammarAccess.getColumnRule()); }
	 ruleColumn
{ after(grammarAccess.getColumnRule()); } 
	 EOF 
;

// Rule Column
ruleColumn 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColumnAccess().getGroup()); }
		(rule__Column__Group__0)
		{ after(grammarAccess.getColumnAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimaryKey
entryRulePrimaryKey
:
{ before(grammarAccess.getPrimaryKeyRule()); }
	 rulePrimaryKey
{ after(grammarAccess.getPrimaryKeyRule()); } 
	 EOF 
;

// Rule PrimaryKey
rulePrimaryKey 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryKeyAccess().getGroup()); }
		(rule__PrimaryKey__Group__0)
		{ after(grammarAccess.getPrimaryKeyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForeignKey
entryRuleForeignKey
:
{ before(grammarAccess.getForeignKeyRule()); }
	 ruleForeignKey
{ after(grammarAccess.getForeignKeyRule()); } 
	 EOF 
;

// Rule ForeignKey
ruleForeignKey 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForeignKeyAccess().getGroup()); }
		(rule__ForeignKey__Group__0)
		{ after(grammarAccess.getForeignKeyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleReference
entryRuleReference
:
{ before(grammarAccess.getReferenceRule()); }
	 ruleReference
{ after(grammarAccess.getReferenceRule()); } 
	 EOF 
;

// Rule Reference
ruleReference 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getReferenceAccess().getGroup()); }
		(rule__Reference__Group__0)
		{ after(grammarAccess.getReferenceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTamano
entryRuleTamano
:
{ before(grammarAccess.getTamanoRule()); }
	 ruleTamano
{ after(grammarAccess.getTamanoRule()); } 
	 EOF 
;

// Rule Tamano
ruleTamano 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTamanoAccess().getGroup()); }
		(rule__Tamano__Group__0)
		{ after(grammarAccess.getTamanoAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__ElementsAlternatives_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAccess().getElementsColumnParserRuleCall_4_0_0()); }
		ruleColumn
		{ after(grammarAccess.getTableAccess().getElementsColumnParserRuleCall_4_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTableAccess().getElementsPrimaryKeyParserRuleCall_4_0_1()); }
		rulePrimaryKey
		{ after(grammarAccess.getTableAccess().getElementsPrimaryKeyParserRuleCall_4_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getTableAccess().getElementsForeignKeyParserRuleCall_4_0_2()); }
		ruleForeignKey
		{ after(grammarAccess.getTableAccess().getElementsForeignKeyParserRuleCall_4_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__ElementsAlternatives_5_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAccess().getElementsColumnParserRuleCall_5_1_0_0()); }
		ruleColumn
		{ after(grammarAccess.getTableAccess().getElementsColumnParserRuleCall_5_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getTableAccess().getElementsPrimaryKeyParserRuleCall_5_1_0_1()); }
		rulePrimaryKey
		{ after(grammarAccess.getTableAccess().getElementsPrimaryKeyParserRuleCall_5_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getTableAccess().getElementsForeignKeyParserRuleCall_5_1_0_2()); }
		ruleForeignKey
		{ after(grammarAccess.getTableAccess().getElementsForeignKeyParserRuleCall_5_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__TypeAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getTypeIntKeyword_1_0_0()); }
		'int'
		{ after(grammarAccess.getColumnAccess().getTypeIntKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getColumnAccess().getTypeVarcharKeyword_1_0_1()); }
		'varchar'
		{ after(grammarAccess.getColumnAccess().getTypeVarcharKeyword_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getColumnAccess().getTypeDoubleKeyword_1_0_2()); }
		'Double'
		{ after(grammarAccess.getColumnAccess().getTypeDoubleKeyword_1_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getColumnAccess().getTypeFloatKeyword_1_0_3()); }
		'Float'
		{ after(grammarAccess.getColumnAccess().getTypeFloatKeyword_1_0_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__0__Impl
	rule__Table__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getCREATEKeyword_0()); }
	'CREATE'
	{ after(grammarAccess.getTableAccess().getCREATEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__1__Impl
	rule__Table__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getTABLEKeyword_1()); }
	'TABLE'
	{ after(grammarAccess.getTableAccess().getTABLEKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__2__Impl
	rule__Table__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getNameAssignment_2()); }
	(rule__Table__NameAssignment_2)
	{ after(grammarAccess.getTableAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__3__Impl
	rule__Table__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getLPARTerminalRuleCall_3()); }
	RULE_LPAR
	{ after(grammarAccess.getTableAccess().getLPARTerminalRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__4__Impl
	rule__Table__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getElementsAssignment_4()); }
	(rule__Table__ElementsAssignment_4)
	{ after(grammarAccess.getTableAccess().getElementsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__5__Impl
	rule__Table__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getGroup_5()); }
	(rule__Table__Group_5__0)*
	{ after(grammarAccess.getTableAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getRPARTerminalRuleCall_6()); }
	RULE_RPAR
	{ after(grammarAccess.getTableAccess().getRPARTerminalRuleCall_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Table__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group_5__0__Impl
	rule__Table__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getCommaKeyword_5_0()); }
	','
	{ after(grammarAccess.getTableAccess().getCommaKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Table__Group_5__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTableAccess().getElementsAssignment_5_1()); }
	(rule__Table__ElementsAssignment_5_1)
	{ after(grammarAccess.getTableAccess().getElementsAssignment_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Column__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__0__Impl
	rule__Column__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getNameAssignment_0()); }
	(rule__Column__NameAssignment_0)
	{ after(grammarAccess.getColumnAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__1__Impl
	rule__Column__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getTypeAssignment_1()); }
	(rule__Column__TypeAssignment_1)
	{ after(grammarAccess.getColumnAccess().getTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__2__Impl
	rule__Column__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getTamanoParserRuleCall_2()); }
	(ruleTamano)?
	{ after(grammarAccess.getColumnAccess().getTamanoParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Column__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnAccess().getIsNotNullAssignment_3()); }
	(rule__Column__IsNotNullAssignment_3)?
	{ after(grammarAccess.getColumnAccess().getIsNotNullAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryKey__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group__0__Impl
	rule__PrimaryKey__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getPRIMARYKeyword_0()); }
	'PRIMARY'
	{ after(grammarAccess.getPrimaryKeyAccess().getPRIMARYKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group__1__Impl
	rule__PrimaryKey__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getKEYKeyword_1()); }
	'KEY'
	{ after(grammarAccess.getPrimaryKeyAccess().getKEYKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group__2__Impl
	rule__PrimaryKey__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getLPARTerminalRuleCall_2()); }
	RULE_LPAR
	{ after(grammarAccess.getPrimaryKeyAccess().getLPARTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group__3__Impl
	rule__PrimaryKey__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getColAssignment_3()); }
	(rule__PrimaryKey__ColAssignment_3)
	{ after(grammarAccess.getPrimaryKeyAccess().getColAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group__4__Impl
	rule__PrimaryKey__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getGroup_4()); }
	(rule__PrimaryKey__Group_4__0)*
	{ after(grammarAccess.getPrimaryKeyAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getRPARTerminalRuleCall_5()); }
	RULE_RPAR
	{ after(grammarAccess.getPrimaryKeyAccess().getRPARTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PrimaryKey__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group_4__0__Impl
	rule__PrimaryKey__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getPrimaryKeyAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PrimaryKey__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryKeyAccess().getColAssignment_4_1()); }
	(rule__PrimaryKey__ColAssignment_4_1)
	{ after(grammarAccess.getPrimaryKeyAccess().getColAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForeignKey__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__0__Impl
	rule__ForeignKey__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getFOREIGNKeyword_0()); }
	'FOREIGN'
	{ after(grammarAccess.getForeignKeyAccess().getFOREIGNKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__1__Impl
	rule__ForeignKey__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getKEYKeyword_1()); }
	'KEY'
	{ after(grammarAccess.getForeignKeyAccess().getKEYKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__2__Impl
	rule__ForeignKey__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getLPARTerminalRuleCall_2()); }
	RULE_LPAR
	{ after(grammarAccess.getForeignKeyAccess().getLPARTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__3__Impl
	rule__ForeignKey__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getLocalColumnsAssignment_3()); }
	(rule__ForeignKey__LocalColumnsAssignment_3)
	{ after(grammarAccess.getForeignKeyAccess().getLocalColumnsAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__4__Impl
	rule__ForeignKey__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getGroup_4()); }
	(rule__ForeignKey__Group_4__0)*
	{ after(grammarAccess.getForeignKeyAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__5__Impl
	rule__ForeignKey__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getRPARTerminalRuleCall_5()); }
	RULE_RPAR
	{ after(grammarAccess.getForeignKeyAccess().getRPARTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getRefAssignment_6()); }
	(rule__ForeignKey__RefAssignment_6)
	{ after(grammarAccess.getForeignKeyAccess().getRefAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ForeignKey__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group_4__0__Impl
	rule__ForeignKey__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getForeignKeyAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ForeignKey__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeignKeyAccess().getLocalColumnsAssignment_4_1()); }
	(rule__ForeignKey__LocalColumnsAssignment_4_1)
	{ after(grammarAccess.getForeignKeyAccess().getLocalColumnsAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Reference__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group__0__Impl
	rule__Reference__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getREFERENCESKeyword_0()); }
	'REFERENCES'
	{ after(grammarAccess.getReferenceAccess().getREFERENCESKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group__1__Impl
	rule__Reference__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getFromTAssignment_1()); }
	(rule__Reference__FromTAssignment_1)
	{ after(grammarAccess.getReferenceAccess().getFromTAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group__2__Impl
	rule__Reference__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getLPARTerminalRuleCall_2()); }
	RULE_LPAR
	{ after(grammarAccess.getReferenceAccess().getLPARTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group__3__Impl
	rule__Reference__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getFromCAssignment_3()); }
	(rule__Reference__FromCAssignment_3)
	{ after(grammarAccess.getReferenceAccess().getFromCAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group__4__Impl
	rule__Reference__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getGroup_4()); }
	(rule__Reference__Group_4__0)*
	{ after(grammarAccess.getReferenceAccess().getGroup_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getRPARTerminalRuleCall_5()); }
	RULE_RPAR
	{ after(grammarAccess.getReferenceAccess().getRPARTerminalRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Reference__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group_4__0__Impl
	rule__Reference__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getCommaKeyword_4_0()); }
	','
	{ after(grammarAccess.getReferenceAccess().getCommaKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Reference__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getReferenceAccess().getFromCAssignment_4_1()); }
	(rule__Reference__FromCAssignment_4_1)
	{ after(grammarAccess.getReferenceAccess().getFromCAssignment_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Tamano__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tamano__Group__0__Impl
	rule__Tamano__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tamano__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTamanoAccess().getLPARTerminalRuleCall_0()); }
	RULE_LPAR
	{ after(grammarAccess.getTamanoAccess().getLPARTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tamano__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tamano__Group__1__Impl
	rule__Tamano__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Tamano__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTamanoAccess().getINTTerminalRuleCall_1()); }
	(RULE_INT)*
	{ after(grammarAccess.getTamanoAccess().getINTTerminalRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tamano__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tamano__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tamano__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTamanoAccess().getRPARTerminalRuleCall_2()); }
	RULE_RPAR
	{ after(grammarAccess.getTamanoAccess().getRPARTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__TablesAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getTablesTableParserRuleCall_0()); }
		ruleTable
		{ after(grammarAccess.getModelAccess().getTablesTableParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getTableAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__ElementsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAccess().getElementsAlternatives_4_0()); }
		(rule__Table__ElementsAlternatives_4_0)
		{ after(grammarAccess.getTableAccess().getElementsAlternatives_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Table__ElementsAssignment_5_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTableAccess().getElementsAlternatives_5_1_0()); }
		(rule__Table__ElementsAlternatives_5_1_0)
		{ after(grammarAccess.getTableAccess().getElementsAlternatives_5_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__TypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getTypeAlternatives_1_0()); }
		(rule__Column__TypeAlternatives_1_0)
		{ after(grammarAccess.getColumnAccess().getTypeAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Column__IsNotNullAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnAccess().getIsNotNullNOTNULLTerminalRuleCall_3_0()); }
		RULE_NOTNULL
		{ after(grammarAccess.getColumnAccess().getIsNotNullNOTNULLTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__ColAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryKeyAccess().getColColumnCrossReference_3_0()); }
		(
			{ before(grammarAccess.getPrimaryKeyAccess().getColColumnIDTerminalRuleCall_3_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPrimaryKeyAccess().getColColumnIDTerminalRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getPrimaryKeyAccess().getColColumnCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PrimaryKey__ColAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryKeyAccess().getColColumnCrossReference_4_1_0()); }
		(
			{ before(grammarAccess.getPrimaryKeyAccess().getColColumnIDTerminalRuleCall_4_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getPrimaryKeyAccess().getColColumnIDTerminalRuleCall_4_1_0_1()); }
		)
		{ after(grammarAccess.getPrimaryKeyAccess().getColColumnCrossReference_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__LocalColumnsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForeignKeyAccess().getLocalColumnsColumnCrossReference_3_0()); }
		(
			{ before(grammarAccess.getForeignKeyAccess().getLocalColumnsColumnIDTerminalRuleCall_3_0_1()); }
			RULE_ID
			{ after(grammarAccess.getForeignKeyAccess().getLocalColumnsColumnIDTerminalRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getForeignKeyAccess().getLocalColumnsColumnCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__LocalColumnsAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForeignKeyAccess().getLocalColumnsColumnCrossReference_4_1_0()); }
		(
			{ before(grammarAccess.getForeignKeyAccess().getLocalColumnsColumnIDTerminalRuleCall_4_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getForeignKeyAccess().getLocalColumnsColumnIDTerminalRuleCall_4_1_0_1()); }
		)
		{ after(grammarAccess.getForeignKeyAccess().getLocalColumnsColumnCrossReference_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ForeignKey__RefAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getForeignKeyAccess().getRefReferenceParserRuleCall_6_0()); }
		ruleReference
		{ after(grammarAccess.getForeignKeyAccess().getRefReferenceParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__FromTAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferenceAccess().getFromTTableCrossReference_1_0()); }
		(
			{ before(grammarAccess.getReferenceAccess().getFromTTableIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getReferenceAccess().getFromTTableIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getReferenceAccess().getFromTTableCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__FromCAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferenceAccess().getFromCColumnCrossReference_3_0()); }
		(
			{ before(grammarAccess.getReferenceAccess().getFromCColumnIDTerminalRuleCall_3_0_1()); }
			RULE_ID
			{ after(grammarAccess.getReferenceAccess().getFromCColumnIDTerminalRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getReferenceAccess().getFromCColumnCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Reference__FromCAssignment_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getReferenceAccess().getFromCColumnCrossReference_4_1_0()); }
		(
			{ before(grammarAccess.getReferenceAccess().getFromCColumnIDTerminalRuleCall_4_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getReferenceAccess().getFromCColumnIDTerminalRuleCall_4_1_0_1()); }
		)
		{ after(grammarAccess.getReferenceAccess().getFromCColumnCrossReference_4_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_CREATE : 'CREATE' 'TABLE';

RULE_LPAR : '(';

RULE_RPAR : ')';

RULE_NOTNULL : 'NOT NULL';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

/*
 * generated by Xtext 2.9.1
 */
package org.uniandes.edu.co.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.uniandes.edu.co.services.SqlCrudGrammarAccess;

@SuppressWarnings("all")
public class SqlCrudSyntacticSequencer extends AbstractSyntacticSequencer {

	protected SqlCrudGrammarAccess grammarAccess;
	protected AbstractElementAlias match_ForeignKey_SpaceKeyword_12_q;
	protected AbstractElementAlias match_ForeignKey_SpaceKeyword_14_q;
	protected AbstractElementAlias match_ForeignKey_SpaceKeyword_17_q;
	protected AbstractElementAlias match_ForeignKey_SpaceKeyword_1_q;
	protected AbstractElementAlias match_ForeignKey_SpaceKeyword_3_q;
	protected AbstractElementAlias match_ForeignKey_SpaceKeyword_5_q;
	protected AbstractElementAlias match_ForeignKey_SpaceKeyword_8_q;
	protected AbstractElementAlias match_PrimaryKey_SpaceKeyword_1_q;
	protected AbstractElementAlias match_PrimaryKey_SpaceKeyword_4_1_q;
	protected AbstractElementAlias match_Table_SpaceKeyword_11_q;
	protected AbstractElementAlias match_Table_SpaceKeyword_5_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (SqlCrudGrammarAccess) access;
		match_ForeignKey_SpaceKeyword_12_q = new TokenAlias(false, true, grammarAccess.getForeignKeyAccess().getSpaceKeyword_12());
		match_ForeignKey_SpaceKeyword_14_q = new TokenAlias(false, true, grammarAccess.getForeignKeyAccess().getSpaceKeyword_14());
		match_ForeignKey_SpaceKeyword_17_q = new TokenAlias(false, true, grammarAccess.getForeignKeyAccess().getSpaceKeyword_17());
		match_ForeignKey_SpaceKeyword_1_q = new TokenAlias(false, true, grammarAccess.getForeignKeyAccess().getSpaceKeyword_1());
		match_ForeignKey_SpaceKeyword_3_q = new TokenAlias(false, true, grammarAccess.getForeignKeyAccess().getSpaceKeyword_3());
		match_ForeignKey_SpaceKeyword_5_q = new TokenAlias(false, true, grammarAccess.getForeignKeyAccess().getSpaceKeyword_5());
		match_ForeignKey_SpaceKeyword_8_q = new TokenAlias(false, true, grammarAccess.getForeignKeyAccess().getSpaceKeyword_8());
		match_PrimaryKey_SpaceKeyword_1_q = new TokenAlias(false, true, grammarAccess.getPrimaryKeyAccess().getSpaceKeyword_1());
		match_PrimaryKey_SpaceKeyword_4_1_q = new TokenAlias(false, true, grammarAccess.getPrimaryKeyAccess().getSpaceKeyword_4_1());
		match_Table_SpaceKeyword_11_q = new TokenAlias(false, true, grammarAccess.getTableAccess().getSpaceKeyword_11());
		match_Table_SpaceKeyword_5_q = new TokenAlias(false, true, grammarAccess.getTableAccess().getSpaceKeyword_5());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getCOMMARule())
			return getCOMMAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getCREATERule())
			return getCREATEToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getFKRule())
			return getFKToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getLPARRule())
			return getLPARToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getPKRule())
			return getPKToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getREFERENCESRule())
			return getREFERENCESToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getRPARRule())
			return getRPARToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getTABLARule())
			return getTABLAToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getVARCHRule())
			return getVARCHToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal COMMA : ',';
	 */
	protected String getCOMMAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ",";
	}
	
	/**
	 * terminal CREATE : 'CREATE';
	 */
	protected String getCREATEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "CREATE";
	}
	
	/**
	 * terminal FK : 'FOREIGN KEY';
	 */
	protected String getFKToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "FOREIGN KEY";
	}
	
	/**
	 * terminal LPAR : '(';
	 */
	protected String getLPARToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "(";
	}
	
	/**
	 * terminal PK : 'PRIMARY KEY';
	 */
	protected String getPKToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "PRIMARY KEY";
	}
	
	/**
	 * terminal REFERENCES : 'REFERENCES';
	 */
	protected String getREFERENCESToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "REFERENCES";
	}
	
	/**
	 * terminal RPAR : ')';
	 */
	protected String getRPARToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return ")";
	}
	
	/**
	 * terminal TABLA : 'TABLE';
	 */
	protected String getTABLAToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "TABLE";
	}
	
	/**
	 * terminal VARCH : ('VARCHAR'|'varchar');
	 */
	protected String getVARCHToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "VARCHAR";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_ForeignKey_SpaceKeyword_12_q.equals(syntax))
				emit_ForeignKey_SpaceKeyword_12_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ForeignKey_SpaceKeyword_14_q.equals(syntax))
				emit_ForeignKey_SpaceKeyword_14_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ForeignKey_SpaceKeyword_17_q.equals(syntax))
				emit_ForeignKey_SpaceKeyword_17_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ForeignKey_SpaceKeyword_1_q.equals(syntax))
				emit_ForeignKey_SpaceKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ForeignKey_SpaceKeyword_3_q.equals(syntax))
				emit_ForeignKey_SpaceKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ForeignKey_SpaceKeyword_5_q.equals(syntax))
				emit_ForeignKey_SpaceKeyword_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_ForeignKey_SpaceKeyword_8_q.equals(syntax))
				emit_ForeignKey_SpaceKeyword_8_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryKey_SpaceKeyword_1_q.equals(syntax))
				emit_PrimaryKey_SpaceKeyword_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_PrimaryKey_SpaceKeyword_4_1_q.equals(syntax))
				emit_PrimaryKey_SpaceKeyword_4_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Table_SpaceKeyword_11_q.equals(syntax))
				emit_Table_SpaceKeyword_11_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Table_SpaceKeyword_5_q.equals(syntax))
				emit_Table_SpaceKeyword_5_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ' '?
	 *
	 * This ambiguous syntax occurs at:
	 *     referencetab=NOMBRE (ambiguity) LPAR ' '? referencecol=NOMBRE
	 */
	protected void emit_ForeignKey_SpaceKeyword_12_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ' '?
	 *
	 * This ambiguous syntax occurs at:
	 *     referencetab=NOMBRE ' '? LPAR (ambiguity) referencecol=NOMBRE
	 */
	protected void emit_ForeignKey_SpaceKeyword_14_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ' '?
	 *
	 * This ambiguous syntax occurs at:
	 *     referencecol=NOMBRE RPAR (ambiguity) (rule end)
	 */
	protected void emit_ForeignKey_SpaceKeyword_17_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ' '?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) COMMA (ambiguity) FK ' '? LPAR ' '? column=NOMBRE
	 */
	protected void emit_ForeignKey_SpaceKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ' '?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) COMMA ' '? FK (ambiguity) LPAR ' '? column=NOMBRE
	 */
	protected void emit_ForeignKey_SpaceKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ' '?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) COMMA ' '? FK ' '? LPAR (ambiguity) column=NOMBRE
	 */
	protected void emit_ForeignKey_SpaceKeyword_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ' '?
	 *
	 * This ambiguous syntax occurs at:
	 *     column=NOMBRE RPAR (ambiguity) REFERENCES ' ' referencetab=NOMBRE
	 */
	protected void emit_ForeignKey_SpaceKeyword_8_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ' '?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) PK (ambiguity) LPAR cols+=NOMBRE
	 */
	protected void emit_PrimaryKey_SpaceKeyword_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ' '?
	 *
	 * This ambiguous syntax occurs at:
	 *     cols+=NOMBRE COMMA (ambiguity) cols+=NOMBRE
	 */
	protected void emit_PrimaryKey_SpaceKeyword_4_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ' '?
	 *
	 * This ambiguous syntax occurs at:
	 *     forkeys+=ForeignKey RPAR (ambiguity) (rule end)
	 *     prkey=PrimaryKey RPAR (ambiguity) (rule end)
	 */
	protected void emit_Table_SpaceKeyword_11_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ' '?
	 *
	 * This ambiguous syntax occurs at:
	 *     nombre=NOMBRE (ambiguity) LPAR columnas+=Columna
	 */
	protected void emit_Table_SpaceKeyword_5_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}

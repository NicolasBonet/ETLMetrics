/*
 * generated by Xtext 2.9.1
 */
package org.uniandes.edu.co.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SqlCrudGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DatabaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.edu.co.SqlCrud.Database");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDatabaseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTablesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTablesTableParserRuleCall_1_0 = (RuleCall)cTablesAssignment_1.eContents().get(0);
		
		//Database:
		//	{Database} tables+=Table+;
		@Override public ParserRule getRule() { return rule; }
		
		//{Database} tables+=Table+
		public Group getGroup() { return cGroup; }
		
		//{Database}
		public Action getDatabaseAction_0() { return cDatabaseAction_0; }
		
		//tables+=Table+
		public Assignment getTablesAssignment_1() { return cTablesAssignment_1; }
		
		//Table
		public RuleCall getTablesTableParserRuleCall_1_0() { return cTablesTableParserRuleCall_1_0; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.edu.co.SqlCrud.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCREATETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSpaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cTABLATerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cSpaceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNombreAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNombreNOMBRETerminalRuleCall_4_0 = (RuleCall)cNombreAssignment_4.eContents().get(0);
		private final Keyword cSpaceKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final RuleCall cLPARTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cColumnasAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cColumnasColumnaParserRuleCall_7_0 = (RuleCall)cColumnasAssignment_7.eContents().get(0);
		private final Assignment cPrkeyAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cPrkeyPrimaryKeyParserRuleCall_8_0 = (RuleCall)cPrkeyAssignment_8.eContents().get(0);
		private final Assignment cForkeysAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cForkeysForeignKeyParserRuleCall_9_0 = (RuleCall)cForkeysAssignment_9.eContents().get(0);
		private final RuleCall cRPARTerminalRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final Keyword cSpaceKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Table:
		//	CREATE ' ' TABLA ' ' nombre=NOMBRE ' '?
		//	LPAR
		//	columnas+=Columna+
		//	prkey=PrimaryKey
		//	forkeys+=ForeignKey*
		//	RPAR ' '?;
		@Override public ParserRule getRule() { return rule; }
		
		//CREATE ' ' TABLA ' ' nombre=NOMBRE ' '? LPAR columnas+=Columna+ prkey=PrimaryKey forkeys+=ForeignKey* RPAR ' '?
		public Group getGroup() { return cGroup; }
		
		//CREATE
		public RuleCall getCREATETerminalRuleCall_0() { return cCREATETerminalRuleCall_0; }
		
		//' '
		public Keyword getSpaceKeyword_1() { return cSpaceKeyword_1; }
		
		//TABLA
		public RuleCall getTABLATerminalRuleCall_2() { return cTABLATerminalRuleCall_2; }
		
		//' '
		public Keyword getSpaceKeyword_3() { return cSpaceKeyword_3; }
		
		//nombre=NOMBRE
		public Assignment getNombreAssignment_4() { return cNombreAssignment_4; }
		
		//NOMBRE
		public RuleCall getNombreNOMBRETerminalRuleCall_4_0() { return cNombreNOMBRETerminalRuleCall_4_0; }
		
		//' '?
		public Keyword getSpaceKeyword_5() { return cSpaceKeyword_5; }
		
		//LPAR
		public RuleCall getLPARTerminalRuleCall_6() { return cLPARTerminalRuleCall_6; }
		
		//columnas+=Columna+
		public Assignment getColumnasAssignment_7() { return cColumnasAssignment_7; }
		
		//Columna
		public RuleCall getColumnasColumnaParserRuleCall_7_0() { return cColumnasColumnaParserRuleCall_7_0; }
		
		//prkey=PrimaryKey
		public Assignment getPrkeyAssignment_8() { return cPrkeyAssignment_8; }
		
		//PrimaryKey
		public RuleCall getPrkeyPrimaryKeyParserRuleCall_8_0() { return cPrkeyPrimaryKeyParserRuleCall_8_0; }
		
		//forkeys+=ForeignKey*
		public Assignment getForkeysAssignment_9() { return cForkeysAssignment_9; }
		
		//ForeignKey
		public RuleCall getForkeysForeignKeyParserRuleCall_9_0() { return cForkeysForeignKeyParserRuleCall_9_0; }
		
		//RPAR
		public RuleCall getRPARTerminalRuleCall_10() { return cRPARTerminalRuleCall_10; }
		
		//' '?
		public Keyword getSpaceKeyword_11() { return cSpaceKeyword_11; }
	}
	public class PrimaryKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.edu.co.SqlCrud.PrimaryKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPKTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSpaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cLPARTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cColsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cColsNOMBRETerminalRuleCall_3_0 = (RuleCall)cColsAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cCOMMATerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Keyword cSpaceKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cColsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cColsNOMBRETerminalRuleCall_4_2_0 = (RuleCall)cColsAssignment_4_2.eContents().get(0);
		private final RuleCall cRPARTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//PrimaryKey:
		//	PK ' '? LPAR cols+=NOMBRE (COMMA ' '? cols+=NOMBRE)*
		//	RPAR;
		@Override public ParserRule getRule() { return rule; }
		
		//PK ' '? LPAR cols+=NOMBRE (COMMA ' '? cols+=NOMBRE)* RPAR
		public Group getGroup() { return cGroup; }
		
		//PK
		public RuleCall getPKTerminalRuleCall_0() { return cPKTerminalRuleCall_0; }
		
		//' '?
		public Keyword getSpaceKeyword_1() { return cSpaceKeyword_1; }
		
		//LPAR
		public RuleCall getLPARTerminalRuleCall_2() { return cLPARTerminalRuleCall_2; }
		
		//cols+=NOMBRE
		public Assignment getColsAssignment_3() { return cColsAssignment_3; }
		
		//NOMBRE
		public RuleCall getColsNOMBRETerminalRuleCall_3_0() { return cColsNOMBRETerminalRuleCall_3_0; }
		
		//(COMMA ' '? cols+=NOMBRE)*
		public Group getGroup_4() { return cGroup_4; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_4_0() { return cCOMMATerminalRuleCall_4_0; }
		
		//' '?
		public Keyword getSpaceKeyword_4_1() { return cSpaceKeyword_4_1; }
		
		//cols+=NOMBRE
		public Assignment getColsAssignment_4_2() { return cColsAssignment_4_2; }
		
		//NOMBRE
		public RuleCall getColsNOMBRETerminalRuleCall_4_2_0() { return cColsNOMBRETerminalRuleCall_4_2_0; }
		
		//RPAR
		public RuleCall getRPARTerminalRuleCall_5() { return cRPARTerminalRuleCall_5; }
	}
	public class ForeignKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.edu.co.SqlCrud.ForeignKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCOMMATerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cSpaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cFKTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cSpaceKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cLPARTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cSpaceKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cColumnAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cColumnNOMBRETerminalRuleCall_6_0 = (RuleCall)cColumnAssignment_6.eContents().get(0);
		private final RuleCall cRPARTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cSpaceKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cREFERENCESTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Keyword cSpaceKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cReferencetabAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cReferencetabNOMBRETerminalRuleCall_11_0 = (RuleCall)cReferencetabAssignment_11.eContents().get(0);
		private final Keyword cSpaceKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final RuleCall cLPARTerminalRuleCall_13 = (RuleCall)cGroup.eContents().get(13);
		private final Keyword cSpaceKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Assignment cReferencecolAssignment_15 = (Assignment)cGroup.eContents().get(15);
		private final RuleCall cReferencecolNOMBRETerminalRuleCall_15_0 = (RuleCall)cReferencecolAssignment_15.eContents().get(0);
		private final RuleCall cRPARTerminalRuleCall_16 = (RuleCall)cGroup.eContents().get(16);
		private final Keyword cSpaceKeyword_17 = (Keyword)cGroup.eContents().get(17);
		
		//ForeignKey:
		//	COMMA ' '? FK ' '? LPAR ' '? column=NOMBRE
		//	RPAR ' '? REFERENCES ' ' referencetab=NOMBRE ' '?
		//	LPAR ' '? referencecol=NOMBRE RPAR ' '?;
		@Override public ParserRule getRule() { return rule; }
		
		//COMMA ' '? FK ' '? LPAR ' '? column=NOMBRE RPAR ' '? REFERENCES ' ' referencetab=NOMBRE ' '? LPAR ' '?
		//referencecol=NOMBRE RPAR ' '?
		public Group getGroup() { return cGroup; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_0() { return cCOMMATerminalRuleCall_0; }
		
		//' '?
		public Keyword getSpaceKeyword_1() { return cSpaceKeyword_1; }
		
		//FK
		public RuleCall getFKTerminalRuleCall_2() { return cFKTerminalRuleCall_2; }
		
		//' '?
		public Keyword getSpaceKeyword_3() { return cSpaceKeyword_3; }
		
		//LPAR
		public RuleCall getLPARTerminalRuleCall_4() { return cLPARTerminalRuleCall_4; }
		
		//' '?
		public Keyword getSpaceKeyword_5() { return cSpaceKeyword_5; }
		
		//column=NOMBRE
		public Assignment getColumnAssignment_6() { return cColumnAssignment_6; }
		
		//NOMBRE
		public RuleCall getColumnNOMBRETerminalRuleCall_6_0() { return cColumnNOMBRETerminalRuleCall_6_0; }
		
		//RPAR
		public RuleCall getRPARTerminalRuleCall_7() { return cRPARTerminalRuleCall_7; }
		
		//' '?
		public Keyword getSpaceKeyword_8() { return cSpaceKeyword_8; }
		
		//REFERENCES
		public RuleCall getREFERENCESTerminalRuleCall_9() { return cREFERENCESTerminalRuleCall_9; }
		
		//' '
		public Keyword getSpaceKeyword_10() { return cSpaceKeyword_10; }
		
		//referencetab=NOMBRE
		public Assignment getReferencetabAssignment_11() { return cReferencetabAssignment_11; }
		
		//NOMBRE
		public RuleCall getReferencetabNOMBRETerminalRuleCall_11_0() { return cReferencetabNOMBRETerminalRuleCall_11_0; }
		
		//' '?
		public Keyword getSpaceKeyword_12() { return cSpaceKeyword_12; }
		
		//LPAR
		public RuleCall getLPARTerminalRuleCall_13() { return cLPARTerminalRuleCall_13; }
		
		//' '?
		public Keyword getSpaceKeyword_14() { return cSpaceKeyword_14; }
		
		//referencecol=NOMBRE
		public Assignment getReferencecolAssignment_15() { return cReferencecolAssignment_15; }
		
		//NOMBRE
		public RuleCall getReferencecolNOMBRETerminalRuleCall_15_0() { return cReferencecolNOMBRETerminalRuleCall_15_0; }
		
		//RPAR
		public RuleCall getRPARTerminalRuleCall_16() { return cRPARTerminalRuleCall_16; }
		
		//' '?
		public Keyword getSpaceKeyword_17() { return cSpaceKeyword_17; }
	}
	public class ColumnaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.edu.co.SqlCrud.Columna");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNombreAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNombreNOMBRETerminalRuleCall_0_0 = (RuleCall)cNombreAssignment_0.eContents().get(0);
		private final Keyword cSpaceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTipoAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTipoColumnTipoEnumParserRuleCall_2_0 = (RuleCall)cTipoAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSpaceKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cNotnullableAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cNotnullableNOTNULLTerminalRuleCall_3_1_0 = (RuleCall)cNotnullableAssignment_3_1.eContents().get(0);
		private final RuleCall cCOMMATerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Columna:
		//	nombre=NOMBRE ' '
		//	tipo=ColumnTipoEnum (' ' notnullable=NOTNULL)? COMMA;
		@Override public ParserRule getRule() { return rule; }
		
		//nombre=NOMBRE ' ' tipo=ColumnTipoEnum (' ' notnullable=NOTNULL)? COMMA
		public Group getGroup() { return cGroup; }
		
		//nombre=NOMBRE
		public Assignment getNombreAssignment_0() { return cNombreAssignment_0; }
		
		//NOMBRE
		public RuleCall getNombreNOMBRETerminalRuleCall_0_0() { return cNombreNOMBRETerminalRuleCall_0_0; }
		
		//' '
		public Keyword getSpaceKeyword_1() { return cSpaceKeyword_1; }
		
		//tipo=ColumnTipoEnum
		public Assignment getTipoAssignment_2() { return cTipoAssignment_2; }
		
		//ColumnTipoEnum
		public RuleCall getTipoColumnTipoEnumParserRuleCall_2_0() { return cTipoColumnTipoEnumParserRuleCall_2_0; }
		
		//(' ' notnullable=NOTNULL)?
		public Group getGroup_3() { return cGroup_3; }
		
		//' '
		public Keyword getSpaceKeyword_3_0() { return cSpaceKeyword_3_0; }
		
		//notnullable=NOTNULL
		public Assignment getNotnullableAssignment_3_1() { return cNotnullableAssignment_3_1; }
		
		//NOTNULL
		public RuleCall getNotnullableNOTNULLTerminalRuleCall_3_1_0() { return cNotnullableNOTNULLTerminalRuleCall_3_1_0; }
		
		//COMMA
		public RuleCall getCOMMATerminalRuleCall_4() { return cCOMMATerminalRuleCall_4; }
	}
	public class ColumnTipoEnumElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.edu.co.SqlCrud.ColumnTipoEnum");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cInttAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cInttTIPOINTTerminalRuleCall_0_0 = (RuleCall)cInttAssignment_0.eContents().get(0);
		private final Assignment cVarchartAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVarchartVarcharParserRuleCall_1_0 = (RuleCall)cVarchartAssignment_1.eContents().get(0);
		private final Assignment cSmallinttAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cSmallinttSMALLINTKeyword_2_0 = (Keyword)cSmallinttAssignment_2.eContents().get(0);
		private final Assignment cBiginttAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cBiginttBIGINTKeyword_3_0 = (Keyword)cBiginttAssignment_3.eContents().get(0);
		private final Assignment cBooleantAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cBooleantBOOLEANKeyword_4_0 = (Keyword)cBooleantAssignment_4.eContents().get(0);
		private final Assignment cRealtAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final Keyword cRealtREALKeyword_5_0 = (Keyword)cRealtAssignment_5.eContents().get(0);
		private final Assignment cFloattAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final Keyword cFloattFLOATKeyword_6_0 = (Keyword)cFloattAssignment_6.eContents().get(0);
		private final Assignment cBinarytAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cBinarytBinaryParserRuleCall_7_0 = (RuleCall)cBinarytAssignment_7.eContents().get(0);
		private final Assignment cVarbinarytAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cVarbinarytVarBinaryParserRuleCall_8_0 = (RuleCall)cVarbinarytAssignment_8.eContents().get(0);
		private final Assignment cDatetAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final Keyword cDatetDATEKeyword_9_0 = (Keyword)cDatetAssignment_9.eContents().get(0);
		private final Assignment cTimestamptAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final Keyword cTimestamptTIMESTAMPKeyword_10_0 = (Keyword)cTimestamptAssignment_10.eContents().get(0);
		private final Assignment cMultisettAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final Keyword cMultisettMULTISETKeyword_11_0 = (Keyword)cMultisettAssignment_11.eContents().get(0);
		private final Assignment cXmltAssignment_12 = (Assignment)cAlternatives.eContents().get(12);
		private final Keyword cXmltXMLKeyword_12_0 = (Keyword)cXmltAssignment_12.eContents().get(0);
		
		//ColumnTipoEnum:
		//	intt=TIPOINT | varchart=Varchar | smallintt='SMALLINT' | bigintt='BIGINT' | booleant='BOOLEAN' | realt='REAL' |
		//	floatt='FLOAT'
		//	| binaryt=Binary | varbinaryt=VarBinary | datet='DATE' | timestampt='TIMESTAMP' | multisett='MULTISET' | xmlt='XML';
		@Override public ParserRule getRule() { return rule; }
		
		//intt=TIPOINT | varchart=Varchar | smallintt='SMALLINT' | bigintt='BIGINT' | booleant='BOOLEAN' | realt='REAL' |
		//floatt='FLOAT' | binaryt=Binary | varbinaryt=VarBinary | datet='DATE' | timestampt='TIMESTAMP' | multisett='MULTISET'
		//| xmlt='XML'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//intt=TIPOINT
		public Assignment getInttAssignment_0() { return cInttAssignment_0; }
		
		//TIPOINT
		public RuleCall getInttTIPOINTTerminalRuleCall_0_0() { return cInttTIPOINTTerminalRuleCall_0_0; }
		
		//varchart=Varchar
		public Assignment getVarchartAssignment_1() { return cVarchartAssignment_1; }
		
		//Varchar
		public RuleCall getVarchartVarcharParserRuleCall_1_0() { return cVarchartVarcharParserRuleCall_1_0; }
		
		//smallintt='SMALLINT'
		public Assignment getSmallinttAssignment_2() { return cSmallinttAssignment_2; }
		
		//'SMALLINT'
		public Keyword getSmallinttSMALLINTKeyword_2_0() { return cSmallinttSMALLINTKeyword_2_0; }
		
		//bigintt='BIGINT'
		public Assignment getBiginttAssignment_3() { return cBiginttAssignment_3; }
		
		//'BIGINT'
		public Keyword getBiginttBIGINTKeyword_3_0() { return cBiginttBIGINTKeyword_3_0; }
		
		//booleant='BOOLEAN'
		public Assignment getBooleantAssignment_4() { return cBooleantAssignment_4; }
		
		//'BOOLEAN'
		public Keyword getBooleantBOOLEANKeyword_4_0() { return cBooleantBOOLEANKeyword_4_0; }
		
		//realt='REAL'
		public Assignment getRealtAssignment_5() { return cRealtAssignment_5; }
		
		//'REAL'
		public Keyword getRealtREALKeyword_5_0() { return cRealtREALKeyword_5_0; }
		
		//floatt='FLOAT'
		public Assignment getFloattAssignment_6() { return cFloattAssignment_6; }
		
		//'FLOAT'
		public Keyword getFloattFLOATKeyword_6_0() { return cFloattFLOATKeyword_6_0; }
		
		//binaryt=Binary
		public Assignment getBinarytAssignment_7() { return cBinarytAssignment_7; }
		
		//Binary
		public RuleCall getBinarytBinaryParserRuleCall_7_0() { return cBinarytBinaryParserRuleCall_7_0; }
		
		//varbinaryt=VarBinary
		public Assignment getVarbinarytAssignment_8() { return cVarbinarytAssignment_8; }
		
		//VarBinary
		public RuleCall getVarbinarytVarBinaryParserRuleCall_8_0() { return cVarbinarytVarBinaryParserRuleCall_8_0; }
		
		//datet='DATE'
		public Assignment getDatetAssignment_9() { return cDatetAssignment_9; }
		
		//'DATE'
		public Keyword getDatetDATEKeyword_9_0() { return cDatetDATEKeyword_9_0; }
		
		//timestampt='TIMESTAMP'
		public Assignment getTimestamptAssignment_10() { return cTimestamptAssignment_10; }
		
		//'TIMESTAMP'
		public Keyword getTimestamptTIMESTAMPKeyword_10_0() { return cTimestamptTIMESTAMPKeyword_10_0; }
		
		//multisett='MULTISET'
		public Assignment getMultisettAssignment_11() { return cMultisettAssignment_11; }
		
		//'MULTISET'
		public Keyword getMultisettMULTISETKeyword_11_0() { return cMultisettMULTISETKeyword_11_0; }
		
		//xmlt='XML'
		public Assignment getXmltAssignment_12() { return cXmltAssignment_12; }
		
		//'XML'
		public Keyword getXmltXMLKeyword_12_0() { return cXmltXMLKeyword_12_0; }
	}
	public class VarcharElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.edu.co.SqlCrud.Varchar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVARCHTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cLPARTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cMaxAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMaxENTEROTerminalRuleCall_2_0 = (RuleCall)cMaxAssignment_2.eContents().get(0);
		private final RuleCall cRPARTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Varchar:
		//	VARCH LPAR max=ENTERO RPAR;
		@Override public ParserRule getRule() { return rule; }
		
		//VARCH LPAR max=ENTERO RPAR
		public Group getGroup() { return cGroup; }
		
		//VARCH
		public RuleCall getVARCHTerminalRuleCall_0() { return cVARCHTerminalRuleCall_0; }
		
		//LPAR
		public RuleCall getLPARTerminalRuleCall_1() { return cLPARTerminalRuleCall_1; }
		
		//max=ENTERO
		public Assignment getMaxAssignment_2() { return cMaxAssignment_2; }
		
		//ENTERO
		public RuleCall getMaxENTEROTerminalRuleCall_2_0() { return cMaxENTEROTerminalRuleCall_2_0; }
		
		//RPAR
		public RuleCall getRPARTerminalRuleCall_3() { return cRPARTerminalRuleCall_3; }
	}
	public class BinaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.edu.co.SqlCrud.Binary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBINARYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLPARTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cMaxAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMaxENTEROTerminalRuleCall_2_0 = (RuleCall)cMaxAssignment_2.eContents().get(0);
		private final RuleCall cRPARTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Binary:
		//	'BINARY' LPAR max=ENTERO RPAR;
		@Override public ParserRule getRule() { return rule; }
		
		//'BINARY' LPAR max=ENTERO RPAR
		public Group getGroup() { return cGroup; }
		
		//'BINARY'
		public Keyword getBINARYKeyword_0() { return cBINARYKeyword_0; }
		
		//LPAR
		public RuleCall getLPARTerminalRuleCall_1() { return cLPARTerminalRuleCall_1; }
		
		//max=ENTERO
		public Assignment getMaxAssignment_2() { return cMaxAssignment_2; }
		
		//ENTERO
		public RuleCall getMaxENTEROTerminalRuleCall_2_0() { return cMaxENTEROTerminalRuleCall_2_0; }
		
		//RPAR
		public RuleCall getRPARTerminalRuleCall_3() { return cRPARTerminalRuleCall_3; }
	}
	public class VarBinaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.edu.co.SqlCrud.VarBinary");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVARBINARYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLPARTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cMaxAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMaxENTEROTerminalRuleCall_2_0 = (RuleCall)cMaxAssignment_2.eContents().get(0);
		private final RuleCall cRPARTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//VarBinary Binary:
		//	'VARBINARY' LPAR max=ENTERO RPAR
		@Override public ParserRule getRule() { return rule; }
		
		//'VARBINARY' LPAR max=ENTERO RPAR
		public Group getGroup() { return cGroup; }
		
		//'VARBINARY'
		public Keyword getVARBINARYKeyword_0() { return cVARBINARYKeyword_0; }
		
		//LPAR
		public RuleCall getLPARTerminalRuleCall_1() { return cLPARTerminalRuleCall_1; }
		
		//max=ENTERO
		public Assignment getMaxAssignment_2() { return cMaxAssignment_2; }
		
		//ENTERO
		public RuleCall getMaxENTEROTerminalRuleCall_2_0() { return cMaxENTEROTerminalRuleCall_2_0; }
		
		//RPAR
		public RuleCall getRPARTerminalRuleCall_3() { return cRPARTerminalRuleCall_3; }
	}
	
	
	private final DatabaseElements pDatabase;
	private final TableElements pTable;
	private final PrimaryKeyElements pPrimaryKey;
	private final ForeignKeyElements pForeignKey;
	private final ColumnaElements pColumna;
	private final ColumnTipoEnumElements pColumnTipoEnum;
	private final VarcharElements pVarchar;
	private final BinaryElements pBinary;
	private final VarBinaryElements pVarBinary;
	private final TerminalRule tCREATE;
	private final TerminalRule tTABLA;
	private final TerminalRule tLPAR;
	private final TerminalRule tRPAR;
	private final TerminalRule tCOMMA;
	private final TerminalRule tPK;
	private final TerminalRule tFK;
	private final TerminalRule tREFERENCES;
	private final TerminalRule tNOTNULL;
	private final TerminalRule tVARCH;
	private final TerminalRule tTIPOINT;
	private final TerminalRule tENTERO;
	private final TerminalRule tNOMBRE;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SqlCrudGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDatabase = new DatabaseElements();
		this.pTable = new TableElements();
		this.pPrimaryKey = new PrimaryKeyElements();
		this.pForeignKey = new ForeignKeyElements();
		this.pColumna = new ColumnaElements();
		this.pColumnTipoEnum = new ColumnTipoEnumElements();
		this.pVarchar = new VarcharElements();
		this.pBinary = new BinaryElements();
		this.pVarBinary = new VarBinaryElements();
		this.tCREATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.edu.co.SqlCrud.CREATE");
		this.tTABLA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.edu.co.SqlCrud.TABLA");
		this.tLPAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.edu.co.SqlCrud.LPAR");
		this.tRPAR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.edu.co.SqlCrud.RPAR");
		this.tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.edu.co.SqlCrud.COMMA");
		this.tPK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.edu.co.SqlCrud.PK");
		this.tFK = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.edu.co.SqlCrud.FK");
		this.tREFERENCES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.edu.co.SqlCrud.REFERENCES");
		this.tNOTNULL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.edu.co.SqlCrud.NOTNULL");
		this.tVARCH = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.edu.co.SqlCrud.VARCH");
		this.tTIPOINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.edu.co.SqlCrud.TIPOINT");
		this.tENTERO = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.edu.co.SqlCrud.ENTERO");
		this.tNOMBRE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.edu.co.SqlCrud.NOMBRE");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.uniandes.edu.co.SqlCrud".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Database:
	//	{Database} tables+=Table+;
	public DatabaseElements getDatabaseAccess() {
		return pDatabase;
	}
	
	public ParserRule getDatabaseRule() {
		return getDatabaseAccess().getRule();
	}
	
	//Table:
	//	CREATE ' ' TABLA ' ' nombre=NOMBRE ' '?
	//	LPAR
	//	columnas+=Columna+
	//	prkey=PrimaryKey
	//	forkeys+=ForeignKey*
	//	RPAR ' '?;
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//PrimaryKey:
	//	PK ' '? LPAR cols+=NOMBRE (COMMA ' '? cols+=NOMBRE)*
	//	RPAR;
	public PrimaryKeyElements getPrimaryKeyAccess() {
		return pPrimaryKey;
	}
	
	public ParserRule getPrimaryKeyRule() {
		return getPrimaryKeyAccess().getRule();
	}
	
	//ForeignKey:
	//	COMMA ' '? FK ' '? LPAR ' '? column=NOMBRE
	//	RPAR ' '? REFERENCES ' ' referencetab=NOMBRE ' '?
	//	LPAR ' '? referencecol=NOMBRE RPAR ' '?;
	public ForeignKeyElements getForeignKeyAccess() {
		return pForeignKey;
	}
	
	public ParserRule getForeignKeyRule() {
		return getForeignKeyAccess().getRule();
	}
	
	//Columna:
	//	nombre=NOMBRE ' '
	//	tipo=ColumnTipoEnum (' ' notnullable=NOTNULL)? COMMA;
	public ColumnaElements getColumnaAccess() {
		return pColumna;
	}
	
	public ParserRule getColumnaRule() {
		return getColumnaAccess().getRule();
	}
	
	//ColumnTipoEnum:
	//	intt=TIPOINT | varchart=Varchar | smallintt='SMALLINT' | bigintt='BIGINT' | booleant='BOOLEAN' | realt='REAL' |
	//	floatt='FLOAT'
	//	| binaryt=Binary | varbinaryt=VarBinary | datet='DATE' | timestampt='TIMESTAMP' | multisett='MULTISET' | xmlt='XML';
	public ColumnTipoEnumElements getColumnTipoEnumAccess() {
		return pColumnTipoEnum;
	}
	
	public ParserRule getColumnTipoEnumRule() {
		return getColumnTipoEnumAccess().getRule();
	}
	
	//Varchar:
	//	VARCH LPAR max=ENTERO RPAR;
	public VarcharElements getVarcharAccess() {
		return pVarchar;
	}
	
	public ParserRule getVarcharRule() {
		return getVarcharAccess().getRule();
	}
	
	//Binary:
	//	'BINARY' LPAR max=ENTERO RPAR;
	public BinaryElements getBinaryAccess() {
		return pBinary;
	}
	
	public ParserRule getBinaryRule() {
		return getBinaryAccess().getRule();
	}
	
	//VarBinary Binary:
	//	'VARBINARY' LPAR max=ENTERO RPAR
	public VarBinaryElements getVarBinaryAccess() {
		return pVarBinary;
	}
	
	public ParserRule getVarBinaryRule() {
		return getVarBinaryAccess().getRule();
	}
	
	//terminal CREATE:
	//	'CREATE';
	public TerminalRule getCREATERule() {
		return tCREATE;
	}
	
	//terminal TABLA:
	//	'TABLE';
	public TerminalRule getTABLARule() {
		return tTABLA;
	}
	
	//terminal LPAR:
	//	'(';
	public TerminalRule getLPARRule() {
		return tLPAR;
	}
	
	//terminal RPAR:
	//	')';
	public TerminalRule getRPARRule() {
		return tRPAR;
	}
	
	//terminal COMMA:
	//	',';
	public TerminalRule getCOMMARule() {
		return tCOMMA;
	}
	
	//terminal PK:
	//	'PRIMARY KEY';
	public TerminalRule getPKRule() {
		return tPK;
	}
	
	//terminal FK:
	//	'FOREIGN KEY';
	public TerminalRule getFKRule() {
		return tFK;
	}
	
	//terminal REFERENCES:
	//	'REFERENCES';
	public TerminalRule getREFERENCESRule() {
		return tREFERENCES;
	}
	
	//terminal NOTNULL:
	//	'NOT NULL';
	public TerminalRule getNOTNULLRule() {
		return tNOTNULL;
	}
	
	//terminal VARCH:
	//	'VARCHAR' | 'varchar';
	public TerminalRule getVARCHRule() {
		return tVARCH;
	}
	
	//terminal TIPOINT:
	//	'INT' | 'int';
	public TerminalRule getTIPOINTRule() {
		return tTIPOINT;
	}
	
	//terminal ENTERO:
	//	'0'..'9'+;
	public TerminalRule getENTERORule() {
		return tENTERO;
	}
	
	//terminal NOMBRE:
	//	'A'..'Z' | 'a'..'z' | '0'..'9'*;
	public TerminalRule getNOMBRERule() {
		return tNOMBRE;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

-- Debemos crear una unica base de datos para todos
pre {
	var db : new DB!Database;
}

post {
	for (fk in  db.contents.select(cr|cr.isTypeOf(DB!ForeignKey)))
	{
		var referencedColumnName = fk.name.split("_").last();
		var referencedEntityName = fk.name.split("_").at(1);		

		var table = db.contents.select(t|t.name.equalsIgnoreCase(referencedEntityName)).first();
		fk.parent = table.primaryKeys.select(c|c.name.equalsIgnoreCase(referencedColumnName)).first();
	}
}

-- Esta regla se encarga de todo!
rule MarketPlace2Relacional
	transform
		c : mp!ClassUnit
	to
		t : DB!Table
		{
			-- Asignamos la tabla creada a la base de datos inicializada al comienzo y le ponemos el nombre de la clase sin el Entity
	   		guard : c.codeRelation.select(cr|cr.isTypeOf(mp!HasValue)).select(cr|cr.annotation.size() > 0).select(a|a.`to`.Name = "Entity").size() > 0
	   		t.database = db;
		   	t.name = c.name.replace("Entity", "");
		   	t.columns = c.columns(t);
		   	c.foreignKeys(t);
	   }

@lazy
rule StorableUnit2Column
	transform
		s : mp!StorableUnit
	to
		k : DB!Column
		{
			guard : s.isPrimitiveType()
			k.database = db;
			k.name = s.name;
			k.notNull = s.isPrimaryKey();
			k.type = s.type.getType();
		}
		
@lazy
rule StorableUnit2ForeignKey
	transform
		s : mp!StorableUnit
	to
		k : DB!ForeignKey
		{
			guard : not s.isPrimitiveType()

			var fkAnnotation = s.getAnnotation("PrimaryKeyJoinColumn");
			var referencedColumn = fkAnnotation.attribute.select(a|a.tag="referencedColumnName").first().value.replace("\"","");
			var localColumn = fkAnnotation.attribute.select(a|a.tag="name").first().value.replace("\"","");
			var referencedTable = localColumn.replace("Id", "");
//			var referencedTable = s.type.name.replace("Entity","");			
			
			k.name = localColumn + "_" + referencedTable +  "_" + referencedColumn;
			k.database = db;
		}

operation mp!ClassUnit columns(table): Sequence
{
	var selfKeys = self.codeElement.select(ce|ce.isTypeOf(mp!StorableUnit)).equivalent("StorableUnit2Column");
	var superclase = self.superClass();
		
	if (superclase.isDefined())
	{
		var superClaseKeys = superclase.columns(table);
		selfKeys = selfKeys.includingAll(superClaseKeys);
	}
	
	return selfKeys.collect(c|c.setTable(table));
}

operation mp!ClassUnit foreignKeys(table): Sequence
{
	var selfKeys = self.codeElement.select(ce|ce.isTypeOf(mp!StorableUnit)).equivalent("StorableUnit2ForeignKey");
	var superclase = self.superClass();
		
	if (superclase.isDefined())
	{
		var superClaseKeys = superclase.foreignKeys(table);
		selfKeys = selfKeys.includingAll(superClaseKeys);
	}
	
	return selfKeys.collect(c|c.setTable(table));
}

operation DB!ForeignKey setTable(table) : DB!ForeignKey
{
	var referencedColumnName = self.name.split("_").first();
	self.child = table.columns.select(c|c.name=referencedColumnName).first();
	return self;
}

operation DB!Column setTable(table) : DB!Column
{
	self.table = table;
	if (self.notNull)
	{
		table.primaryKeys.add(self);
	}

	return self;
}
		
operation InterfaceUnit getType()
{
	switch (self.name) {
		case "Long" : return DB!DataType#int;
		case "Integer" : return DB!DataType#int;
		case "String" : return DB!DataType#varchar;
		default : return DB!DataType#unknown;
	}
}

operation mp!ClassUnit superClass(): mp!ClassUnit
{
	return self.codeRelation.select(s|s.isTypeOf(mp!Extends)).`to`.first();
}

operation StorableUnit isPrimaryKey()
{
	if(self.codeRelation.select(a|a.isTypeOf(mp!HasValue)).select(a|a.annotation.size() > 0).select(a|a.`to`.Name = "Id").size()>0){
		return true;
	}
	
	return false;
}

operation StorableUnit isPrimitiveType()
{
	if(self.codeRelation.select(a|a.isTypeOf(mp!HasValue)).select(a|a.annotation.size()>0).select(a|a.`to`.Name = "PrimaryKeyJoinColumn").size()=0)
	{
		return true;
	}
	
	return false;
}

operation StorableUnit getAnnotation(name : String)
{
	return self.codeRelation.select(a|a.isTypeOf(mp!HasValue)).select(a|a.annotation.size() > 0).select(a|a.`to`.Name = name).first();
}
pre{	
	var architecture = new ModelMM!Architecture;
	var serviceOperator = GrammarMM!ServiceOperator.all.at(0);
	architecture.views = serviceOperator.getViews();			
}
		
operation GrammarMM!ServiceOperator getViews(): Sequence{	
	var views = new Sequence;
	
	var viewParent = new ModelMM!View;
	viewParent.name = self.name;
	viewParent.gComponents = self.attributes.getGraphicalComponents();	
	
	var viewChild1 = new ModelMM!View;
	for (superEntity in self.superEntities){		
		viewChild1.name = superEntity.name;
		viewChild1.gComponents = superEntity.attributes.getGraphicalComponents();
		viewChild1.childs = superEntity.getViewChilds();
		
		viewParent.childs.add(viewChild1);		
		
		for (entity in superEntity.entities){
			var viewChild2 = new ModelMM!View;
			viewChild2.name = entity.name;
			viewChild2.gComponents = entity.attributes.getGraphicalComponents();			
			viewChild1.childs.addAll(entity.getViewChilds());			
			
			viewChild1.childs.add(viewChild2);
		}
		
		for (pay in superEntity.pays){
			var viewChild3 = new ModelMM!View;
			viewChild3.name = pay.name;
			viewChild3.gComponents = pay.attributes.getGraphicalComponents();			
			viewChild3.childs = pay.getViewChilds();
			
			viewChild1.childs.add(viewChild3);
		}		
	}	
	
	for (service in self.services){
		var viewChild4 = new ModelMM!View;
		viewChild4.name = service.name;
		viewChild4.gComponents = service.calculate.getGraphicalComponents();		
		
		viewChild1.childs.add(viewChild4);
	}
	
	views.add(viewParent);
	return views;
}

operation GrammarMM!Enum getItems(): Sequence{
	var items = new Sequence;
	
	var isFirts = new Boolean;
	isFirts = true;	
	for (item in self.items){
		var newItem = new ModelMM!ListItem;
		newItem.action = item;
		
		if (isFirts){
			newItem.isSelected = true;
			isFirts = false;			
		}
		
		items.add(newItem);	
	}
	
	return items;
}

operation Collection getGraphicalComponents(): Sequence{
	var graphicalComponents = new Sequence;
	
	var idCalculate = 1;
	for (attribute in self){
		if (attribute.isTypeOf(GrammarMM!StringValue)){
			var text = new ModelMM!Text;
			text.name = attribute.name.substring(1, attribute.name.length() - 1);
			text.displayName = attribute.displayName.substring(1, attribute.displayName.length() - 1);
			
			graphicalComponents.add(text);
		}
		else if (attribute.isTypeOf(GrammarMM!IntegerValue)){
			var number = new ModelMM!Number;
			number.name = attribute.name.substring(1, attribute.name.length() - 1);
			number.displayName = attribute.displayName.substring(1, attribute.displayName.length() - 1);
			
			graphicalComponents.add(number);
		}
		else if (attribute.isTypeOf(GrammarMM!BooleanValue)){
			var radio = new ModelMM!Radio;
			radio.name = attribute.name.substring(1, attribute.name.length() - 1);
			radio.displayName = attribute.displayName.substring(1, attribute.displayName.length() - 1);
			
			graphicalComponents.add(radio);
		}
		else if (attribute.isTypeOf(GrammarMM!FloatValue)){
			var number = new ModelMM!Number;
			number.name = attribute.name.substring(1, attribute.name.length() - 1);
			number.displayName = attribute.displayName.substring(1, attribute.displayName.length() - 1);
			
			graphicalComponents.add(number);
		}
		else if (attribute.isTypeOf(GrammarMM!Date)){
			var datePicker = new ModelMM!DatePicker;
			datePicker.name = attribute.name.substring(1, attribute.name.length() - 1);
			datePicker.displayName = attribute.displayName.substring(1, attribute.displayName.length() - 1);
			
			graphicalComponents.add(datePicker);
		}
		else if (attribute.isTypeOf(GrammarMM!Enum)){
			var dropdownList = new ModelMM!DropdownList;
			dropdownList.name = attribute.name.substring(1, attribute.name.length() - 1);
			dropdownList.displayName = attribute.displayName.substring(1, attribute.displayName.length() - 1);
			dropdownList.items = attribute.getItems();
			
			graphicalComponents.add(dropdownList);
		}	
		else if (attribute.isTypeOf(GrammarMM!Calculate)){
			var button = new ModelMM!Button;			
			button.name = attribute.name.toLowerCase();
			button.displayName = attribute.name;			
			button.id = idCalculate + "";
			
			idCalculate += 1;	
			
			graphicalComponents.add(button);
		}					
	}
	
	return graphicalComponents;
}

operation Any getViewChilds(): Sequence{
	var views = new Sequence;
	
	for (attribute in self.attributes){
		if (attribute.isTypeOf(GrammarMM!Complex) and attribute.name.matches("\"novedad\"")){
					
			var view = new ModelMM!View;
			view.name = attribute.name.substring(1, attribute.name.length() - 1).firstToUpperCase();			
			view.gComponents = attribute.attributes.getGraphicalComponents();
			
			views.add(view);								
		}							
	}
	
	return views;
}
		
 
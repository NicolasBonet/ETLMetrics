pre{
	snap!Application.all.collect(t|t.getProject());
}

/*******PROYECTO*******/
//Metodo que construye el proyecto
operation snap!Application getProject(): java!Project {
	var p = new java!Project;
	var implems = new Set;
	var serInt = new java!Interface;
	serInt.name="Serializable";
	implems.add(serInt);
	p.name=self.name.toLowerCase().replace(" ","-")+"-war";
	p.packages=self.collect(c|c.getPackageApp())
	->includingAll(self.collect(d|d.getPackageRest()))
	;
	return p;
}

/*******PAQUETES*******/
//Metodo que construye los paquetes para las RestApp
operation snap!Application getPackageApp(): java!Package {
	var pa = new java!Package;
	pa.name="com.uniandes."+self.name.toLowerCase().replace(" ",".")+".web.app";
	pa.classes=self.getClassApp();
	return pa;
}

//Metodo que construye los paquetes para los RestService
operation snap!Application getPackageRest(): java!Package {
	var pa = new java!Package;
	var entities = new Set;
	pa.name="com.uniandes."+self.name.toLowerCase().replace(" ",".")+".web.rest";
	pa.classes=self.programs.collect(c|c.getClassRest(self.name.toLowerCase()));
	return pa;
}

/*******CLASES*******/
//Metodo que construye la clase del AppRest
operation snap!Application getClassApp(): Sequence {
	var class = new Sequence;
	var c = new java!Class;
	var ext1 = new java!Class;
	var attrs = new Set;
	var imports = new java!Import;
	var an = new java!Annotation;
	var at = new java!Attribute;
	var lt = new java!HashSet;
	var cRef = new java!Class;//Clase referencia para el tipo HashSet
	cRef.name="Class<?>";
	an.value="@ApplicationPath(\"rest\")";
	c.annotations.add(an);
	imports = new java!Import;
	imports.name = "java.util.HashSet";
	c.imports.add(imports);
	imports = new java!Import;
	imports.name = "java.util.Set";
	c.imports.add(imports);
	imports = new java!Import;
	imports.name = "javax.ws.rs.ApplicationPath";
	c.imports.add(imports);
	imports = new java!Import;
	imports.name = "javax.ws.rs.core.Application";
	c.imports.add(imports);
	c.name=self.name.toLowerCase().replace(" ","").firstToUpperCase()+"RestApp";
	ext1.name="Application";
	c.extend=ext1;
	for (p in self.programs){
		imports = new java!Import;
		imports.name = "com.uniandes."+self.name.toLowerCase().replace(" ",".")+".web.rest."+p.name.firstToUpperCase().replace(" ","")+"RestService";
		c.imports.add(imports);
		//for (e in p.entities){
		//	imports = new java!Import;
		//	imports.name = "com.uniandes."+self.name.toLowerCase().replace(" ",".")+".web.rest."+e.name.firstToUpperCase()+"RestService";
		//	c.imports.add(imports);
		//}
	}
	lt.typeOf=cRef;
	at.name = "resources";
	at.visibility=java!EVisibility#private;
	at.typeOf=lt;
	at.initialization = true;
	c.attributes.add(at);
	c.methods=self.getMethodRest();
	class.add(c);
	return class;
}

//Metodo que construye las clases service
operation snap!Program getClassRest(nameApp:String): java!Class {
	var c = new java!Class;
	var imp = new java!Import;
	var an = new java!Annotation;
	var nameProgramServiceLocal = self.name.replace(" ","").firstToLowerCase()+"ServiceLocal";
	var nameProgramServiceLocalUp = self.name.replace(" ","").firstToUpperCase()+"ServiceLocal";
	an.value="@Path(\"/"+self.name.replace(" ","").firstToLowerCase()+"\")";
	c.annotations.add(an);
	imp.name="java.util.List";
	c.imports.add(imp);
	imp = new java!Import;
	imp.name="javax.ejb.EJB";
	c.imports.add(imp);
	imp = new java!Import;
	imp.name="javax.ws.rs.Consumes";
	c.imports.add(imp);
	imp = new java!Import;
	imp.name="javax.ws.rs.GET";
	c.imports.add(imp);
	imp = new java!Import;
	imp.name="javax.ws.rs.POST";
	c.imports.add(imp);
	imp = new java!Import;
	imp.name="javax.ws.rs.PUT";
	c.imports.add(imp);
	imp = new java!Import;
	imp.name="javax.ws.rs.Path";
	c.imports.add(imp);
	imp = new java!Import;
	imp.name="javax.ws.rs.PathParam";
	c.imports.add(imp);
	imp = new java!Import;
	imp.name="javax.ws.rs.Produces";
	c.imports.add(imp);
	imp = new java!Import;
	imp.name="javax.ws.rs.core.MediaType";
	c.imports.add(imp);
	imp = new java!Import;
	imp.name="com.uniandes."+nameApp.replace(" ",".")+".service."+nameProgramServiceLocalUp;
	c.imports.add(imp);
	for(i in self.entities){
		imp = new java!Import;
		imp.name="com.uniandes."+nameApp.replace(" ",".")+".dto."+i.name.toLowerCase().firstToUpperCase()+"DTO";
		c.imports.add(imp);
	}
	c.name=self.name.replace(" ","").firstToUpperCase()+"RestService";
	c.attributes.add(self.getAttributeRest());
	c.methods=self.entities.collect(d|d.getEntityMethodCreateService(nameProgramServiceLocal))
	->includingAll(self.entities.collect(d|d.getEntityMethodUpdateService(nameProgramServiceLocal)))
	->includingAll(self.entities.collect(d|d.getEntityMethodDeleteService(nameProgramServiceLocal)))
	->includingAll(self.entities.collect(d|d.getEntityMethodListService(nameProgramServiceLocal)))
	;
	return c;
}

//Metodo que construye los metodos CRUD para el RestApp por cada entidad
operation snap!Entity getEntityMethodCreateService(nameModule:String) : java!Method {
	//crear con un DTO de entrada
	var m = new java!Method;
	var t = new java!PrimitiveType;
	var an = new java!Annotation;
	var nomUp = self.name.toLowerCase().firstToUpperCase();
	var nomLo =  self.name.toLowerCase().firstToLowerCase();
	an.value="@PUT";
	m.annotations.add(an);
	an = new java!Annotation;
	an.value="@Path(\"/create"+nomUp+"\")";
	m.annotations.add(an);
	an = new java!Annotation;
	an.value="@Consumes(MediaType.APPLICATION_JSON)";
	m.annotations.add(an);
	t.type=java!EJavaType#void;
	m.name="create"+nomUp;
	m.parameters=self.getParamsCRUDService();
	m.returns=t;
	m.content=m.content+nameModule+".create"+nomUp+"("+nomLo+"DTO);";
	return m;
}

//Metodo que construye los metodos CRUD para el servicio por cada entidad
operation snap!Entity getEntityMethodUpdateService(nameModule:String) : java!Method {
	//actualizar con un DTO de entrada
	var m = new java!Method;
	var t = new java!PrimitiveType;
	var an = new java!Annotation;
	var nomUp = self.name.toLowerCase().firstToUpperCase();
	var nomLo =  self.name.toLowerCase().firstToLowerCase();
	an.value="@PUT";
	m.annotations.add(an);
	an = new java!Annotation;
	an.value="@Path(\"/update"+nomUp+"\")";
	m.annotations.add(an);
	an = new java!Annotation;
	an.value="@Consumes(MediaType.APPLICATION_JSON)";
	m.annotations.add(an);
	t.type=java!EJavaType#void;
	m.name="update"+nomUp;
	m.parameters=self.getParamsCRUDService();
	m.returns=t;
	m.content=m.content+nameModule+".update"+nomUp+"("+nomLo+"DTO);";
	return m;
}

//Metodo que construye los metodos CRUD para el servicio por cada entidad
operation snap!Entity getEntityMethodDeleteService(nameModule:String) : java!Method {
	//eliminar con un DTO de entrada
	var m = new java!Method;
	var t = new java!PrimitiveType;
	var an = new java!Annotation;
	var nomUp = self.name.toLowerCase().firstToUpperCase();
	var nomLo =  self.name.toLowerCase().firstToLowerCase();
	an.value="@PUT";
	m.annotations.add(an);
	an = new java!Annotation;
	an.value="@Path(\"/delete"+nomUp+"\")";
	m.annotations.add(an);
	an = new java!Annotation;
	an.value="@Consumes(MediaType.APPLICATION_JSON)";
	m.annotations.add(an);
	t.type=java!EJavaType#void;
	m.name="delete"+nomUp;
	m.parameters=self.getParamsCRUDService();
	m.returns=t;
	m.content=m.content+nameModule+".delete"+nomUp+"("+nomLo+"DTO);";
	return m;
}

//Metodo que construye los metodos CRUD para el servicio por cada entidad
operation snap!Entity getEntityMethodListService(nameModule:String) : java!Method {
	//listar los registros para la Entity
	var m = new java!Method;
	var t = new java!PrimitiveType;
	var an = new java!Annotation;
	var nomUp = self.name.toLowerCase().firstToUpperCase();
	var nomLo =  self.name.toLowerCase().firstToLowerCase();
	var lt = new java!ArrayList;
	var cRef = new java!Class;
	cRef.name = nomUp+"DTO";
	lt.typeOf=cRef;
	m.returns=lt;
	an.value="@GET";
	m.annotations.add(an);
	an = new java!Annotation;
	an.value="@Path(\"/all"+nomUp+"\")";
	m.annotations.add(an);
	an = new java!Annotation;
	an.value="@Produces(MediaType.APPLICATION_JSON)";
	m.annotations.add(an);
	//t.type=java!EJavaType#void;
	m.name="getAll"+nomUp;
	m.parameters=self.getParamsCRUDService();
	//m.returns=t;
	m.content=m.content+"return "+nameModule+".getAll"+nomUp+"();";
	return m;
}

//Metodo que construye los metodos CRUD para el servicio por cada entidad
operation snap!Entity getParamsCRUDService() : Set {
	var params = new Set;
	var c = new java!Class;
	var at = new java!Parameter;
	c.name=self.name.toLowerCase().firstToUpperCase()+"DTO";
	at.name=self.name.toLowerCase()+"DTO";
	at.typeOf=c;
	params.add(at);
	return params;
}

//Metodo que construye las clases DAO
operation snap!Application getClassDAO(entities : Set): Set {
	var class = new Set;
	for (e in entities){
		var c = new java!Class;
		var cExt = new java!Class;
		var impl = new java!Interface;
		var imports = new java!Import;
		var an = new java!Annotation;
		an.value="@Stateless";
		c.annotations.add(an);
		an = new java!Annotation;
		an.value="@LocalBean";
		c.annotations.add(an);
		imports.name = "java.util.List";
		c.imports.add(imports);
		imports = new java!Import;
		imports.name = "javax.ejb.LocalBean";
		c.imports.add(imports);
		imports = new java!Import;
		imports.name = "javax.ejb.Stateless";
		c.imports.add(imports);
		imports = new java!Import;
		imports.name = "javax.persistence.Query";
		c.imports.add(imports);
		imports = new java!Import;
		imports.name = "com.uniandes."+self.name.toLowerCase().replace(" ",".")+".domain."+e.name;
		c.imports.add(imports);
		cExt.name="GenericDAO<"+e.name.firstToUpperCase()+">";
		impl.name=e.name.firstToUpperCase()+"DAOLocal";
		c.name=e.name.firstToUpperCase()+"DAO";
		c.extend=cExt;
		c.implements.add(impl);
		c.methods=e.getMethodDAO();
		class.add(c);
	}
	return class;
}

//Metodo que construye la clase generica para los DAO
operation snap!Application getClassGenericDAO(): java!Class {
	var c = new java!Class;
	var imports = new java!Import;
	var impl = new java!Interface;
	var an = new java!Annotation;
	an.value="@Stateless";
	imports.name = "java.lang.reflect.ParameterizedType";
	c.imports.add(imports);
	imports = new java!Import;
	imports.name = "javax.ejb.Stateless";
	c.imports.add(imports);
	imports = new java!Import;
	imports.name = "javax.persistence.EntityManager";
	c.imports.add(imports);
	imports = new java!Import;
	imports.name = "javax.persistence.PersistenceContext";
	c.imports.add(imports);
	c.annotations.add(an);
	c.name="GenericDAO<T>";
	impl.name="GenericDAOLocal<T>";
	c.implements.add(impl);
	c.attributes.add(self.getGenericDAOAttribute());
	c.methods=self.getMethodClassGenericDAO();
	return c;
}

//Metodo para construir el atributo para la clase GenericDAO
operation snap!Application getGenericDAOAttribute() : java!Attribute{
	var a = new java!Attribute;
	var an = new java!Annotation;
	var t = new java!PrimitiveType;
	an.value="@PersistenceContext(unitName = \""+self.name.replace(" ","").firstToLowerCase()+"\")";
	a.name="em";
	a.visibility=java!EVisibility#protected;
	a.annotations.add(an);
	t.type=java!EJavaType#EntityManager;
	a.typeOf=t;
	return a;
}

//Metodo que construye las clases DTO
operation snap!Entity getClassDTO(implems:Set): java!Class {
	var c = new java!Class;
	var attrs = new Set;
	var imports = new java!Import;
	imports.name = "java.io.Serializable";
	c.imports.add(imports);
	imports = new java!Import;
	imports.name = "java.util.ArrayList";
	c.imports.add(imports);
	c.name=self.name+"DTO";
	c.implements=implems;
	c.attributes=self.attributes.collect(c|c.getAttributeDTO());
	c.methods=self.getMethodDTO();
	return c;
}

/*******INTERFACES*******/
//Metodo que construye las interfaces DAO
operation snap!Application getInterfaceDAO(entities : Set): Set {
	var interfaces = new Set;
	for (e in entities){
		var c = new java!Interface;
		var cExt = new java!Class;
		var imports = new java!Import;
		var an = new java!Annotation;
		an.value="@Local";
		imports.name = "java.util.List";
		c.imports.add(imports);
		imports = new java!Import;
		imports.name = "javax.ejb.Local";
		c.imports.add(imports);
		imports = new java!Import;
		imports.name = "com.uniandes."+self.name.toLowerCase().replace(" ",".")+".domain."+e.name.toLowerCase().firstToUpperCase();
		c.imports.add(imports);
		cExt.name="GenericDAOLocal<"+e.name.firstToUpperCase()+">";
		c.name=e.name.toLowerCase().firstToUpperCase()+"DAOLocal";
		c.annotations.add(an);
		c.extend=cExt;
		c.methods=e.getMethodIntDAO();
		interfaces.add(c);
	}
	return interfaces;
}

//Metodo que construye las interfaz Generica de los DAO
operation snap!Application getIntGenericDAO(): java!Interface {
	var c = new java!Interface;
	var imports = new java!Import;
	var an = new java!Annotation;
	an.value="@Local";
	imports.name = "javax.ejb.Local";
	c.imports.add(imports);
	c.annotations.add(an);
	c.name="GenericDAOLocal<T>";
	c.methods=self.getMethodIntGenericDAO();
	return c;
}

/*******ATRIBUTOS-CLASES*******/
//Metodo que construye los atributos Entity
operation snap!Attribute getAttribute(): java!Attribute {
	var a = new java!Attribute;
	a.name=self.description.replace(" ","").firstToLowerCase();
	a.visibility=java!EVisibility#private;
	a.typeOf=self.getPrimitiveType();
	return a;
}

//Metodo que construye los atributos para los modulos
operation snap!Program getAttributeRest(): java!Attribute{
	var a = new java!Attribute;
	var cType = new java!Class;
	var an = new java!Annotation;
	an.value="@EJB";
	cType.name = self.name.replace(" ","").firstToUpperCase()+"ServiceLocal";
	a.name=self.name.replace(" ","").firstToLowerCase()+"ServiceLocal";
	a.visibility=java!EVisibility#private;
	a.typeOf=cType;
	a.annotations.add(an);
	return a;
} 

//Metodo que construye los atributos de las clases DTO
operation snap!Attribute getAttributeDTO(): java!Attribute {
	var a = new java!Attribute;
	a.name=self.description.replace(" ","").firstToLowerCase();
	a.visibility=java!EVisibility#private;
	a.typeOf=self.getPrimitiveType();
	return a;
}

/*******METODOS*******/
//Metodo que construye los metodos del RestApp
operation snap!Application getMethodRest(): Set {
	var methods = new Set;
	var m = new java!Method;
	m.name=self.name.toLowerCase().replace(" ","").firstToUpperCase()+"RestApp";
	m.visibility=java!EVisibility#public;
	for (p in self.programs){
		m.content=m.content+"resources.add("+p.name.firstToUpperCase().replace(" ","")+"RestService.class);\n";
		//for (e in p.entities){
			//m.content=m.content+"resources.add("+e.name.firstToUpperCase()+"RestService.class);\n";
		//}
	}
	methods.add(m);
	m = new java!Method;
	m.name="getClasses";
	var an = new java!Annotation;
	var lt = new java!HashSet;
	var cRef = new java!Class;//Clase referencia para el tipo HashSet
	cRef.name="Class<?>";
	an.value="@Override";
	lt.typeOf=cRef;
	m.annotations.add(an);
	m.returns=lt;
	m.visibility=java!EVisibility#public;
	m.content="return resources;";
	methods.add(m);
	return methods;
}

//Metodo que construye los metodos para los modulos
operation snap!Program getMethodService(nameApp:String): Set {
	var methods = new Set;
	var m = new java!Method;
	m.name=self.name.replace(" ","").firstToUpperCase()+"Service";
	m.visibility=java!EVisibility#public;
	methods.add(m);
	for (mod in self.modules){
		var m = new java!Method;
		var t = new java!PrimitiveType;
		t.type=java!EJavaType#void;
		m.name=nameApp.replace(" ","")+mod.name.firstToUpperCase();
		m.visibility=java!EVisibility#public;
		m.returns=t;
		m.content=mod.block.content;
		methods.add(m);
	}
	return methods;
}

//Metodo que construye los metodos de las clases DTO
operation snap!Entity getMethodDTO(): Set {
	var methods = new Set;
	var m = new java!Method;
	m.name=self.name.firstToUpperCase()+"DTO";
	m.visibility=java!EVisibility#public;
	methods.add(m);
	for (at in self.attributes){
		var params = new Sequence;
		var m = new java!Method;
		m.name="get"+at.description.replace(" ","").firstToUpperCase();
		m.visibility=java!EVisibility#public;
		m.returns=at.getPrimitiveType();
		m.content="return this."+at.description.replace(" ","").firstToLowerCase()+";";
		methods.add(m);
		var m = new java!Method;
		var t = new java!PrimitiveType;
		t.type=java!EJavaType#void;
		m.name="set"+at.description.replace(" ","").firstToUpperCase();
		m.visibility=java!EVisibility#public;
		m.returns=t;
		params.add(at.getAttribute());
		m.parameters=params;
		m.content="this."+at.description.replace(" ","").firstToLowerCase()+" = "+at.description.replace(" ","").firstToLowerCase()+";";
		methods.add(m);
	}
	return methods;
}

//Metodo que construye los metodos de las clases DAO
operation snap!Entity getMethodDAO(): Set {
	var methods = new Set;
	var m = new java!Method;
	var lt = new java!ArrayList;
	var cRef = new java!Class;//Clase referencia para el tipo Lista
	var an = new java!Annotation;
	an.value="@Override";
	m.name=self.name.firstToUpperCase()+"DAO";
	m.visibility=java!EVisibility#public;
	methods.add(m);
	m = new java!Method;
	m.name="get"+self.name.firstToUpperCase();
	m.visibility=java!EVisibility#public;
	m.content="Query q = em.createQuery(\"SELECT p FROM "+self.name.firstToUpperCase()+" p\");";
	m.content=m.content+"\nList<"+self.name.firstToUpperCase()+"> a = q.getResultList();";
	m.content=m.content+"\nreturn a;";
	cRef.name = self.name.firstToUpperCase();
	lt.typeOf=cRef;
	m.returns=lt;
	m.annotations.add(an);
	methods.add(m);
	return methods;
}

//Metodo que construye los metodos de las Interfaces DAO
operation snap!Entity getMethodIntDAO(): Set {
	var methods = new Set;
	var m = new java!Method;
	var lt = new java!ArrayList;
	var cRef = new java!Class;//Clase referencia para el tipo Lista
	m.name=self.name.firstToUpperCase()+"DAO";
	m.visibility=java!EVisibility#public;
	methods.add(m);
	m = new java!Method;
	m.name="get"+self.name.firstToUpperCase();
	m.visibility=java!EVisibility#public;
	cRef.name = self.name.firstToUpperCase();
	lt.typeOf=cRef;
	m.returns=lt;
	methods.add(m);
	return methods;
}

//Metodo que construye los metodos de las Interfaces DAO
operation snap!Application getMethodClassGenericDAO(): Set {
	var methods = new Set;
	//Metodo crear
	var m = new java!Method;
	var t = new java!PrimitiveType;
	var an = new java!Annotation;
	an.value="@Override";
    t.type=java!EJavaType#void;
    m.annotations.add(an);
	m.name="create";
	m.visibility=java!EVisibility#public;
	m.returns=t;
	m.parameters.add(self.getGenericParam(true));
	m.content="em.persist(p)";
	methods.add(m);
	//Metodo editar
	m = new java!Method;
	t = new java!PrimitiveType;
	an = new java!Annotation;
	an.value="@Override";
    t.type=java!EJavaType#void;
    m.annotations.add(an);
	m.name="edit";
	m.visibility=java!EVisibility#public;
	m.returns=t;
	m.parameters.add(self.getGenericParam(true));
	m.content="em.merge(p)";
	methods.add(m);
	//Metodo delete
	m = new java!Method;
	t = new java!PrimitiveType;
	an = new java!Annotation;
	an.value="@Override";
    t.type=java!EJavaType#void;
    m.annotations.add(an);
	m.name="delete";
	m.visibility=java!EVisibility#public;
	m.returns=t;
	m.parameters.add(self.getGenericParam(true));
	m.content="em.remove(em.merge(p))";
	methods.add(m);
	//Metodo searchById
	m = new java!Method;
	t = new java!PrimitiveType;
	an = new java!Annotation;
	an.value="@Override";
    t.type=java!EJavaType#T;
    m.annotations.add(an);
	m.name="searchById";
	m.visibility=java!EVisibility#public;
	m.returns=t;
	m.parameters.add(self.getGenericParam(false));
	m.content="Class<T> classEntity = (Class<T>) ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[0];";
	m.content=m.content+"\nreturn em.find(classEntity, p);";
	methods.add(m);
	return methods;
}

//Metodo que construye los metodos de las Interfaces DAO
operation snap!Application getMethodIntGenericDAO(): Set {
	var methods = new Set;
	//Metodo crear
	var m = new java!Method;
	var t = new java!PrimitiveType;
    t.type=java!EJavaType#void;
	m.name="create";
	m.visibility=java!EVisibility#public;
	m.returns=t;
	m.parameters.add(self.getGenericParam(true));
	methods.add(m);
	//Metodo editar
	m = new java!Method;
	t = new java!PrimitiveType;
    t.type=java!EJavaType#void;
	m.name="edit";
	m.visibility=java!EVisibility#public;
	m.returns=t;
	m.parameters.add(self.getGenericParam(true));
	methods.add(m);
	//Metodo delete
	m = new java!Method;
	t = new java!PrimitiveType;
    t.type=java!EJavaType#void;
	m.name="delete";
	m.visibility=java!EVisibility#public;
	m.returns=t;
	m.parameters.add(self.getGenericParam(true));
	methods.add(m);
	//Metodo searchById
	m = new java!Method;
	t = new java!PrimitiveType;
    t.type=java!EJavaType#T;
	m.name="searchById";
	m.visibility=java!EVisibility#public;
	m.returns=t;
	m.parameters.add(self.getGenericParam(false));
	methods.add(m);
	return methods;
}

/*******PARAMS-METHODS********/
//Metodo que construye los parametros de los metodos de la interfaz y clase generic
operation snap!Application getGenericParam(isT : Boolean): java!Attribute {
	var at = new java!Attribute;
	var tAt = new java!PrimitiveType;
	if (isT){
		tAt.type=java!EJavaType#T;
		at.name="p";
		at.typeOf=tAt;
	} else {
		tAt.type=java!EJavaType#Object;
		at.name="p";
		at.typeOf=tAt;
	}
	return at;
}

//Metodo que construye los parametros para los metodos convert en la clase Util
operation snap!Entity getParams(isDTO : Boolean): Set {
	var params = new Set;
	var attrDTO = new java!Attribute;
	var attrDom = new java!Attribute;
	var cDTO = new java!Class;
	var cDom = new java!Class;
	attrDTO.name = self.name.firstToLowerCase()+"DTO";
	cDTO.name = self.name.firstToUpperCase()+"DTO";
	attrDTO.typeOf=cDTO;
	attrDom.name = self.name.firstToLowerCase();
	cDom.name = self.name.firstToUpperCase();
	attrDom.typeOf=cDom;
	if (isDTO){
		params.add(attrDTO);
		params.add(attrDom);
	} else{
		params.add(attrDom);
		params.add(attrDTO);
	}
	return params;
}

/*******CONTENIDO-METODOS-UTILS********/
//Metodo que construye el contenido de los metodos para la clase utils
operation snap!Entity getContentToDTO(): String {
	var content = new String;
	var className=self.name.firstToLowerCase();
	for (a in self.attributes){
		var name = a.description.replace(" ","").firstToUpperCase();
		content=content+className+"DTO.set"+name+"("+className+".get"+name+"());\n";
	}
	return content;
}

//Metodo que construye el contenido de los metodos para la clase utils
operation snap!Entity getContentToDomain(): String {
	var content = new String;
	var className=self.name.firstToLowerCase();
	for (a in self.attributes){
		var name = a.description.replace(" ","").firstToUpperCase();
		content=content+className+".set"+name+"("+className+"DTO.get"+name+"());\n";
	}
	return content;
	return content;
}

/*******UTILS*******/
//Metodo para el mapeo de tipos primitivos
operation snap!Attribute getPrimitiveType(): java!PrimitiveType{
	if(self.dataType <> null){
		var t = new java!PrimitiveType;
		//if(self.dataType == 0 or self.dataType == 1){
		//String corresponde al 0 y 1
		t.type=java!EJavaType#String;
		//} else if (self.dataType==2){
		//int corresponde al 2
		//	t.type=java!EJavaType#int;
		//}
		return t;
	}
}
/*******************************************************************************
 * Copyright (c) 2011 Universidad de los Andes
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * Version:
 *		$Id: ServiceToPort.etl 445 2011-10-21 14:39:12Z hhoyos $
 * Contributors:
 *		Horacio Hoyos - initial API and implementation 
 ******************************************************************************/
import "helpers/HiLeS2VhdlTypes.eol";

/****r* HiLeSToVDHLAMS/PortToInterfaceTerminal
 * SUMMARY
 *   Transform a HiLeS:Port into a Vhdl:Port. The specific type of port would
 *  depend on the type of the payload that connects to the port. ($Rev: 807 $)
 * DESCRIPTION 
 *   Create a vhdl!Port for each hiles!Port The actual port type would depend 
 * on the type of the payload that connects to the port and is decided
 * by guard on derived rules.
 * SEE ALSO
 *
 * DOMAIN
 * 		* HiLeS	 - http://hiles.uniandes.edu.co/1.1/HiLeS
 *   	* Vhdl   - http://hiles.uniandes.edu.co/1.1/vhdl-ams
 *
 *****
 */
rule PortToInterfaceTerminal
	transform port : HiLeS!Port
	to signal : Vhdl!InterfaceTerminal
	{
		// If the port owner is a strucutral, the type of signal is retreived
		// from the type of a payload in the block's inner architecure that
		// connects to the port's matching service. If the block is a functional
		// then the type of signal is retreived from the type of a payload in the
		// block's parent architecture that is connected to the port. 
		guard
		{
			var pl : HiLeS!Payload;
			if(port.owner.isTypeOf(HiLeS!Functional) or port.owner.isTypeOf(HiLeS!Decision))
			{
				pl = port.owner.parentArchitecture.payload.selectOne(pl
						| (pl.target = port) or (pl.source = port)
						);
				return pl.isDefined() and pl.type.isTerminalType();
			}
			else
			{
				pl = port.owner.innerArchitecture.payload.selectOne(pl
						| (pl.target.name = port.name) or (pl.source.name = port.name)
						);
				return pl.isDefined() and pl.type.isTerminalType();
			}
			
		}
		// TODO: Crear una nueva regla para los tipos definidos por el usuario?
		signal.identifier = port.name;
		signal.subnature = new Vhdl!Subnature;
		// For vectors, in the entity template if the size is > 1 the "_vector" is 
		// appended to the terminal type.
		switch( pl.type)
			{
				case("electrical") : signal.subnature.nature = Vhdl!Natures#electrical;
				case("magnetic") : signal.subnature.nature = Vhdl!Natures#magnetic;
				case("translational") : signal.subnature.nature = Vhdl!Natures#translational;
				case("radiant") : signal.subnature.nature = Vhdl!Natures#radiant;
				case("tranlational_v") : signal.subnature.nature = Vhdl!Natures#tranlational_v;
				case("fluidic") : signal.subnature.nature = Vhdl!Natures#fluidic;
				case("rotational_v") : signal.subnature.nature = Vhdl!Natures#rotational_v;
				case("thermal") : signal.nature.subnature = Vhdl!Natures#thermal;
				case("rotational") : signal.nature.subnature = Vhdl!Natures#rotational;
			}
		if(port.size <> 1)
		{
			signal.subnature.range = new Vhdl!Range;
			signal.subnature.range.begin = port.size-1;
			signal.subnature.range.direction = Vhdl!RangeDirection#downto;
			signal.subnature.range.end = 0;
		}
	}
 
/*******************************************************************************
 * Copyright (c) 2014 The University of York and Willink Transformations.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Horacio Hoyos - initial implementation
 ******************************************************************************/
import "../helpers/QVTHelpers.eol";
import "../helpers/QVTsHelpers.eol";

pre {
    var emfTool = new Native("org.eclipse.epsilon.emc.emf.tools.EmfTool");
}

//=============== QVTp to QVTi (just copy)  ===============

rule ImperativeModel
    transform mIn : QVTp!ImperativeModel
    to mOut : QVTi!ImperativeModel
    {
        
        mOut.externalURI = mIn.externalURI.replace(".qvtp.qvti", ".qvti");
        mOut.ownedImports ::= mIn.ownedImports;
        mOut.ownedPackages.addAll(mIn.ownedPackages.equivalent());
        // Copy the OCL types package
        //mOut.ownedPackages.add(emfTool.getEcoreUtil().copy(mIn.ownedPackages.selectOne(p | p.isTypeOf(QVTp!Package))));
    }

rule Imports
	transform s : QVTp!Import
	to t : QVTi!Import
	extends NamedElements
	{
	
	t.importedNamespace = s.importedNamespace;
}

rule Packages 
	transform s : QVTp!Package
	to t : QVTi!Package 
	extends NamedElements
	{
	
	-- We only want to copy the package containing the transformation
	guard : s.ownedClasses.exists(x | x.isKindOf(QVTp!Transformation))
	 
	t.nsPrefix = s.nsPrefix;
	t.URI = s.URI;
	t.ownedClasses ::= s.ownedClasses;
}

@abstract
rule NamedElements
    transform eIn : QVTp!NamedElement
    to eOut : QVTi!NamedElement
    {
        eOut.name = eIn.name;
    }

rule TypedModels
    transform tmIn : QVTp!TypedModel
    to tmOut : QVTi!TypedModel
    extends NamedElements
    {
        tmOut.usedPackage = tmIn.usedPackage;
        tmOut.dependsOn.addAll(tmIn.dependsOn.equivalent());    
    }
    
rule Transformations
    transform tIn : QVTp!Transformation
    to tOut : QVTi!Transformation
    extends NamedElements
    {
        tOut.ownedTag = emfTool.getEcoreUtil().copyAll(tIn.ownedTag);
        tOut.modelParameter.addAll(tIn.modelParameter.equivalent());
        tOut.`rule`.addAll(tIn.`rule`.equivalent());
        tOut.`extends` ::= tIn.`extends`;
    }

@abstract
rule Rules
    transform rIn : QVTp!Rule
    to rOut : QVTi!Rule
    extends NamedElements
    {
        rOut.domain.addAll(rIn.domain.equivalent());
        rOut.overrides ::= rIn.overrides;
        rOut.overridden.addAll(rIn.overridden.equivalent());
    }

@abstract
rule Areas
    transform aIn : QVTp!Area
    to aOut : QVTi!Area
    {
        aOut.guardPattern ::= aIn.guardPattern;
        aOut.bottomPattern ::= aIn.bottomPattern;
    }

rule Mappings
    transform mIn : QVTp!Mapping
    to mOut : QVTi!Mapping
    extends Rules, Areas
    {
        
        //mIn.name.println("Mappings " );
        var ma = QVTs!MappingAction.all().selectOne(ma | ma.mapping.name == mIn.name); 
        if (not ma.children.isEmpty()) {
            mOut.mappingStatement = new QVTi!MappingSequence;
            // Do it with a for to respect the ordering
            for (c in ma.children) {
            	//c.mapping.name.println("child ");
	        	if (not c.parameterDerivations.exists(pd | pd.secondaryParameter.isLoop)) {
	        		mOut.mappingStatement.mappingStatements.add(c.equivalent());	
	        	} else {
	        		mOut.mappingStatement.mappingStatements.addAll(
	        				c.parameterDerivations.select(pd | pd.secondaryParameter.isLoop).collect(pd | pd.secondaryParameter.equivalent())
        					.flatten().select(ms | ms.eContainer.isUndefined()));
	        	}
	       	}
        }
    }

@abstract
rule Domains
    transform dIn : QVTp!Domain
    to dOut : QVTi!Domain
    extends NamedElements
    {
        dOut.isCheckable = dIn.isCheckable;
        dOut.isEnforceable = dIn.isEnforceable;
        dOut.typedModel ::= dIn.typedModel;
    } 

rule CoreDomains
    transform cdIn : QVTp!CoreDomain
    to cdOut : QVTp!CoreDomain
    extends Domains, Areas
    {
    }

@abstract        
rule Patterns
    transform pIn : QVTp!Pattern
    to pOut : QVTi!Pattern
    {
        pOut.predicate.addAll(pIn.predicate.equivalent());
        pOut.bindsTo.addAll(pIn.bindsTo.equivalent());
    }

@abstract
rule CorePatterns
    transform cpIn : QVTp!CorePattern
    to cpOut : QVTi!CorePattern
    extends Patterns
    {
    
        cpOut.variable.addAll(cpIn.variable.equivalent());
    }        
    
rule BottomPatterns
    transform bpIn : QVTp!BottomPattern
    to bpOut : QVTi!BottomPattern
    extends CorePatterns
    {
        bpOut.assignment.addAll(bpIn.assignment.equivalent());
        bpOut.enforcementOperation.addAll(bpIn.enforcementOperation.equivalent());
        bpOut.variable.addAll(bpIn.variable.equivalent());
        bpOut.realizedVariable.addAll(bpIn.realizedVariable.equivalent());
    }

 rule GuardPatterns
    transform gpIn : QVTp!GuardPattern
    to gpOut : QVTi!GuardPattern
    extends CorePatterns
    {
        
    }

@abstract
rule Assignments
    transform aIn : QVTp!Assignment
    to aOut : QVTi!Assignemnt
    {
        aOut.isDefault = aIn.isDefault;
        aOut.value = emfTool.getEcoreUtil().copy(aIn.value);
        var vars;
        if (aIn.bottomPattern.area.isTypeOf(QVTi!CoreDomain)) {
            vars = aIn.bottomPattern.area.`rule`.getAllVariables().equivalent();
        } else {
            vars = aIn.bottomPattern.area.getAllVariables().equivalent();
        }
    }

rule PropertyAssignments
    transform paIn : QVTp!PropertyAssignment
    to paOut : QVTi!PropertyAssignment
    extends Assignments
    {
        paOut.slotExpression = emfTool.getEcoreUtil().copy(paIn.slotExpression);
        paOut.targetProperty = paIn.targetProperty;
        var vars;
        if (paIn.bottomPattern.area.isTypeOf(QVTi!CoreDomain)) {
            vars = paIn.bottomPattern.area.`rule`.getAllVariables().equivalent();
        } else {
            vars = paIn.bottomPattern.area.getAllVariables().equivalent();
        }
    }


rule VariableAssignments
    transform vaIn : QVTp!VariableAssignment
    to vaOut : QVTi!VariableAssignment
    extends Assignments
    {
        vaOut.targetVariable ::= vaIn.targetVariable;
    }

rule Predicates
    transform pIn : QVTp!Predicate
    to pOut : QVTi!Predicate
    {
        pOut.conditionExpression = emfTool.getEcoreUtil().copy(pIn.conditionExpression);
        var vars;
        if (pIn.pattern.area.isTypeOf(QVTi!CoreDomain)) {
            vars = pIn.pattern.area.`rule`.getAllVariables().equivalent();
        } else {
            vars = pIn.pattern.area.getAllVariables().equivalent();
        }
    }
     
rule Variables
    transform vIn : QVTp!Variable
    to vOut : QVTi!Variable
    extends NamedElements
    {
    	-- We want to prevent re-creation of variables which are cloned 
    	-- from OCL expressions (via EcoreUtil). Let's excludes all those
    	-- directly contained in an OCLExpression (IteratorExp, LetExp, etc.)
    	-- ExpressionInOCL containers are also removed, in case the QVTp transformation
    	-- redfers to other OCL resources 
        guard { var varContainer = vIn.eContainer();
        		return (not varContainer.isKindOf(QVTp!OCLExpression)) and
        			   (not varContainer.isKindOf(QVTp!ExpressionInOCL));
        }
        vOut.isImplicit = vIn.isImplicit;
        vOut.type = vIn.type;
        if (vIn.ownedInit.isDefined()) {
        	vOut.ownedInit = emfTool.getEcoreUtil().copy(vIn.ownedInit);
        }
    }
    
rule RealizedVariables
    transform vIn : QVTp!RealizedVariable
    to vOut : QVTi!RealizedVariable
    extends NamedElements
    {

        vOut.isImplicit = vIn.isImplicit;
        vOut.type = vIn.type;
    }

//=============== QVTs to QVTi (add mapping calls)  ===============

rule RootMappingAction
	transform ma : QVTs!MappingAction
    to m : QVTi!Mapping
    {
    	guard : ma.parent.isUndefined() and ma.order = 0
    	
    	m.name = "__root__";
    	m.transformation ::= QVTp!Transformation.all.first();
    	//"Adding root".println();
    	m.guardPattern = new QVTi!GuardPattern;
    	m.bottomPattern = new QVTi!BottomPattern;
    	// All mappings in the root should be nested inside loops    
	    m.mappingStatement = new QVTi!MappingSequence;
        if (not ma.children.select(c | not c.parameterDerivations.exists(pd | pd.secondaryParameter.isLoop)).isEmpty()) {
        	"Root has a child which is not a loop".errln();
        }
        for (c in ma.children) {
        	//c.mapping.name.println("Child ");
        	m.mappingStatement.mappingStatements.addAll(
        			c.parameterDerivations.select(pd | pd.secondaryParameter.isLoop).collect(pd | pd.secondaryParameter.equivalent())
        			.flatten().select(ms | ms.eContainer.isUndefined()));
        }
    }


rule MappingActions
    transform ma : QVTs!MappingAction
    to mc : QVTi!MappingCall
    {
        guard : ma.parent.isDefined()
        
        //ma.mapping.name.println("ma ");
        mc.referredMapping ::= QVTp!Mapping.all().selectOne(m | ma.mapping.name == m.name);
        mc.binding.addAll(ma.parameters.equivalent());
        for (p in ma.parameters.select(dp | not dp.secondaryParameter.isDefined())) {
        	//p.variable.toString().println("param ");
        	var binding = p.equivalent();
        	//binding.println("biding ");
        	//ma.parent.getAllContextDataParameters(p.variable.type).println("context ");
        	binding.value.referredVariable ::= ma.parent.getAllContextDataParameters(p.variable.type).first().variable.getSameVariable();
        	binding.value.type = binding.value.referredVariable.type;
        }
    }

// Non loop variables can be bound directly from the primary parameter
rule DerivedDataParameter
    transform dp : QVTs!DataParameter
    to cb : QVTi!MappingCallBinding
    {
        guard : dp.secondaryParameter.isDefined()
        	and not dp.secondaryParameter.isLoop
        	and dp.secondaryParameter.derivation.primaryParameter.isDefined()
        	 
        cb.boundVariable ::= dp.variable.getSameVariable();
        cb.value = dp.secondaryParameter.getNavigationExp();
    }

// Loop variables need to be derived form the loop iterator
rule DerivedLoopDataParameter
    transform dp : QVTs!DataParameter
    to cb : QVTi!MappingCallBinding
    {
        guard : dp.secondaryParameter.isDefined()
        	and dp.secondaryParameter.isLoop
        	 
        cb.boundVariable ::= dp.variable.getSameVariable();
        cb.value = new QVTi!VariableExp;
        cb.value.referredVariable = dp.secondaryParameter.equivalent().ownedIterators.first();
        cb.value.type = cb.value.referredVariable.type;
    }

rule PrimaryDataParameter
    transform dp : QVTs!DataParameter
    to cb : QVTi!MappingCallBinding
    {
        guard : not dp.secondaryParameter.isDefined() and not dp.variable.isTypeOf(QVTs!RealizedVariable)
        
        cb.boundVariable ::= dp.variable.getSameVariable();
        cb.value = new QVTi!VariableExp;
        // refferedVariable assigned by the invoking mapping
    }
    
    
rule BindingLoops
	transform sp : QVTs!SecondaryParameter
	to loop : QVTi!MappingLoop
	{
		guard : sp.isLoop
		
		//sp.dataParameter.variable.name.println("BindingLoops ");
        if (sp.derivation.primaryParameter.isUndefined()) {
        	// for dp.v : <dp.v.type> in <dp.v.type>.allInstances()
        	//"allInstances".println();
        	var it = new QVTi!Variable;
	        it.name = sp.dataParameter.variable.name;
	        it.type = sp.dataParameter.variable.type;
	        loop.ownedIterators.add(it);
        	var exp = new QVTi!OperationCallExp;
        	exp.referredOperation = getOclElementAllInstancesOp();
	        exp.ownedSource = new QVTi!TypeExp;
	        exp.ownedSource.referredType = it.type;
	        exp.ownedSource.type = it.type;
	        exp.type = getSet(it.type);
	        loop.ownedSource = exp;
        } else {
        	var sourveVarExp = sp.getNavigationExp();
        	// The containement property may be the exact type or a supertype of the variable we are binding
        	// The property must be a collection, so we need to check the elements type
        	if (sp.derivationProperty.type.elementType == sp.dataParameter.variable.type) {
        		// for dp.v in pp.property 
        		//"directLoop".println();
        		var it = new QVTi!Variable;
		        it.name = sp.dataParameter.variable.name;
		        it.type = sp.dataParameter.variable.type;
		        loop.ownedIterators.add(it);
		        loop.ownedSource = sourveVarExp;
        	} else {
        		//for child in pp.property->select(e | e.oclIsTypeOf(dp.v.type))
        		//"selectLoop".println();
        		var it = new QVTi!Variable;
		        it.name = sp.dataParameter.variable.type.name.toLowerCase();
		        it.type = sp.dataParameter.variable.type;
		        loop.ownedIterators.add(it);
		        
        		var exp = new QVTi!IteratorExp;
	        	exp.type = sp.derivationProperty.type;
	        	exp.ownedSource = sourveVarExp;
		        exp.ownedBody = new QVTi!OperationCallExp;
		        exp.ownedBody.type = getPrimitiveTypeByName("Boolean");
		        var bodyIt = new QVTi!Variable;
		        bodyIt.name = sp.derivationProperty.name.charAt(0).asString();
		        bodyIt.type = sp.derivationProperty.type.elementType;
		        exp.ownedBody.ownedSource = new QVTi!VariableExp;
		        exp.ownedBody.ownedSource.referredVariable = bodyIt;
		        exp.ownedBody.ownedSource.type = bodyIt.type;
		        var argument = new QVTi!TypeExp;
		        argument.type = getClassByName("Class");
		        argument.referredType = it.type;
		        exp.ownedBody.ownedArguments.add(argument);
		        exp.ownedBody.referredOperation = getOclAnyOperation("oclIsTypeOf");
		        
		        exp.ownedIterators.add(bodyIt);
		        exp.referredIteration = getSelectIterator();
		        loop.ownedSource = exp;
       		}
        }
        loop.ownedBody = new QVTi!MappingSequence;
        
        //"Nesting loops".println();
        // We can eiter nest the maping call or another loop
        // 1. Search for other loops that have already a nest
        var innerLoop = sp.derivation.target.parameterDerivations.secondaryParameter
        		.select(p | p <> sp and p.isLoop).equivalent().selectOne(l | not l.ownedBody.mappingStatements.isEmpty());
        if (innerLoop.isDefined() and innerLoop.eContainer.isUndefined()) {
       		//"Loop in Loop.".println(); 
        	loop.ownedBody.mappingStatements.add(innerLoop);
        } else {
        	var ms = sp.derivation.target.equivalent();	
	        // sp.derivation.target.mapping.name.println(sp.dataParameter.variable.name + " sp mapping ");
	        //ms.eContainer.println(sp.dataParameter.variable.name + " sp.derivation.target.eq container: ");
	        if (ms.eContainer.isUndefined()) {
	        	//"MapCall in Loop.".println();
	        	loop.ownedBody.mappingStatements.add(ms);
	        } 	
	    }
	}

@cached
operation QVTs!Variable getSameVariable() : QVTp!Variable {
    return QVTp!Variable.all.selectOne(v | QVTp.getElementId(v) == QVTs.getElementId(self));
} 

operation QVTs!SecondaryParameter getNavigationExp() : QVTi!OCLExpression {

	//self.dataParameter.variable.name.println("getNavigationExp ");
	var derivationExp;
	if (self.derivationProperty.isDefined()) {
		//self.dataParameter.variable.name.println("derivationProperty.isDefined ");
		//self.derivationProperty.name.println("prop ");
		if (self.derivationProperty.isIsImplicit()) {
			derivationExp = new QVTi!OppositePropertyCallExp;
			derivationExp.referredProperty = self.derivationProperty.opposite;
		}
		else {
			derivationExp = new QVTi!PropertyCallExp;
			derivationExp.referredProperty = self.derivationProperty;
		}
		derivationExp.type = self.derivationProperty.type;
		if (self.derivation.primaryParameter.secondaryParameter.isDefined()) {    // The primary parameter is derived too
			if (self.derivation.primaryParameter.secondaryParameter.isLoop) {
				//self.dataParameter.variable.name.println("End Rec with iterator ");
				var sourceVar = self.derivation.primaryParameter.secondaryParameter.equivalent().ownedIterators.first();
				var sourceExp = new QVTi!VariableExp;
                sourceExp.referredVariable = sourceVar;
                sourceExp.type = sourceVar.type;
                derivationExp.ownedSource = sourceExp;
			} else {
				//self.dataParameter.variable.name.println("source = getNavigationExp ");
				var primNavExp = self.derivation.primaryParameter.secondaryParameter.getNavigationExp();
				// If the type of the PrimaryParameter's derivation expression is different thatn the type of
				// the  PrimaryParameter's variable we need a cast or a select
				if (primNavExp.type <> self.derivation.primaryParameter.variable.type) {
				    // If the secondary paramter is a loop, we need an if
				    if (self.isLoop) {
				        // if primNavExp.oclIsTypeOf(pp.v.type) then primNavExp.oclAsType(pp.v.type).attributes else Set{} endif
				        var ifExp = new QVTi!IfExp;
				        ifExp.type = getClassByName("UniqueCollection");
				        // If
				        var condExp = new QVTi!OperationCallExp;
				        condExp.type = getPrimitiveTypeByName("Boolean");
				        condExp.ownedSource = primNavExp;
				        condExp.referredOperation = getOclAnyOperation("oclIsTypeOf");
				        var typeExp = new QVTi!TypeExp;
                        typeExp.referredType = self.derivation.primaryParameter.variable.type;
                        typeExp.type = getClassByName("Class");
                        condExp.ownedArguments.add(typeExp);
                        ifExp.ownedCondition = condExp;
                        // Then
                        var thenExp = emfTool.getEcoreUtil().copy(derivationExp);
                        var castExp = new QVTi!OperationCallExp;
                        castExp.referredOperation = getOclAnyOperation("oclAsType");
                        castExp.ownedSource = primNavExp;
                        var typeExp = new QVTi!TypeExp;
                        typeExp.referredType = self.derivation.primaryParameter.variable.type;
                        typeExp.type = getClassByName("Class");
                        castExp.type = typeExp.referredType;
                        castExp.ownedArguments.add(typeExp);
                        thenExp.ownedSource = castExp;
                        ifExp.ownedThen = thenExp;
                        // Else
                        var elseExp = new QVTi!CollectionLiteralExp;
                        elseExp.type = getClassByName("Set");
                        elseExp.kind = CollectionKind#`Set`;
                        ifExp.ownedElse = elseExp;
                        derivationExp = ifExp;
				    } else {
					    // We need a cast
					    // <primNavExp>.oclAsType(pp.v.type)
	                    var castExp = new QVTi!OperationCallExp;
	                    castExp.referredOperation = getOclAnyOperation("oclAsType");
	                    castExp.ownedSource = primNavExp;
	                    var typeExp = new QVTi!TypeExp;
	                    typeExp.referredType = self.derivation.primaryParameter.variable.type;
	                    typeExp.type = getClassByName("Class");
	                    castExp.type = typeExp.referredType;
	                    castExp.ownedArguments.add(typeExp);
	                    derivationExp.ownedSource = castExp;
	                }
                } else {
                    derivationExp.ownedSource = primNavExp;
                }
			}
		} else {
			//self.derivation.target.mapping.name.println("Binding from context ");
			derivationExp.ownedSource = new QVTi!VariableExp;
	    	// TODO What about supertypes?
	    	derivationExp.ownedSource.referredVariable ::= self.derivation.target.parent.getContextDataParameters()
	    			.selectOne(dp | dp.variable.type == self.derivation.primaryParameter.variable.type).variable.getSameVariable();
	    	derivationExp.ownedSource.type = derivationExp.ownedSource.referredVariable.type;
		}
	} else {
		//self.dataParameter.variable.name.println("End Rec with iterator ");
		derivationExp = new QVTi!VariableExp;
    	derivationExp.referredVariable = self.equivalent().ownedIterators.first();
    	derivationExp.type = exp.referredVariable.type;
	}
	//derivationExp.toString().println("ret ");
	return derivationExp;
}

// Gets the DataParamerters in the context of the type or a supertype
operation QVTs!MappingAction getAllContextDataParameters(type) {
	//self.getContextDataParameters().collect(dp | dp.variable.type).println();
	//type.println();
	return self.getContextDataParameters().select(dp | dp.variable.type == type or dp.variable.type.closure(t | t.superClasses).includes(type));
}
        		

operation getSet(class : QVTi!Class) {
	return class.owningModel.getMetamodelManager().getCollectionType("Set", class, null, null);	
}

post {
	-- FIXME By some reason making the rule Imports be lazy, makes the transformation strangely behave. Investigate
	-- For the time being, I don't make the rule lazy and I remove the orphane elements at the end'
	delete QVTi!Import.all.select(x | x.eContainer().isUndefined());
	// Trailing variable references can only be fixed once all the elements are in place
	fixReferences(QVTi!VariableExp.all());
    "QVTp+s to QVTi Done".println();
}    
pre {
	'==========================================================================='.println();
	' Generating a Relational model from a Entity Relationship model'.println();
	'==========================================================================='.println();
	' '.println();
} -- pre

-- This rules creates a relational database schema corresponding to the ERR project
rule Project2Schema 
	
	transform p : EER!Project
	to s : Relational!Schema {
	
	'Processing project '.concat(p.name).println(); 
	''.println();
	
	-- The schema is named as the EER project
	s.name = p.name;
	-- We add as tables the results of transforming all the entities and weak entities
	s.tables.addAll(p.nodes.select(e : EER!Entity | true).equivalent());
	-- We add as domains the results of transforming all domains
	s.domains.addAll(p.domains.select(e : EER!Domain | true).equivalent());
	-- We make the transformation necesary to dependency relationships
	transformDependencyRelationshipsOp(p.nodes.select(e : EER!DependencyRelationship | true).asSequence(), s);
	-- We make the transformation necesary to generalizations
	generalizationOp(s, p.nodes.select(e : EER!Generalization | true).asSequence());
	-- We make the transformation necesary to relationships
	transformRelationshipsOp(p.nodes.select(e : EER!Relationship | true).asSequence(), s);
	-- We make the transformation necesary to aggregations
	aggregationsOp(s, p.nodes.select(e : EER!Aggregation | true).asSequence());
	-- We make the transformation necesary to multivalued attributes	
	transformMultivaluedAttributesOp(s);
	
} -- Project2Schema


-- This rule creates one table by each entity in the model  
@lazy
rule Entity2Table 
	
	 transform e : EER!Entity 
	 to t : Relational!Table {
		
		'Processing entity '.concat(e.name).println(); 
		''.println();
		
		t.name = e.name;
		-- We make the transformation necesary to single attributes
		singleAttributesOp(t, e.attributes.select(p : EER!SingleAttribute | true).asSequence());
		-- We add as candidate key the results of transforming the candidates keys
		t.candidateKey.addAll(e.candidateKey.equivalent());
		-- We reference the primary key
		t.primaryKey ::= e.primaryKey;
		-- We make the transformation necesary to composite attributes
		compositeAttributesOp(t, e.attributes.select(p : EER!CompositeAttribute | true).asSequence());
			
} -- Entity2Table


-- This rule creates one table by each weak entity in the model  
@lazy
rule WeakEntity2Table 
	
	 transform e : EER!WeakEntity 
	 to t : Relational!Table {
		
		'Processing weak entity '.concat(e.name).println(); 
		''.println();
		
		t.name = e.name;
		singleAttributesOp(t, e.attributes.select(p : EER!SingleAttribute | true).asSequence());
		t.candidateKey.addAll(e.candidateKey.equivalent());
		t.primaryKey ::= e.primaryKey;
		compositeAttributesOp(t, e.attributes.select(p : EER!CompositeAttribute | true).asSequence());
		
} -- WeakEntity2Table


--This rule creates one Candidate key by each Candidate key in the Entity
@lazy
rule CandidateKey2CandidateKey
	transform e : EER!CandidateKey
	to r : Relational!CandidateKey{
	
		'Processing candidate key '.concat(e.name).println();
		''.println();
		
		r.name = e.name;
		r.attributes := e.attributes;	
		
} --CandidateKey2CandidateKey


--This rule creates one primitive type by each primitive type in the project
@lazy
rule PrimitiveType2PrimitiveType

	transform p1 : EER!PrimitiveType
	to p2 : Relational!PrimitiveType{
	
		'Processing primitive type '.concat(p1.name).println();
		p2.name = p1.name;	
	
}--PrimitiveType2PrimitiveType

--This rule creates one enumerated type by each enumerated type in the project
@lazy
rule EnumerationType2EnumerationType

	transform e1 : EER!EnumerationType
	to e2 : Relational!EnumerationType{
	
		'Processing enumeration type '.concat(e1.name).println();
		
		e2.name = e1.name;
		e2.literals.addAll(e1.literals.equivalent());	
	
}--EnumerationType2EnumerationType


--This rule creates one enumerated literal by each enumerated literal in the enumerated type
@lazy
rule EnumeratedLiteral2EnumeratedLiteral

	transform l1 : EER!EnumeratedLiteral
	to l2 : Relational!EnumeratedLiteral{
	
		'Processing enumerated literal '.concat(l1.name).println();
		
		l2.name = l1.name;
	
}--EnumeratedLiteral2EnumeratedLiteral


--
-- Operation compositeAttributesOp.
-- It invokes the creation of the attributes.
--
-- Relational!Table t: Table owner of attributes.
-- Sequence a: Sequence with composite attributes. 
--
operation compositeAttributesOp(t : Relational!Table, a : Sequence ){
	--for each attribute in sequence	
	for(n in a){
		var ca : new EER!CompositeAttribute;
		ca = n;
		
		'Processing composite attribute '.concat(ca.name).println();
		
		--invokes the creation of singles attributes
		singleAttributesOp(t, ca.singlesAttributes.select(p : EER!SingleAttribute | true).asSequence());
		--invokes the creation of composite attributes (recursive)
		compositeAttributesOp(t, ca.singlesAttributes.select(p : EER!CompositeAttribute | true).asSequence());
	}
}


--
-- Operation singleAttributesOp 
-- It creates single attributes of the list and add it into the table.
--
-- Relational!Table t: Table owner of attributes.
-- Sequence attributeList: Sequence with single attributes.
--
operation singleAttributesOp(t : Relational!Table, attributeList : Sequence ){	
	--for each single attribute in sequence
	for(i in attributeList){
		--create a new attribute (column)
		var c : Relational!Attribute;
		c = createSingleAttributeOp(i);
		--add it as attribute (column) of the table
		t.attributes.add(c);
	}
}


--
-- Operation createSingleAttributeOp
-- It transforms a single attribute as a column 
--
-- EER!SingleAttribute sa: single attribute.
-- return Relational!Attribute: returns an attribute (column) 
--
operation createSingleAttributeOp(sa : EER!SingleAttribute) : Relational!Attribute{
	var c : new Relational!Attribute;
		
	'Processing attribute '.concat(sa.name).println();
	
	-- capturing of values
	c.name = sa.name;
	c.domain ::= sa.domain;
	c.nullable = sa.nullable;
	c.multiplicity = sa.multiplicity; 
	if(sa.derivate){
		c.type = Relational!AttributeType#Derivate;
	}else{
		c.type = Relational!AttributeType#Simple;
	}
	--returns the attribute
	return c;	
}


--
-- Operation transformMultivaluesdAttributesOp.
-- It transforms all multivalued attributes in new tables.
--
-- Relational!Schema s: Schema owner of attributes.
--
operation transformMultivaluedAttributesOp(s : Relational!Schema){
	var deletedAttributes : new Sequence;
	var deletedTables : new Sequence;
	var addedTables : new Sequence;
	--for each table of schema
	for(i in s.tables){
		--for each attribute of schema
		for(j in i.attributes){
			--if is a multivalued attribute
			if(j.multiplicity > 1 or j.multiplicity < 0){
				var t : Relational!Table;
				-- obtains the new table 
				t = multivaluedAttributeOp(j, i);
				deletedAttributes.add(j);
				deletedTables.add(i);
				addedTables.add(t);
				triggerMaximumOp(s, t, j.multiplicity);
			}
		}
	}
	--if there are deleted atrributes
	if(deletedAttributes.size() > 0){
		--for each deleted attribute
		for(i in Sequence{0..deletedAttributes.size()-1}){
			--delete of the owner table
			deletedTables.at(i).attributes.remove(deletedAttributes.at(i));
			--add the new table to schema
			s.tables.add(addedTables.at(i));
		}
	}
}


--
-- Operation multivaluedAttributeOp.
-- Generate the new table corresponding at multivalued attribute.
--
-- Relational!Attribute a: multivalued attribute.
-- Relational!Table t: table owner of attribute.
-- return Relational!Table: returns the new table.
--
operation multivaluedAttributeOp(a : Relational!Attribute, t : Relational!Table) : Relational!Table{
	var table : new Relational!Table;
	var ck : new Relational!CandidateKey;
	var fk : new Relational!ForeignKey;
	
	table.name = t.name.concat('_').concat(a.name);
	'Created Table '.concat(table.name).println();
	
	--for each attribute of primary key
	for(n in t.primaryKey.attributes){
		--create a new attribute
		var att : Relational!Attribute;
		if(n.isTypeOf(EER!SingleAttribute)){
			att = createSingleAttributeOp(n);
		}else{
			att = n;
		}
		--the attribute is added to foreign key and to table
		fk.attributes.add(att);
		table.attributes.add(att);
	}
	--fill the foreign key 
	fk.name = table.name.concat('_FK');
	fk.referencedTable := t;
	--add the foreign key to table
	table.foreignKey.add(fk);
	
	--new attribute corresponding at multivalued attribute
	'Processing multivalued attribute '.concat(a.name).println();
	var att : new Relational!Attribute;
	att.name = a.name;
	att.type = a.type;
	att.nullable = a.nullable;
	att.multiplicity = a.multiplicity;
	att.domain = a.domain;
	table.attributes.add(att);
	
	--add the attributes to candidate key
	for(n in table.attributes){
		ck.attributes.add(n);
	}
	ck.name = table.name.concat('_CK');
	--the primary key will be the candidate key
	table.primaryKey := ck;
	--add the candidate key to table
	table.candidateKey.add(ck);
	-- return the new table
	return table;
}


--
-- Operation transformRelationshipsOp.
-- Transforms relationships in their respective tables.
-- 
-- Sequence relationships: relationships to transform.
-- Relational!Schema s: Schema owner. 
operation transformRelationshipsOp(relationships : Sequence, s : Relational!Schema){
	--for each relationship
	for(r in relationships){
	
		'Processing relationship '.concat(r.name).println();
		
		var entitiesList : new Sequence;
		var cardinalitiesLowerList : new Sequence; 
		var cardinalitiesUpperList : new Sequence;
		var participantsList : new Sequence;
		
		participantsList = r.participants.asSequence();
		
		--for each participant of relationship
		for(n in participantsList){
			--add into a respective list the name of the target and their bounds	
			entitiesList.add(n.target);
			cardinalitiesLowerList.add(n.lowerBound);
			cardinalitiesUpperList.add(n.upperBound);
		}
		--check the cardinality of relationship
		--if is 1:1 invoke respective operation
		if(checkCardinalityOp(cardinalitiesUpperList, 1)){
			relation11Op(s, r, participantsList);
		}else{
			--if is N:N invoke respective operation
			if(checkCardinalityOp(cardinalitiesUpperList, -1)){
				relationNNOp(s, r, participantsList);
			--else it will be 1:N and invoke respective operation
			}else{
				relation1NOp(s, r, participantsList);
			}
		}
	}
}


--
-- Operation checkCardinalityOp.
-- Checks the values of list.
--
-- Sequence list: list with values.
-- Integer n: integer that indicates the operation.
-- Return boolean: 
-- If n = 1 returns true if all values are 1 and false in oposite case.
-- If n <> 1 returns true if there are more of one value like 1 and false in oposite case.
operation checkCardinalityOp(list : Sequence, n : Integer) : Boolean{
	switch(n){
		case 1:
			for(i in list){
				if(i <> n){
					return false;
				}
			}
			return true;
		default:
			var count : Integer = 0;
			for(i in list){
				if(i < 0 or i > 1){
					count = count + 1;
				}
			}
			if(count = list.size() or count > 1){
				return true;
			}else{
				return false;
			}
	}
}


--
-- Operation relation11Op.
-- Transforms the relationship 1:1 in its respective result.
--
-- Relation!Schema s: Schema owner.
-- EER!Relationship r: Relationship to transform.
-- Sequence participantsList: participants of the relationship.
--
operation relation11Op(s : Relational!Schema, r : EER!Relationship, participantsList : Sequence){
	var table : Relational!Table;
	table ::= participantsList.at(0).target;
	--if the minimun cardinality is 0 the foreign key will be
	--in the other table
	for(i in participantsList){
		if(i.lowerBound = 0){
			table ::= i.target;
		}
	}
	--find the table
	table = findTableOp(s, table.name);
	
	--for each participant distint of the first
	for(i in Sequence{1..participantsList.size()-1}){
		-- generate the foreign keys
		var fk : new Relational!ForeignKey; 
		fk.name = participantsList.at(i).target.name.concat('_').concat(r.name).concat('_FK');
		fk.referencedTable ::= participantsList.at(i).target;
		
		-- for each attribute of the primary key of the target of the participants
		for(k in participantsList.at(i).target.primaryKey.attributes){
			--create an attribute
			var att :Relational!Attribute; 
			att = createSingleAttributeOp(k);
			if(participantsList.at(i).role <> null){
				att.name = att.name.concat('_').concat(r.role);
			}else{
				att.name = att.name.concat('_').concat(r.name);
			}
			fk.attributes.add(att);
			if(participantsList.at(i).lowerBound = 0){
				att.nullable = true;
			}
			--add the attribute to the table
			table.attributes.add(att);
		}
		--add the foreign key to the table
		table.foreignKey.add(fk);
		'Added '.concat(table.foreignKey.last().name).concat(' to ').
		concat(table.name).println();
	}
	--add the attributes of the relationship
	compositeAttributesOp(table, r.attributes.select(p : EER!CompositeAttribute | true).asSequence());
	singleAttributesOp(table, r.attributes.select(p : EER!SingleAttribute | true).asSequence());
}


--
-- Operation relation1NOp
-- Transforms the relationship 1:N in its respective result.
--
-- Relation!Schema s: Schema owner.
-- EER!Relationship r: Relationship to transform.
-- Sequence participantsList: participants of the relationship.
-- 
operation relation1NOp(s : Relational!Schema, r : EER!Relationship, participantsList : Sequence){
	var table : Relational!Table;
	var max : Integer = 0;
	var list : Sequence;
	var reflex : Boolean = true;
	var aux : EER!Entity;
	var count : Integer = 0;
	--find the table with bigest cardinality
	for(i in participantsList){
		if(i.upperBound < 0 or i.upperBound > 1){
			table ::= i.target;
			max = i.upperBound;
		}
	}
	
	for(i in participantsList){
		if(count = 0){
			aux = i.target;
		}else{
			if(aux <> i.target){
				reflex = false;
			}
		}
		count = count + 1;
	}
	
	if(reflex){
		for(i in Sequence{1..participantsList.size()-1}){
			--create the foreign key
			var fk : new Relational!ForeignKey; 
			fk.name = participantsList.at(i).target.name.concat('_').concat(r.name).concat('_FK');
			fk.referencedTable ::= participantsList.at(i).target; 
			--for each attribute of the primary key
			for(k in participantsList.at(i).target.primaryKey.attributes){
				--create an attribute
				var att :Relational!Attribute; 
				att = createSingleAttributeOp(k);
				if(participantsList.at(i).role <> null){
					att.name = att.name.concat('_').concat(participantsList.at(i).role);
				}else{
					att.name = att.name.concat('_').concat(r.name);
				}
				--add the attribute to the foreign key and to the table
				fk.attributes.add(att);
				if(participantsList.at(i).lowerBound = 0){
					att.nullable = true;
				}
				table.attributes.add(att);
			}
			--add the foreign key to the table
			table.foreignKey.add(fk);
			list.addAll(fk.attributes);
			'Added '.concat(fk.name).concat(' to ').concat(table.name).println();	
		}
	}
	
	
	--for each participant of the participantsList
	for(j in participantsList){
		--if the tables target and the table with bigest cardinality are not the same
		if(j.target.name <> table.name){
			--create the foreign key
			var fk : new Relational!ForeignKey; 
			fk.name = j.target.name.concat('_').concat(r.name).concat('_FK');
			fk.referencedTable ::= j.target; 
			--for each attribute of the primary key
			for(k in j.target.primaryKey.attributes){
				--create an attribute
				var att :Relational!Attribute; 
				att = createSingleAttributeOp(k);
				if(j.role <> null){
					att.name = att.name.concat('_').concat(j.role);
				}else{
					att.name = att.name.concat('_').concat(r.name);
				}
				--add the attribute to the foreign key and to the table
				fk.attributes.add(att);
				if(j.lowerBound = 0){
					att.nullable = true;
				}
				table.attributes.add(att);
			}
			--add the foreign key to the table
			table.foreignKey.add(fk);
			list.addAll(fk.attributes);
			'Added '.concat(fk.name).concat(' to ').concat(table.name).println();
		}
	}
	--add the attributes of the relationship
	compositeAttributesOp(table, r.attributes.select(p : EER!CompositeAttribute | true).asSequence());
	singleAttributesOp(table, r.attributes.select(p : EER!SingleAttribute | true).asSequence());
	
	if(max > 1){
		triggerMaximumRelationshipOp(s, table, max, r.name, list);
	}
}


--
-- Operation relationNNOp
-- Transforms the relationship N:N in its respective result.
--
-- Relation!Schema s: Schema owner.
-- EER!Relationship r: Relationship to transform.
-- Sequence participantsList: participants of the relationship.
-- 
operation relationNNOp(s : Relational!Schema, r : EER!Relationship, participantsList : Sequence){
	--create a new table
	var table : new Relational!Table;
	table.name = r.name;
	'Created table '.concat(r.name).println();
	--create a new candidate key
	var ck : new Relational!CandidateKey;
	ck.name = r.name.concat('_CK');
	'Created candidate key '.concat(ck.name).println();
	
	--for each participant of the participantList
	for(i in participantsList){
		--create a new foreign key
		var fk : new Relational!ForeignKey;
		fk.name = i.target.name.concat('_FK');
		--for each attribute of the primary key
		for(k in i.target.primaryKey.attributes){
			--create a new attribute
			var att : Relational!Attribute;
			att = createSingleAttributeOp(k);
			if(i.role <> null){
				att.name = att.name.concat('_').concat(i.role);
			}else{
				att.name = att.name.concat('_').concat(i.target.name);
			}
			--add the attribute to the table and to the foreign key
			table.attributes.add(att);
			fk.attributes.add(att);
			fk.referencedTable ::= i.target;
			'Added attribute '.concat(att.name).concat(' at foreign key ').concat(fk.name).println();
			--add the foreign key to the table
			table.foreignKey.add(fk);
			'Added foreign key '.concat(fk.name).concat(' at table ').concat(table.name).println();
			--add the attribute to the candidate key
			ck.attributes.add(att);
			'Added attribute '.concat(att.name).concat(' at candidate key ').concat(ck.name).println();
		}	
	}
	--add the candidate key to the table
	table.candidateKey.add(ck);
	'Added candidate key '.concat(ck.name).concat(' at table ').concat(table.name).println();
	table.primaryKey := ck;
	--add the attributes of the relationship
	compositeAttributesOp(table, r.attributes.select(p : EER!CompositeAttribute | true).asSequence());
	singleAttributesOp(table, r.attributes.select(p : EER!SingleAttribute | true).asSequence());
	--add the table to the schema
	s.tables.add(table);
	'Added table '.concat(table.name).concat(' at Schema ').concat(s.name).println();
	
	-- instructions for the trigger
	--for each participant
	for(i in participantsList){
		if(i.upperBound > 1){
			var list : new Sequence; 
			for(j in table.foreignKey){
				if(i.target.name <> j.referencedTable.name){
					list.addAll(j.attributes);
				}
			}
			--invokes the operation
			triggerMaximumRelationshipOp(s, table, i.upperBound, r.name, list);
		}	
	}				
}


--
-- Operation transformDependencyRelationshipsOp.
-- Transforms the dependency relationship to their respective results.
--
-- Sequence relationList: list with dependency relationships.
-- Relational!Schema s: schema owner.
--
operation transformDependencyRelationshipsOp(relationList : Sequence, s : Relational!Schema){

	var entity : Relational!Table;
	var weakEntity : Relational!Table;
	var name : String;
	
	--for each dependency relationship of the list
	for(i in relationList){
	
		'Processing dependency relationship '.concat(i.name).println();
	
		--find the related tables 
		for(j in Sequence{0..1}){
			if(i.participants.at(j).target.isTypeOf(EER!Entity)){
				name = i.participants.at(j).target.name;
				entity = findTableOp(s, name);
			}else{
				name = i.participants.at(j).target.name;
				weakEntity = findTableOp(s, name);
			}
		}
		--add the attributes of the dependency relationship
		singleAttributesOp(weakEntity, i.attributes.select(p : EER!SingleAttribute | true).asSequence());
		compositeAttributesOp(weakEntity, i.attributes.select(p : EER!CompositeAttribute | true).asSequence());
				
		
		--if the dependency relationship is an ID type
		if(i.type <> EER!DependencyType#E){
			var ck : new Relational!CandidateKey;
			--for each attribute of the primary key of the strong entity
			for(k in entity.primaryKey.attributes){
				--create an attribute
				var a : Relational!Attribute;
				a = createSingleAttributeOp(k);
				--add the attribute to the weak entity and to the candidate key
				weakEntity.attributes.add(a);
				ck.name = weakEntity.name.concat('_WE_CK');
				ck.attributes.add(a);
			}
			ck.attributes.addAll(weakEntity.primaryKey.attributes);
			--add the candidate key to the table of the weak entity
			weakEntity.candidateKey.add(ck);
			weakEntity.primaryKey := ck;	
		}
			
	}
}


--
-- Operation findTableOp.
-- Find the table with the name "name".
--
-- Relational!Schema s: Schema owner.
-- String name: name of the table.
-- Return Relational!Table: returns the table with the name "name".
operation findTableOp(s : Relational!Schema, name : String) : Relational!Table{
	--for each table of the schema
	for(n in s.tables){
		if(n.name = name){
			return n;
		}
	}
	--if the table was not found, show a message and returns null
	'WARNING: The table '.concat(name).concat(' not found.').println();
	return null;
}


--
-- Operation generalizationOp
-- Transfoms the generalizations in their respective results.
--
-- Relational!Schema s: Schema owner.
-- Sequence list: list with generalizations.
operation generalizationOp(s : Relational!Schema, list : Sequence){
	--for each generalization of the list
	for(i in list){
		
		'Processing generalization'.println();
	
		var father : Relational!Table;
		father = findTableOp(s,i.parent.source.name);
		--for each child
		for(j in i.childs){
			--create a new table and a new candidate key
			var table : Relational!Table;
			table = findTableOp(s,j.child.name);
			var ck : new Relational!CandidateKey;
			ck.name = table.name.concat('_CK');
			--for each attribute of the primary key of the father
			for(n in father.primaryKey.attributes){
				--create a new attribute
				var att : Relational!Attribute;
				att = createSingleAttributeOp(n);
				--add the attribute to the candidate key an to the table
				ck.attributes.add(att);
				table.attributes.add(att);
			}
			--add the candidate key to the table
			table.candidateKey.add(ck);
			table.primaryKey := ck;
		}
		--if the generalizaton has attributes
		if(i.attribute <> null){
			for(j in i.attribute){
				--create a new attribute
				var att : Relational!Attribute;
				att = createSingleAttributeOp(j);
				father.attributes.add(att);
			}
		}
		--exclusive
		if(i.type = EER!GeneralizationType#totalDisjoint or
		   i.type = EER!GeneralizationType#partialDisjoint){
			for(j in i.childs){
				for(k in i.childs){
					if(j <> k){
						var l : new Sequence;
						var table1 : Relational!Table;
						var table2 : Relational!Table;
						table2 = findTableOp(s,k.child.name);
						table1 = findTableOp(s,j.child.name);
						l.addAll(table2.primaryKey.attributes);
						triggerExclusiveOp(s,table1,table2,l);
					}
				}
			}
		}
		--totality
		if(i.type <> EER!GeneralizationType#partialOverlapping or
		   i.type <> EER!GeneralizationType#partialDisjoint){
		 	 triggerTotalOp(s,father); 
		}
	}
}


--
-- Operation aggregationsOp.
-- Transforms the aggregations in their respective results.
--
-- Relational!Schema s: schema owner.
-- Sequence list: list with aggregations.
operation aggregationsOp(s : Relational!Schema, list : Sequence){
	--for each aggregation of the list
	for(i in list){
	
		'Processing aggregation'.println();	
	
		--create a reference of a table
		var source : Relational!Table;
		source = findTableOp(s, i.source.name);
		--for each participant of the aggregation
		for(j in i.participants){
			--create a new attribute
			var att : Relational!Attribute;
			--if is 1:N
			if((j.upperBound > 1 or j.upperBound < 0)){
				   
			   	var fk : new Relational!ForeignKey;
				fk.name = source.name.concat('_FK');
				fk.referencedTable := source;
				var table : Relational!Table;
				table = findTableOp(s,j.target.name); 
			   	--for each attribute of the primary key of the source
			   	for(k in source.primaryKey.attributes){
					att = createSingleAttributeOp(k);
					fk.attributes.add(att);
					table.attributes.add(att);   		
			   	}
			   	table.foreignKey.add(fk);
			   	--if the upper bound is not infinite, creates a trigger.
			   	if(j.upperBound > 1){
			   		var name : String;
			   		if (i.name <> null){
			   			name = i.name; 
			   		}else{
			   			name = 'aggregation';
			   		}
					triggerMaximumRelationshipOp(s, table, j.upperBound, name, fk.attributes.asSequence());
				}
			    
			--if is 1:1
			}else{
				var fk : new Relational!ForeignKey;
				fk.name = j.target.name.concat('_FK');
				fk.referencedTable ::= j.target;
				--for each attribute of the primary key of the target
				for(k in j.target.primaryKey.attributes){
					att = createSingleAttributeOp(k);
					fk.attributes.add(att);
					source.attributes.add(att);
				}
				source.foreignKey.add(fk);
			}
		}
	}
}


--
-- Operation triggerMaximumOp.
-- Create a constrait that limits the number of rows.
--
-- Relational!Schema s: schema owner.
-- Relational!Table t: table that drops the constraint.
-- Integer max: number that indicates the limit of rows.
operation triggerMaximumOp(s : Relational!Schema, t : Relational!Table, max : Integer){
	
	'Processing trigger '.concat(t.name).concat('_maximum').println();
	
	var text : String;
	
	text = 'CREATE TRIGGER '.concat(t.name).concat('_maximum ON ').concat(t.name).concat('\n');
	text = text.concat('AFTER INSERT, UPDATE').concat('\n');
	text = text.concat('AS BEGIN').concat('\n');
	text = text.concat('\n');
	text = text.concat('IF (SELECT count(*) FROM ' ).concat(t.name).concat(' t, inserted i').concat('\n');
	text = text.concat('WHERE t.').concat(t.primaryKey.name);
	text = text.concat(' = i.').concat(t.primaryKey.name);
	text = text.concat(') > ').concat(max.asString).concat('\n');
	text = text.concat('BEGIN ').concat('\n');
	text = text.concat('RAISERROR (\'The number of rows is bigger than the limit\', 16, 1)').concat('\n');
	text = text.concat('ROLLBACK TRANSACTION').concat('\n');
	text = text.concat('RETURN').concat('\n');
	text = text.concat('END	').concat('\n');
	text = text.concat('END').concat('\n');
	text = text.concat('GO').concat('\n');
	
	var constraint : new Relational!Constraint;
	constraint.name = 'Trigger';
	constraint.description = text;
	s.constraints.add(constraint);
}


--
-- Operation triggerMaximumOp.
-- Create a constrait that limits the number of rows.
--
-- Relational!Schema s: schema owner.
-- Relational!Table t: table that drops the constraint.
-- Integer max: number that indicates the limit of rows.
-- String relationName: Name of the relationship.
-- Sequence list: list of foreign keys.
operation triggerMaximumRelationshipOp(s : Relational!Schema, t : Relational!Table, max : Integer, relationName : String, list : Sequence){
	
	'Processing trigger '.concat(t.name).concat('_').concat(relationName).concat('_maximum').println();
	
	var text : String;
	var i : Integer = 0;
	
	text = 'CREATE TRIGGER '.concat(t.name).concat('_').concat(relationName).concat('_maximum ON ').concat(t.name).concat('\n');
	text = text.concat('AFTER INSERT, UPDATE').concat('\n');
	text = text.concat('AS BEGIN').concat('\n');
	text = text.concat('\n');
	text = text.concat('IF (SELECT count(*) FROM ' ).concat(t.name).concat(' t, inserted i').concat('\n');
	text = text.concat('WHERE');
	
	for(n in list){
		if(i=0){
			text = text.concat(' t.').concat(n.name);
			text = text.concat(' = i.').concat(n.name);
		}else{		
			text = text.concat(' AND ');
			text = text.concat(' t.').concat(n.name);
			text = text.concat(' = i.').concat(n.name);
		}
		i = i + 1;
	}
	
	text = text.concat(') > ').concat(max.asString).concat('\n');
	text = text.concat('BEGIN ').concat('\n');
	text = text.concat('RAISERROR (\'The number of rows is bigger than the limit\', 16, 1)').concat('\n');
	text = text.concat('ROLLBACK TRANSACTION').concat('\n');
	text = text.concat('RETURN').concat('\n');
	text = text.concat('END	').concat('\n');
	text = text.concat('END').concat('\n');
	text = text.concat('GO').concat('\n');
	
	var constraint : new Relational!Constraint;
	constraint.name = 'Trigger';
	constraint.description = text;
	s.constraints.add(constraint);
}

--
-- Operation triggerExclusiveOp.
-- Create a constrait that check the exclusive.
--
-- Relational!Schema s: schema owner.
-- Relational!Table t1: table that drops the constraint.
-- Relational!Table t2: another table that drops the constraint.
-- Sequence list: list of primaries keys.
operation triggerExclusiveOp(s : Relational!Schema, t1 : Relational!Table, t2 : Relational!Table, list : Sequence){
	
	'Processing trigger '.concat(t1.name).concat('_').concat(t2.name).concat('_exclusive').println();
	
	var text : String;
	var i : Integer = 0;
	
	text = 'CREATE TRIGGER '.concat(t1.name).concat('_').concat(t2.name).concat('_exclusive ON ').concat(t1.name).concat('\n');
	text = text.concat('AFTER INSERT, UPDATE').concat('\n');
	text = text.concat('AS BEGIN').concat('\n');
	text = text.concat('\n');
	text = text.concat('IF (SELECT count(*) FROM ').concat(t2.name).concat(' t, inserted i').concat('\n');
	text = text.concat('WHERE');
	
	for(n in list){
		if(i=0){
			text = text.concat(' t.').concat(n.name);
			text = text.concat(' = i.').concat(n.name);
		}else{		
			text = text.concat(' AND ');
			text = text.concat(' t.').concat(n.name);
			text = text.concat(' = i.').concat(n.name);
		}
		i = i + 1;
	}
	
	text = text.concat(') > 0').concat('\n');
	text = text.concat('BEGIN ').concat('\n');
	text = text.concat('RAISERROR (\'The pk exists in another table\', 16, 1)').concat('\n');
	text = text.concat('ROLLBACK TRANSACTION').concat('\n');
	text = text.concat('RETURN').concat('\n');
	text = text.concat('END	').concat('\n');
	text = text.concat('END').concat('\n');
	text = text.concat('GO').concat('\n');
	
	var constraint : new Relational!Constraint;
	constraint.name = 'Trigger';
	constraint.description = text;
	s.constraints.add(constraint);
}

--
-- Operation triggerTotalOp.
-- Create a constrait that check the totality.
--
-- Relational!Schema s: schema owner.
-- Relational!Table t: table that drops the constraint.
operation triggerTotalOp(s : Relational!Schema, t : Relational!Table){
	
	'Processing trigger '.concat(t.name).concat('_total').println();
	
	var text : String;
	
	text = 'CREATE TRIGGER '.concat(t.name).concat('_total ON ').concat(t.name).concat('\n');
	text = text.concat('AFTER INSERT, UPDATE').concat('\n');
	text = text.concat('AS BEGIN').concat('\n');
	text = text.concat('BEGIN ').concat('\n');
	text = text.concat('RAISERROR (\'Do not insert rows in the supertype. Insert them in the corresponding subtype.\', 16, 1)').concat('\n');
	text = text.concat('ROLLBACK TRANSACTION').concat('\n');
	text = text.concat('RETURN').concat('\n');
	text = text.concat('END	').concat('\n');
	text = text.concat('END').concat('\n');
	text = text.concat('GO').concat('\n');
	
	var constraint : new Relational!Constraint;
	constraint.name = 'Trigger';
	constraint.description = text;
	s.constraints.add(constraint);
}


post {
	'==========================================================================='.println();
	' Completed sucessfully.'.println();
	'==========================================================================='.println();
	' '.println();
} -- post
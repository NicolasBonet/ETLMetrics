import "../helpers/QVTHelpers.eol";
import "../helpers/OclLibHelper.eol";

pre {
    var emfTool = new Native("org.eclipse.epsilon.emc.emf.tools.EmfTool");
}

/****t* /org.eclipse.qvtd.build.etl/mtc/QVTmToQVTiPartition
 * NAME
 *  QVTmToQVTiPartition -- Transform a QVTm transformation into its
 *  partioned equivalent.
 * FUNCTION
 *  Each transformation rule is broken into n rules, depending on the number
 *  of input domains.
 *    
 */

/****u* QVTmToQVTiPartition/CoreModel
 * NAME
 *  CoreModel - Transform the model
 * FUNCTION
 *	Copy the model name and transform the nested packages. Change the model external URI
 * FROM
 *	QVTm!CoreModel
 * TO
 *	QVTp!ImperativeModel
 */
rule CoreModel
    transform mIn:QVTm!CoreModel
    to mOut:QVTp!ImperativeModel {
        mOut.name = mIn.name;
        mOut.ownedImports.addAll(emfTool.getECoreUtil().copyAll(mIn.ownedImports));
        mOut.ownedPackages.addAll(mIn.ownedPackages.equivalent());
        mOut.externalURI = mIn.externalURI.replace(".qvtm.qvtc", ".qvtp.qvti");
    }


/****u* QVTmToQVTiPartition/Pacakge
 * NAME
 *  Pacakge - Transform the enclosing package
 * FUNCTION
 *	Copy the name and transform the transformation
 * FROM
 *	QVTm!CoreModel
 * TO
 *	QVTp!ImperativeModel
 */    
rule Pacakge
	transform pIn:QVTm!Package
	to pOut:QVTp!Package {
	
		guard : pIn.ownedClasses.exists(c | c.isTypeOf(QVTm!Transformation))
		
		pOut.name = pIn.name;
		pOut.ownedClasses.addAll(pIn.ownedClasses.equivalent());
	}


/****u* QVTmToQVTiPartition/Transformation
 * NAME
 *  Transformation - Transform the transformation
 * FUNCTION
 *	Copy the transformation name. Transform the TypedModels and the
 *  transformation's rules. Fix all the references to variables because
 *  all the OCL expressions are copied with emf and thus point to the input
 *  model.
 * FROM
 *  QVTm!Transformation
 * TO
 *  QVTp!Transformation
 */
rule Transformation
    transform tIn:QVTm!Transformation
    to tOut:QVTp!Transformation {
        
        tOut.name = tIn.name;
        tOut.modelParameter ::= tIn.modelParameter;
        tOut.`rule`.addAll(tIn.`rule`.equivalents().flatten());
        tOut.ownedOperations.addAll(emfTool.getECoreUtil().copyAll(tIn.ownedOperations));
        
    }

/****u* QVTmToQVTiPartition/TypedModel
 * NAME
 *  TypedModel - Transform the TypedModels
 * FUNCTION
 *	Copy the information about the typed models and make the "middle" model
 *  explicit. 
 * FROM
 *  QVTm!TypedModel
 * TO
 *  QVTp!TypedModel
 */
rule TypedModel
    transform itm:QVTm!TypedModel
    to otm:QVTp!TypedModel {
        
        if (itm.name.isDefined()) {
            otm.name = itm.name;
        } else {
            otm.name = "middle";
        }
        otm.usedPackage = itm.usedPackage.clone();
        otm.dependsOn ::= itm.dependsOn;
    }

/****u* QVTmToQVTiPartition/Mapping
 * NAME
 *  Mapping - Transform the Mappings
 * FUNCTION
 *	Split each mapping into n mappings, where n is equal to the number of domains
 * FROM
 *	QVTm!Mapping
 * TO
 *  Set{ } 	- A set containing 1 to n mappings
 * GUARD
 *  * Do not partition mappings that are specifications of other mappings
 * TODO
 * 	* We asumme that a mapping that is refined by another one is an abstract mapping
 *    and as such it shouldn't be executed and hence it is not partitioned. This
 *    can use a more advanced logic or introduction of an @abstract annotation
 */
rule Mapping
    transform m:QVTm!Mapping
    to mappings : Sequence {
    
        guard : m.specification.isEmpty()
        
        //m.name.println("m ");
        if (m.domain.one(d | d.isInputDomain())) {
            // Create LM mapping
            var lmM = new QVTp!Mapping;
            mappings.add(lmM);
            //m.println("LMMaping: ");
            lmM.~side = "l";
		    lmM.name = m.name + "_LM";
		    // We need the patterns to have a place to move variables and predicates from domains
		    lmM.guardPattern = new QVTp!GuardPattern;
            lmM.guardPattern.predicate.addAll(emfTool.getECoreUtil().copyAll(m.guardPattern.predicate.select(
                p | not p.conditionExpression.findReferencedVariables().exists(v | v.oppositePattern().area.isOutputDomain())
                )));
            lmM.bottomPattern = new QVTp!BottomPattern;
            lmM.bottomPattern.assignment.addAll(m.bottomPattern.assignment.select(
                a | not a.findReferencedVariables().exists(v | v.oppositePattern().area.isOutputDomain())
                ).equivalent().select(a | a.isKindOf(QVTp!Assignment)));
            // Move predicates to guard pattern
            lmM.guardPattern.predicate.addAll(emfTool.getECoreUtil().copyAll(m.bottomPattern.predicate.select(
                p | not p.conditionExpression.findReferencedVariables().exists(v | v.oppositePattern().area.isOutputDomain())
                )));
                
		    // Add input domain
		    lmM.domain.add(m.domain.selectOne(d | d.isInputDomain()).equivalent());
		    
		    // Create Middle domain
		    var mM : QVTp!CoreDomain = new QVTp!CoreDomain;
		    var tm = m.getTransforamtion().getMiddleTypedModel().equivalent();
		    mM.isCheckable = false;
		    mM.isEnforceable = true;
		    mM.typedModel = tm;
		    mM.name = tm.name; 
		    mM.guardPattern = new QVTp!GuardPattern;
		    mM.guardPattern.variable.addAll(m.guardPattern.variable.equivalent().select(v | v.~side == "l"));
		    //mM.guardPattern.variable.addAll(m.bottomPattern.variable.equivalent().select(v | v.~side == "l"));
		    lmM.bottomPattern.variable.addAll(m.bottomPattern.variable.equivalent().select(v | v.~side == "l"));
		    mM.bottomPattern = new QVTp!BottomPattern;
		    mM.bottomPattern.realizedVariable.addAll(m.bottomPattern.realizedVariable.equivalent().select(v | v.~side == "l"));
		    lmM.domain.add(mM);
        }
        // FIXME This should be 1 mapping per domain!
        if (m.domain.exists(d | d.isOutputDomain())) {
            // Create MR mapping
            var mrM = new QVTp!Mapping;
		    mappings.add(mrM);
		    mrM.~side = "r";		// FIXME use domain name
            mrM.name = m.name + "_MR";
		    // We need guard patterns first to have a place to move variables and predicates from domains
		    mrM.guardPattern = new QVTp!GuardPattern;
            mrM.guardPattern.predicate.addAll(emfTool.getECoreUtil().copyAll(m.guardPattern.predicate.select(
                p | not p.conditionExpression.findReferencedVariables().exists(v | v.oppositePattern().area.isInputDomain())
                )));
            mrM.bottomPattern = new QVTp!BottomPattern;
            // Move assignments to bottom pattern
            mrM.bottomPattern.assignment.addAll(m.bottomPattern.assignment.select(
                a | not a.findReferencedVariables().exists(v | v.oppositePattern().area.isInputDomain())
                    and not a.findReferencedVariables().forAll(v | v.oppositePattern().area.isMiddleDomain())
                ).equivalent()
                );
                
            // Move predicates to guard pattern
            mrM.guardPattern.predicate.addAll(emfTool.getECoreUtil().copyAll(m.bottomPattern.predicate.select(
                p | not p.conditionExpression.findReferencedVariables().exists(v | v.oppositePattern().area.isInputDomain())
                )));
                
            // MM assignements are transformed to predicates in the guard pattern
            mrM.guardPattern.predicate.addAll(m.bottomPattern.assignment.select(
                a | a.findReferencedVariables().forAll(v | v.oppositePattern().area.isMiddleDomain())
                ).equivalent().select(a | a.isKindOf(QVTp!Predicate)));
            // Add output domains
		    mrM.domain.addAll(m.domain.select(d | d.isOutputDomain()).equivalent());
		    
		    // Create Middle domain
		    var mM : QVTp!CoreDomain = new QVTp!CoreDomain;
		    var tm = m.getTransforamtion().getMiddleTypedModel().equivalent();
		    mM.isCheckable = true;
		    mM.isEnforceable = false;
		    mM.typedModel = tm;
            mM.name = tm.name; 
		    mM.guardPattern = new QVTp!GuardPattern;
		    mM.guardPattern.variable.addAll(m.guardPattern.variable.equivalent().select(v | v.~side == "r"));
		    mM.bottomPattern = new QVTp!BottomPattern;
		    //mM.bottomPattern.variable.addAll(m.bottomPattern.variable.equivalent().select(v | v.~side == "r"));
		    mrM.bottomPattern.variable.addAll(m.bottomPattern.variable.equivalent().select(v | v.~side == "r"));
		    // RealizedVariables to Variables
		    mM.guardPattern.variable.addAll(m.bottomPattern.realizedVariable.equivalent().select(v | v.~side == "r"));
		    mrM.domain.add(mM);
        }
    }

@abstract
rule Assignment
    transform ia : QVTm!Assignment
    to oa : QVTp!Assignment {
        
        guard {
        	if (ia.bottomPattern.area.isTypeOf(QVTm!Mapping)) {
				return ia.bottomPattern.area.specification.isEmpty();
        	} else {
        		return ia.bottomPattern.area.`rule`.specification.isEmpty();
        	}
        }
        oa.isDefault = ia.isDefault;
        oa.value = emfTool.getECoreUtil().copy(ia.value);
    }    

rule PropertyAssignment
    transform ia : QVTm!PropertyAssignment
    to oa : QVTp!PropertyAssignment
    extends Assignment {
        
        guard : not ia.findReferencedVariables()
                .select(v | v.oppositePattern().isDefined())
                .forAll(v |v.oppositePattern().area.isMiddleDomain())
        
        oa.slotExpression =  emfTool.getECoreUtil().copy(ia.slotExpression);
        oa.targetProperty =  ia.targetProperty;
    }    

rule VariableAssignment
    transform ia : QVTm!VariableAssignment
    to oa : QVTp!VariableAssignment
    extends Assignment {
    
        guard : not ia.findReferencedVariables()
                .select(v | v.oppositePattern().isDefined())
                .forAll(v | v.oppositePattern().area.isMiddleDomain())
        
        //ia.toString().println();
        oa.targetVariable = ia.targetVariable;
    }

/** 
 * Middle model assignments are transformed into an assignment in LM and into
 * a predicate in MR. Assignments are only created for mappigns with input
 * domains. Predicates are only created for mappings with output domains.
 */    
rule MMPropertyAssignment
    transform ia : QVTm!PropertyAssignment
    to assgAndPred : Sequence {
        
        guard {
        	var inNotRefinedMapping;
        	if (ia.bottomPattern.area.isTypeOf(QVTm!Mapping)) {
				inNotRefinedMapping = ia.bottomPattern.area.specification.isEmpty();
        	} else {
        		inNotRefinedMapping = ia.bottomPattern.area.`rule`.specification.isEmpty();
        	}
	        	return inNotRefinedMapping and ia.findReferencedVariables().forAll(v | v.oppositePattern().area.isMiddleDomain());
        }
        
        if (ia.bottomPattern.area.domain.exists(d | d.isInputDomain())) {
	        var oa = new QVTp!PropertyAssignment;  
	        assgAndPred.add(oa);
	        oa.isDefault = ia.isDefault;
	        oa.value = emfTool.getECoreUtil().copy(ia.value);
	        oa.slotExpression =  emfTool.getECoreUtil().copy(ia.slotExpression);
	        oa.targetProperty =  ia.targetProperty;
	    }
        if (ia.bottomPattern.area.domain.exists(d | d.isOutputDomain())) {
            var op = new QVTp!Predicate;
            op.conditionExpression = ia.toOCLExpression();
            assgAndPred.add(op);
        }
        
    }    

rule MMVariableAssignment
    transform ia : QVTm!VariableAssignment
    to assgAndPred : Sequence {
        
        guard {
        	var inNotRefinedMapping;
        	if (ia.bottomPattern.area.isTypeOf(QVTm!Mapping)) {
				inNotRefinedMapping = ia.bottomPattern.area.specification.isEmpty();
        	} else {
        		inNotRefinedMapping = ia.bottomPattern.area.`rule`.specification.isEmpty();
        	}
        	return inNotRefinedMapping and ia.findReferencedVariables().forAll(v | v.oppositePattern().area.isMiddleDomain());
        } 
        
        if (ia.bottomPattern.area.domain.exists(d | d.isInputDomain())) {
	        var oa = new QVTp!VariableAssignment;
	        assgAndPred.add(oa);
	        oa.isDefault = ia.isDefault;
	        oa.value = emfTool.getECoreUtil().copy(ia.value);       
	        oa.targetVariable = ia.bottomPattern.equivalent().variable.select(v | v.name = ia.targetVariable.name);
	    }
        if (ia.bottomPattern.area.domain.exists(d | d.isOutputDomain())) {
            var op = new QVTp!Predicate;
            op.conditionExpression = ia.toOCLExpression();
            assgAndPred.add(op);
        }
    }     


rule LDomain
    transform id : QVTm!CoreDomain
    to od : QVTp!CoreDomain {
         
         // Guarded input domains 
         guard : id.`rule`.specification.isEmpty() and id.isInputDomain()
         
         od.name = id.name;
         od.isCheckable = id.isCheckable;
         od.isEnforceable = id.isEnforceable;
         od.typedModel ::= id.typedModel;
         od.guardPattern = new QVTp!GuardPattern;
         od.guardPattern.variable.addAll(id.guardPattern.variable.equivalent());
         od.guardPattern.variable.addAll(id.bottomPattern.variable.equivalent());
         if(id.`rule`.equivalents().isDefined()) {
            id.`rule`.equivalents().flatten().selectOne(m | m.~side = "l").guardPattern.predicate.
                addAll(emfTool.getECoreUtil().copyAll(id.guardPattern.predicate.includingAll(id.bottomPattern.predicate)));
         }
         od.bottomPattern = new QVTp!BottomPattern;
         // Bottom pattern variables (local variables) moved to the mapping's bottom pattern
         // FIXME can we get local variables in L domains?
    }


rule RDomain
    transform id : QVTm!CoreDomain
    to od : QVTp!CoreDomain {
         
         // Guarded input domains 
         guard : id.`rule`.specification.isEmpty() and id.isOutputDomain()
         
         od.name = id.name;
         od.isCheckable = id.isCheckable;
         od.isEnforceable = id.isEnforceable;
         od.typedModel ::= id.typedModel;
         od.guardPattern = new QVTp!GuardPattern;
         od.guardPattern.variable.addAll(id.guardPattern.variable.equivalent());
         od.bottomPattern = new QVTp!BottomPattern;
         // Bottom pattern variables (local variables) moved to the mapping's bottom pattern
         //od.bottomPattern.variable.addAll(id.bottomPattern.variable.equivalent());
         id.`rule`.equivalents().flatten().selectOne(m | m.~side = "r").bottomPattern.variable.addAll(id.bottomPattern.variable.equivalent());
         od.bottomPattern.realizedVariable.addAll(id.bottomPattern.realizedVariable.equivalent());
         // Predicates and assignments are moved to the mapping patterns
         id.`rule`.equivalents().flatten().selectOne(m | m.~side = "r").guardPattern.predicate.
                addAll(emfTool.getECoreUtil().copyAll(id.guardPattern.predicate.includingAll(id.bottomPattern.predicate)));
                
         id.`rule`.equivalent().selectOne(m | m.~side = "r").bottomPattern.assignment.
                addAll(id.bottomPattern.assignment.equivalent());
    }

// Variables and realized variables in L and R domains
rule LRVariable
	transform iv : QVTm!Variable
	to ov : QVTp!Variable {
		
		guard {
			if (iv.oppositePattern().isDefined() and iv.oppositePattern().area.isTypeOf(QVTm!Mapping)) {
				return false;	// Middle variables are trasnformed into two
        	} else {
        		return iv.oppositePattern().isDefined() and iv.oppositePattern().area.`rule`.specification.isEmpty();
        	}
		}
		ov.name = iv.name;
		ov.isImplicit = iv.isIsImplicit();
		if (iv.ownedInit.isDefined()) {
			ov.ownedInit = emfTool.getECoreUtil().copy(iv.ownedInit);
		}
		ov.type = iv.type;
	}

rule LRRealizedVariable
	transform iv : QVTm!RealizedVariable
	to ov : QVTp!RealizedVariable {
		
		guard {
			if (iv.oppositePattern().isDefined() and iv.oppositePattern().area.isTypeOf(QVTm!Mapping)) {
				return false;	// Middle variables are trasnformed into two
        	} else {
        		return iv.oppositePattern().isDefined() and iv.oppositePattern().area.`rule`.specification.isEmpty();
        	}
		}
		ov.name = iv.name;
		ov.isImplicit = iv.isIsImplicit();
		if (iv.ownedInit.isDefined()) {
			ov.ownedInit = emfTool.getECoreUtil().copy(iv.ownedInit);
		}
		ov.type = iv.type;
	}

// Variables and realized variables in M domain
rule MVariable
	transform iv : QVTm!Variable
	to vars : Sequence { // {var, var}
	
		guard {
			if (iv.oppositePattern().isDefined() and  iv.oppositePattern().area.isTypeOf(QVTm!Mapping)) {
				return iv.oppositePattern().area.specification.isEmpty();
        	} else {
        		return false;
        	}
		}
		if (iv.oppositePattern().area.domain.one(d | d.isInputDomain())) {
			var lVar = new QVTp!Variable;
			lVar.name = iv.name;
			lVar.~side = "l";
			lVar.isImplicit = iv.isIsImplicit();
			if (iv.ownedInit.isDefined()) {
				lVar.ownedInit = emfTool.getECoreUtil().copy(iv.ownedInit);
			}
			lVar.type = iv.type;
			vars.add(lVar);
		}
		// FIXME This should be 1 mapping per domain!
        if (iv.oppositePattern().area.domain.exists(d | d.isOutputDomain())) {
        	var rVar = new QVTp!Variable;
			rVar.name = iv.name;
			rVar.~side = "r";		// FIXME use domain name
			rVar.isImplicit = iv.isIsImplicit();
			if (iv.ownedInit.isDefined()) {
				rVar.ownedInit = emfTool.getECoreUtil().copy(iv.ownedInit);
			}
			rVar.type = iv.type;
			vars.add(rVar);
        }
	}

rule MRalizedVariable
	transform iv : QVTm!RealizedVariable
	to vars : Sequence { // {RealizedVar, var}
	
		guard {
			if (iv.oppositePattern().isDefined() and iv.oppositePattern().area.isTypeOf(QVTm!Mapping)) {
				return iv.oppositePattern().area.specification.isEmpty();
        	} else {
        		return false;
        	}
		}
		if (iv.oppositePattern().area.domain.one(d | d.isInputDomain())) {
			var lVar = new QVTp!RealizedVariable;
			lVar.name = iv.name;
			lVar.~side = "l";	// FIXME use domain name
			lVar.isImplicit = iv.isIsImplicit();
			lVar.type = iv.type;
			vars.add(lVar);
		}
		// FIXME This should be 1 mapping per domain!
        if (iv.oppositePattern().area.domain.exists(d | d.isOutputDomain())) {
			var rVar = new QVTp!Variable;
			rVar.name = iv.name;
			rVar.~side = "r";	// FIXME use domain name
			rVar.isImplicit = iv.isIsImplicit();
			rVar.type = iv.type;
			vars.add(rVar);
		}
	}

//============================= END ===========================================

operation  QVTp!RealizedVariable copyToVariable() : QVTp!Variable {
    var v = new QVTp!Variable;
    // Var
    v.isImplicit = self.isImplicit;
    //v.ownedInit = emfTool.getECoreUtil().copy(self.ownedInit);
    v.representedParameter = self.representedParameter;
    // Typed Element
    v.isRequired = self.isRequired;
    v.Type = self.Type;
    // Named Element
    v.name = self.name;
    v.ownedAnnotations = emfTool.getECoreUtil().copyAll(self.ownedAnnotations);
    // Element
    v.ownedExtensions = emfTool.getECoreUtil().copyAll(self.ownedExtensions);
    v.ownedComments = emfTool.getECoreUtil().copyAll(self.ownedComments);
    return v;
}

/****o* /org.eclipse.qvtd.build.etl/helpers/QVTHelpers/toOCLExpression
 * NAME
 *  toOCLExpression - Transforms a property assignment to an OCL Expression
 *
 * CONTEXT
 *  QVT!PropertyAssignment  The assignment to transform
 * SEE ALSO
*/
operation QVT!PropertyAssignment toOCLExpression() : QVT!OperationCallExp {
    var exp = new QVTp!OperationCallExp;
    // It's an '=' operation. TODO, how to get the correct type?
    // KLUDGE hhr 20140801 Getting '=' operation from predicate
    // The correct way would be to query the OCLStdLibrary
    exp.referredOperation = getEqualsOperation();
    exp.name = exp.referredOperation.name;
    // The type is boolean
    exp.type = exp.referredOperation.type;
    // The source is a PropertyCallExp
    exp.ownedSource = new QVTp!PropertyCallExp;
    // The property is the targetProperty
    exp.ownedSource.referredProperty = self.targetProperty;
    // The source of the PropertyCallExp is the slotExpression
    exp.ownedSource.ownedSource = emfTool.getECoreUtil().copy(self.slotExpression);
    exp.ownedSource.type = self.targetProperty.type;
    // The argument is the value
    var args : Set;
    args.add(emfTool.getECoreUtil().copy(self.value));
    exp.ownedArguments = args;
    return exp;
}

/****o* /org.eclipse.qvtd.build.etl/helpers/QVTHelpers/toOCLExpression
 * NAME
 *  toOCLExpression - Transforms a variable assignment to an OCL Expression
 *
 * CONTEXT
 *  QVT!PropertyAssignment  The assignment to transform
 * SEE ALSO
*/
operation QVT!VariableAssignment toOCLExpression() : QVT!OperationCallExp {
    var exp = new QVT!OperationCallExp;
    // It's an '=' operation. TODO, how to get the correct type?
    // KLUDGE hhr 20140801 Getting '=' operation from predicate
    // The correct way would be to query the OCLStdLibrary
    exp.referredOperation =  getEqualsOperation();
    exp.name = exp.referredOperation.name;
    // The type is boolean
    exp.type = exp.referredOperation.type;
    // The source is a PropertyCallExp
    exp.ownedSource = new QVTc!PropertyCallExp;
    // The property is the targetProperty
    exp.ownedSource.referredProperty = self.targetProperty;
    // The source of the PropertyCallExp is the slotExpression
    exp.source.source = emfTool.getECoreUtil().copy(self.slotExpression);
    exp.ownedSource.type = self.targetProperty.type;
    // The argument is the value
    var args : Set;
    var varExp = new QVT!VariableExpression;
    varExp.implict = false;
    varExp.referredVariable = self.bottomPattern.equivalent().variable.select(v | v.name = ia.targetVariable.name);
    args.add(emfTool.getECoreUtil().copy(self.value));
    exp.ownedArguments = args;
    return exp;
}

@cahced
operation getEqualsOperation() : Any {
	return QVTm!Predicate.all().first().conditionExpression.referredOperation;
}

post {
	// Trailing variable references can only be fixed once all the elements are in place
	fixReferences(QVTp!VariableExp.all());
	"Partition Done".println();
}
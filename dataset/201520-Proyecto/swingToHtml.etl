pre{
	var html: new Html5!html;
	var divContainer=null;
	var divContainerTrans=null;
	var constructorPrincipal=null;
	var instancesPrincipal=null;
	var mapPaneles=null;
	var mapClass=null;
	var mapRow=null;
}

rule containterDivContainer
transform j : Swing!ClassUnit
to h : Html5!div {
	guard : ( j.getSuperClass().select(s|s.`to`.name = 'JFrame').size() >0)
	html.container.add(h);
	divContainer=j;
	divContainerTrans=h;
	j.loadPanelesHijos();
	//mapPaneles.println();
	mapRow=new Native("java.util.HashMap");
	var rows=mapPaneles.get(j.name);
	for(row in rows){
		var divcito: new Html5!div;
		divcito.class='row';
		mapRow.put(row,divcito);
		h.innercontainer.add(divcito);
	}
}

rule containterPanel
transform j : Swing!ClassUnit
to h : Html5!div {
	guard : ( j.getSuperClass().select(s|s.`to`.name = 'JPanel').size() >0)
	var row:Html5!div=findRow(mapClass.get(j.name));
	h.id=j.name;
	if(row<>null){
		row.innercontainer.add(h);
	}
	var path=j.source.at(0).region.at(0).file.path;
	var file=loadFile(path);
	var constructor=j.extractConstructor(file);
	var instances=loadAllNewInstances(constructor);
	var fielset=new Html5!fieldset;
	h.innercontainer.add(fielset);
	var legend=new Html5!legend;
	legend.valor=j.loadLegend(constructor);
	fielset.legend=legend;
	"_________________________________________________".println();
	j.name.println();
	"_________________________________________________".println();
	var instances=loadAllNewInstances(constructor);
	var methods=loadAddMethod(constructor);
	var map=j.createMapPanel(methods);
	var mapClassL=j.createMapClass(instances);
	var rows=map.get(j.name);
	for(row in rows){
		var datos=analizarDato(row,map,instances,constructor);
		if(datos<>null){
			fielset.elements.add(datos);
		}
	}
}
operation analizarDato(row,map,instances,constructor){
		var dato:String=findType(instances,row);
		(row+"->"+dato).println();
		if(dato.matches(".*JPanel.*GridBagLayout\\s*\\(\\s*\\).*")){
			var table=verificarElementoCompuesto(row,map,instances,constructor);
			return procesarTabla(table);
		}if(dato.matches(".*JPanel.*GridLayout\\s*\\(.*\\).*")){
			return null;
		}if(dato.matches(".*JPanel.*")){
			return null;
		}else if(dato.matches(".*JButton.*")){
			var element=new Html5!button();
			element.value=getValueButton(dato);
			return element;
		}else{
			return null;
		}
}
operation procesarTabla(tabla){
	var it=tabla.entrySet().iterator();
	var maxX=0;
	var maxY=0;
	while(it.hasNext()){
		var entry=it.next();
		var key=entry.getKey();
		var cordenada=key.split(",");
		key.println();
		var x=Native("java.lang.Integer").parseInt(cordenada[0]);
		var y=Native("java.lang.Integer").parseInt(cordenada[1]);
		if(maxX<x){
			maxX=x;
		}
		if(maxY<y){
			maxY=y;
		}
	}
	var table=new Html5!table;
	var i=0;
	while(i<=maxY){
		var tr=new Html5!tr;
		var j=0;
		while(j<=maxX){
			var td=new Html5!td;
			tr.td.add(td);
			
			j=j+1;
		}
		table.tr.add(tr);
		i=i+1;
	}
	return table;
}
operation verificarElementoCompuesto(key,map,instances,constructor){
	var elements=map.get(key);
	var table=new Native("java.util.HashMap");
	for(element  in elements){
		var dato:String=findType(instances,element);
		loadGrid(constructor,dato,element,table,map,instances);
	}
	return table;
}
operation loadGrid(constructor,dato,key,table,map,instances){
	var grid=null;
	var gridMap=new Native("java.util.HashMap");
	for(line in constructor){
		if(line.matches(".*\\=\\s*new\\s+GridBagConstraints.*")){
			var name=loadNameGridInstance(line);
			var coordenadas=new Native("java.util.ArrayList");
			coordenadas.add(0);
			coordenadas.add(0);
			gridMap.put(name,coordenadas);
		}else if(line.matches(".*gridx\\s*\\=.*")){
			var name=loadGridName(line);
			var cordenadas=gridMap.get(name);
			var value=loadGridValue(line);
			cordenadas.set(0,value);
		}else if(line.matches(".*gridy\\s*\\=.*")){
			var name=loadGridName(line);
			var cordenadas=gridMap.get(name);
			var value=loadGridValue(line);
			cordenadas.set(1,value);
		}
		if(line.matches(".*add\\s*\\(\\s*"+key+"\\s*\\,?.*")){
			var gridName=buscarGridAddName(line);
			//dato.println();
			if(gridName<>null){
				var cordenadas=gridMap.get(gridName);
				key=cordenadas.get(0)+","+cordenadas.get(1);
				if(dato.matches(".*JPanel.*")){
				 	//analizarDato(row,map,instances,constructor);
					//table.put(key,dato);
				}else{
					table.put(key,dato);
				}
			}else{
				line.println();
			}
			break;
		}
	}
}
operation loadNameGridInstance(line){
	var regExp=".+\\s+(\\w+)\\s*\\=.*";
	var pattern=Native("java.util.regex.Pattern").compile(regExp);
	var matcher=pattern.matcher(line);
	matcher.find();
	return matcher.`group`(1);
}
operation buscarGridAddName(line){
	var regExp=".*\\(.*\\,\\s*(\\w+).*";
	var pattern=Native("java.util.regex.Pattern").compile(regExp);
	var matcher=pattern.matcher(line);
	if(matcher.find()){
		return matcher.`group`(1);
	}else{
		return null;
	}
}
operation loadGridValue(asignacion){
	var regExp=".*\\=\\s*(\\d+)\\s*\\;";
	var pattern=Native("java.util.regex.Pattern").compile(regExp);
	var matcher=pattern.matcher(asignacion);
	matcher.find();
	return matcher.`group`(1);
}
operation loadGridName(asignacion){
	var regExp="\\s*(\\w+)\\s*\\..*";
	var pattern=Native("java.util.regex.Pattern").compile(regExp);
	var matcher=pattern.matcher(asignacion);
	matcher.find();
	return matcher.`group`(1);
}
operation getValueButton(button:String){
	var regExp=".*\\(\\s*\\\"(.+)\\\".*";
	var pattern=Native("java.util.regex.Pattern").compile(regExp);
	var matcher=pattern.matcher(button);
	matcher.find();
	return matcher.`group`(1); 
}

operation  findType(instances,name:String){
	for(instance in instances){
		if(instance.contains(name)){
			return instance;
		}
	}
	return "";
}

operation ClassUnit loadLegend(constructor){
	var legened="";
	var regExp=".*TitledBorder\\s*\\(\\s*\\\"(.+)\\\".*";
	var pattern=Native("java.util.regex.Pattern").compile(regExp);
	for(line in constructor){
		var matcher=pattern.matcher(line);
		if(matcher.find()){
			legened=matcher.`group`(1);
			break;
		}
	}
	var inicalizar=buscarMetodoIncializar(constructor);
	if(legened="" and inicalizar){
		var path=self.source.at(0).region.at(0).file.path;
		var file=loadFile(path);
		var method=self.extractMetodoInicializar(file);
		for(line in method){
			var matcher=pattern.matcher(line);
			if(matcher.find()){
				legened=matcher.`group`(1);
				break;
			}
		}
	}
	return legened;
}
operation buscarMetodoIncializar(constructor){
	var hayMethdoInicalizar=false;
	var regExp=".*inicializar\\s*\\(.*\\).*";
	var pattern=Native("java.util.regex.Pattern").compile(regExp);
	for(line in constructor){
		var matcher=pattern.matcher(line);
		if(matcher.find()){
			hayMethdoInicalizar=true;
			break;
		}
	}
	return hayMethdoInicalizar;

}
operation findRow(name:String){
	//mapPaneles.println();
	var it=mapPaneles.entrySet().iterator();
	var principalKey=null;
	while(it.hasNext()){
		var entry=it.next();
		var key=entry.getKey();
		var values=entry.getValue();
		for(value in values){
			if(value=name){
				principalKey=key;
			}
		}
	}
	var row=mapRow.get(principalKey);
	if(row=null){
		row=mapRow.get(name);
	}
	return row ;
}
operation Swing!ClassUnit getSuperClass() : Set
{
	return self.codeRelation.select(s|s.isTypeOf(Swing!Extends)); 
}

operation ClassUnit loadPanelesHijos()
{
	var path=self.source.at(0).region.at(0).file.path;
	//path.println();
	var file=loadFile(path);
	var constructor=self.extractConstructor(file);
	constructorPrincipal=constructor;
	var instances=loadAllNewInstances(constructor);
	instancesPrincipal=instances;
	var methods=loadAddMethod(constructor);
	var map=self.createMapPanel(methods);
	mapPaneles=map;
	mapClass=self.createMapClass(instances);
}

operation ClassUnit createMapClass(instances){
	var map=new Native("java.util.HashMap");
	map.put(self.name,self.name);
	var regExp="\\s*(\\w+)\\s*\\=.*";
	var pattern=Native("java.util.regex.Pattern").compile(regExp);
	var regExp1=".*\\=\\s*new\\s+(\\w+)\\s*\\(.*";
	var pattern1=Native("java.util.regex.Pattern").compile(regExp1);
	for(line in instances){
		var matcher=pattern.matcher(line);
		var matcher1=pattern1.matcher(line);
		matcher.find();
		matcher1.find();
		var value=matcher.`group`(1);
		var key=matcher1.`group`(1);
		map.put(key,value);
	}
	return map;
}

operation ClassUnit createMapPanel(methods){	
	var map=new Native("java.util.HashMap");
	for(line in methods){
		var operacion=identificarOperacion(line);
		if(operacion=1){
			parseNieto(line,map);
		}else if(operacion=2 or operacion=3){
			self.parsePadre(line,map);
		}
	}
	return map;
}

operation parseNieto(line:String,map){
	//line.println();
	var regExp="\\s*(\\w+)\\s*.*";
	var pattern=Native("java.util.regex.Pattern").compile(regExp);
	var matcher=pattern.matcher(line);
	var regExp1=".*add\\s*\\(\\s*(\\w+)\\s*\\,?.*";
	var pattern1=Native("java.util.regex.Pattern").compile(regExp1);
	var matcher1=pattern1.matcher(line);
	matcher.find();
	matcher1.find();
	var key=matcher.`group`(1);
	var value=matcher1.`group`(1);
	var list=null;
	if(map.containsKey(key)){
		list=map.get(key);
	}else{
		list=new Native("java.util.ArrayList");
		map.put(key,list);	
	}
	list.add(value);
}

operation ClassUnit parsePadre(line:String,map){
	//line.println();
	var regExp1=".*add\\s*\\(\\s*(\\w+)\\s*\\,?.*";
	var pattern1=Native("java.util.regex.Pattern").compile(regExp1);
	var matcher1=pattern1.matcher(line);
	matcher1.find();
	var list=null;
	if(map.containsKey(self.name)){
		list=map.get(self.name);
	}else{
		list=new Native("java.util.ArrayList");
		map.put(self.name,list);
	}
	list.add(matcher1.`group`(1));
	
}

operation identificarOperacion(line:String){
	var regExp1="\\s*\\w+\\s*\\.\\s*add\\s*\\(.*";
	var regExp2="\\s*getContentPane\\s*\\(\\s*\\)\\s*\\.\\s*add\\s*\\(.*";
	var regExp3="\\s*add\\s*\\(.*";
	var pattern1=Native("java.util.regex.Pattern").compile(regExp1);
	var pattern2=Native("java.util.regex.Pattern").compile(regExp2);
	var pattern3=Native("java.util.regex.Pattern").compile(regExp3);
	var matcher1=pattern1.matcher(line);
	var matcher2=pattern2.matcher(line);
	var matcher3=pattern3.matcher(line);
	if(matcher1.find()){
		return 1;
	}else if(matcher2.find()){
		return 2;
	}else if(matcher3.find()){
		return 3;
	}
}

operation loadAddMethod(constructor){
	var regExp=".*add\\s*\\(.*";
	var pattern=Native("java.util.regex.Pattern").compile(regExp);
	var addMethods=new Native("java.util.ArrayList");
	for(line in constructor){
		var matcher=pattern.matcher(line);
		if(matcher.find()){
			addMethods.add(line);
		}
	}
	/*
	for(line in addMethods ){
		line.println();
	}*/
	return addMethods;
}

operation loadAllNewInstances(constructor){
	var regExp=".*\\s+\\w+\\s*\\=\\s*new\\s+\\w+\\s*\\(.*\\)\\s*\\;\\s*";
	var pattern=Native("java.util.regex.Pattern").compile(regExp);
	var instances=new Native("java.util.ArrayList");
	for(line in constructor){
		var matcher=pattern.matcher(line);
		if(matcher.find()){
			instances.add(line);
		}
	}
	/*for(line in instances ){
		line.println();
	}*/
	return instances;
	
}
operation ClassUnit extractConstructor(file){
	//file.println();
	var regExp="\\s*public\\s+"+self.name+"\\s*\\(.*\\)\\s*\\{?\\s*";
	var pattern=Native("java.util.regex.Pattern").compile(regExp);
	var constructor=new Native("java.util.ArrayList");
	var llavesAbre=0;
	var llavesCierra=0;
	var encontroConstructor=false;
	for(line in file ){
		if(not encontroConstructor){
			var matcher=pattern.matcher(line);
			if(matcher.find()){
				encontroConstructor=true;
			}
		}
		if(encontroConstructor){
			constructor.add(line);
			llavesAbre=llavesAbre+contarCorchetesAbiertos(line);
			llavesCierra=llavesCierra+contarCorchetesCerrados(line);
			if(llavesAbre>0 and llavesAbre==llavesCierra){
				break;
			}
		}
	}
	/*for(line in constructor ){
		line.println();
	}*/
	return constructor;
}
operation contarCorchetesAbiertos(line:String){
	var pattern=Native("java.util.regex.Pattern").compile("\\{");
	var matcher=pattern.matcher(line);
	var i=0;
	while(matcher.find()){
		i=i+1;
	}
	return i;
}
operation contarCorchetesCerrados(line:String){
	var pattern=Native("java.util.regex.Pattern").compile("\\}");
	var matcher=pattern.matcher(line);
	var i=0;
	while(matcher.find()){
		i=i+1;
	}
	return i;
}

operation loadFile(path:String){
	var file = new Native("java.io.File")(path);
	var fileReader=new Native("java.io.FileReader")(file);
	var bufferReader=new Native("java.io.BufferedReader")(fileReader);
	var fileArray=new Native("java.util.ArrayList");
	var line=bufferReader.readLine();
	var fileString="";
	while(line<>null){
		fileArray.add(fileString+line);
		line=bufferReader.readLine();
	}
	return fileArray;
}

operation ClassUnit extractMetodoInicializar(file){
	var regExp="\\s*private\\s+void\\s+inicializar\\s*\\(\\s*\\)\\s*\\{?\\s*";
	var pattern=Native("java.util.regex.Pattern").compile(regExp);
	var method=new Native("java.util.ArrayList");
	var llavesAbre=0;
	var llavesCierra=0;
	var encontroMethod=false;
	for(line in file ){
		if(not encontroMethod){
			var matcher=pattern.matcher(line);
			if(matcher.find()){
				encontroMethod=true;
			}
		}
		if(encontroMethod){
			method.add(line);
			llavesAbre=llavesAbre+contarCorchetesAbiertos(line);
			llavesCierra=llavesCierra+contarCorchetesCerrados(line);
			if(llavesAbre>0 and llavesAbre==llavesCierra){
				break;
			}
		}
	}
	/*for(line in constructor ){
		line.println();
	}*/
	return method;
}
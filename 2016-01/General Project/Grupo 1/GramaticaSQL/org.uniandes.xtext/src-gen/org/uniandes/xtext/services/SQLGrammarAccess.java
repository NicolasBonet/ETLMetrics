/*
 * generated by Xtext 2.9.1
 */
package org.uniandes.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SQLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class DataBaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.xtext.SQL.DataBase");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDataBaseAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTableTableParserRuleCall_1_0 = (RuleCall)cTableAssignment_1.eContents().get(0);
		
		//DataBase:
		//	{DataBase} table+=Table+;
		@Override public ParserRule getRule() { return rule; }
		
		//{DataBase} table+=Table+
		public Group getGroup() { return cGroup; }
		
		//{DataBase}
		public Action getDataBaseAction_0() { return cDataBaseAction_0; }
		
		//table+=Table+
		public Assignment getTableAssignment_1() { return cTableAssignment_1; }
		
		//Table
		public RuleCall getTableTableParserRuleCall_1_0() { return cTableTableParserRuleCall_1_0; }
	}
	public class TableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.xtext.SQL.Table");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCREATETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cCTABLETerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final RuleCall cLPARENTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cColumnAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cColumnColumnParserRuleCall_4_0 = (RuleCall)cColumnAssignment_4.eContents().get(0);
		private final Assignment cPrimarykeyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cPrimarykeyPrimaryKeyParserRuleCall_5_0 = (RuleCall)cPrimarykeyAssignment_5.eContents().get(0);
		private final Assignment cForeignkeyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cForeignkeyForeignKeyParserRuleCall_6_0 = (RuleCall)cForeignkeyAssignment_6.eContents().get(0);
		private final RuleCall cRPARENTTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//Table:
		//	CREATE CTABLE name=ID
		//	LPARENT
		//	column+=Column+
		//	primarykey=PrimaryKey
		//	foreignkey+=ForeignKey*
		//	RPARENT;
		@Override public ParserRule getRule() { return rule; }
		
		//CREATE CTABLE name=ID LPARENT column+=Column+ primarykey=PrimaryKey foreignkey+=ForeignKey* RPARENT
		public Group getGroup() { return cGroup; }
		
		//CREATE
		public RuleCall getCREATETerminalRuleCall_0() { return cCREATETerminalRuleCall_0; }
		
		//CTABLE
		public RuleCall getCTABLETerminalRuleCall_1() { return cCTABLETerminalRuleCall_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//LPARENT
		public RuleCall getLPARENTTerminalRuleCall_3() { return cLPARENTTerminalRuleCall_3; }
		
		//column+=Column+
		public Assignment getColumnAssignment_4() { return cColumnAssignment_4; }
		
		//Column
		public RuleCall getColumnColumnParserRuleCall_4_0() { return cColumnColumnParserRuleCall_4_0; }
		
		//primarykey=PrimaryKey
		public Assignment getPrimarykeyAssignment_5() { return cPrimarykeyAssignment_5; }
		
		//PrimaryKey
		public RuleCall getPrimarykeyPrimaryKeyParserRuleCall_5_0() { return cPrimarykeyPrimaryKeyParserRuleCall_5_0; }
		
		//foreignkey+=ForeignKey*
		public Assignment getForeignkeyAssignment_6() { return cForeignkeyAssignment_6; }
		
		//ForeignKey
		public RuleCall getForeignkeyForeignKeyParserRuleCall_6_0() { return cForeignkeyForeignKeyParserRuleCall_6_0; }
		
		//RPARENT
		public RuleCall getRPARENTTerminalRuleCall_7() { return cRPARENTTerminalRuleCall_7; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.xtext.SQL.Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cTypeDataTypeEnumRuleCall_1_0_0 = (RuleCall)cTypeAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final RuleCall cLPARENTTerminalRuleCall_1_1_0 = (RuleCall)cGroup_1_1.eContents().get(0);
		private final RuleCall cNUMBERTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final RuleCall cRPARENTTerminalRuleCall_1_1_2 = (RuleCall)cGroup_1_1.eContents().get(2);
		private final Assignment cIsNullAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIsNullNOT_NULLTerminalRuleCall_1_2_0 = (RuleCall)cIsNullAssignment_1_2.eContents().get(0);
		private final RuleCall cCOMMATerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//Column:
		//	name=ID (type=DataType (LPARENT NUMBER RPARENT)? isNull?=NOT_NULL?)? COMMA?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID (type=DataType (LPARENT NUMBER RPARENT)? isNull?=NOT_NULL?)? COMMA?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//(type=DataType (LPARENT NUMBER RPARENT)? isNull?=NOT_NULL?)?
		public Group getGroup_1() { return cGroup_1; }
		
		//type=DataType
		public Assignment getTypeAssignment_1_0() { return cTypeAssignment_1_0; }
		
		//DataType
		public RuleCall getTypeDataTypeEnumRuleCall_1_0_0() { return cTypeDataTypeEnumRuleCall_1_0_0; }
		
		//(LPARENT NUMBER RPARENT)?
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//LPARENT
		public RuleCall getLPARENTTerminalRuleCall_1_1_0() { return cLPARENTTerminalRuleCall_1_1_0; }
		
		//NUMBER
		public RuleCall getNUMBERTerminalRuleCall_1_1_1() { return cNUMBERTerminalRuleCall_1_1_1; }
		
		//RPARENT
		public RuleCall getRPARENTTerminalRuleCall_1_1_2() { return cRPARENTTerminalRuleCall_1_1_2; }
		
		//isNull?=NOT_NULL?
		public Assignment getIsNullAssignment_1_2() { return cIsNullAssignment_1_2; }
		
		//NOT_NULL
		public RuleCall getIsNullNOT_NULLTerminalRuleCall_1_2_0() { return cIsNullNOT_NULLTerminalRuleCall_1_2_0; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_2() { return cCOMMATerminalRuleCall_2; }
	}
	public class PrimaryKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.xtext.SQL.PrimaryKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPRIMARYTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cKEYTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cLPARENTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cColumnAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cColumnColumnCrossReference_3_0 = (CrossReference)cColumnAssignment_3.eContents().get(0);
		private final RuleCall cColumnColumnIDTerminalRuleCall_3_0_1 = (RuleCall)cColumnColumnCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cCOMMATerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cColumnAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cColumnColumnCrossReference_4_1_0 = (CrossReference)cColumnAssignment_4_1.eContents().get(0);
		private final RuleCall cColumnColumnIDTerminalRuleCall_4_1_0_1 = (RuleCall)cColumnColumnCrossReference_4_1_0.eContents().get(1);
		private final RuleCall cRPARENTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cCOMMATerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//PrimaryKey:
		//	PRIMARY KEY LPARENT column+=[Column] (COMMA+ column+=[Column])* RPARENT COMMA?;
		@Override public ParserRule getRule() { return rule; }
		
		//PRIMARY KEY LPARENT column+=[Column] (COMMA+ column+=[Column])* RPARENT COMMA?
		public Group getGroup() { return cGroup; }
		
		//PRIMARY
		public RuleCall getPRIMARYTerminalRuleCall_0() { return cPRIMARYTerminalRuleCall_0; }
		
		//KEY
		public RuleCall getKEYTerminalRuleCall_1() { return cKEYTerminalRuleCall_1; }
		
		//LPARENT
		public RuleCall getLPARENTTerminalRuleCall_2() { return cLPARENTTerminalRuleCall_2; }
		
		//column+=[Column]
		public Assignment getColumnAssignment_3() { return cColumnAssignment_3; }
		
		//[Column]
		public CrossReference getColumnColumnCrossReference_3_0() { return cColumnColumnCrossReference_3_0; }
		
		//ID
		public RuleCall getColumnColumnIDTerminalRuleCall_3_0_1() { return cColumnColumnIDTerminalRuleCall_3_0_1; }
		
		//(COMMA+ column+=[Column])*
		public Group getGroup_4() { return cGroup_4; }
		
		//COMMA+
		public RuleCall getCOMMATerminalRuleCall_4_0() { return cCOMMATerminalRuleCall_4_0; }
		
		//column+=[Column]
		public Assignment getColumnAssignment_4_1() { return cColumnAssignment_4_1; }
		
		//[Column]
		public CrossReference getColumnColumnCrossReference_4_1_0() { return cColumnColumnCrossReference_4_1_0; }
		
		//ID
		public RuleCall getColumnColumnIDTerminalRuleCall_4_1_0_1() { return cColumnColumnIDTerminalRuleCall_4_1_0_1; }
		
		//RPARENT
		public RuleCall getRPARENTTerminalRuleCall_5() { return cRPARENTTerminalRuleCall_5; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_6() { return cCOMMATerminalRuleCall_6; }
	}
	public class ForeignKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.xtext.SQL.ForeignKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cFOREIGNTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final RuleCall cKEYTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cLPARENTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cColumnAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cColumnColumnCrossReference_3_0 = (CrossReference)cColumnAssignment_3.eContents().get(0);
		private final RuleCall cColumnColumnIDTerminalRuleCall_3_0_1 = (RuleCall)cColumnColumnCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cCOMMATerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cColumnAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cColumnColumnCrossReference_4_1_0 = (CrossReference)cColumnAssignment_4_1.eContents().get(0);
		private final RuleCall cColumnColumnIDTerminalRuleCall_4_1_0_1 = (RuleCall)cColumnColumnCrossReference_4_1_0.eContents().get(1);
		private final RuleCall cRPARENTTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cREFERENCESTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final Assignment cTableRefAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cTableRefTableCrossReference_7_0 = (CrossReference)cTableRefAssignment_7.eContents().get(0);
		private final RuleCall cTableRefTableIDTerminalRuleCall_7_0_1 = (RuleCall)cTableRefTableCrossReference_7_0.eContents().get(1);
		private final RuleCall cLPARENTTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		private final Assignment cColumnsRefAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cColumnsRefColumnCrossReference_9_0 = (CrossReference)cColumnsRefAssignment_9.eContents().get(0);
		private final RuleCall cColumnsRefColumnIDTerminalRuleCall_9_0_1 = (RuleCall)cColumnsRefColumnCrossReference_9_0.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final RuleCall cCOMMATerminalRuleCall_10_0 = (RuleCall)cGroup_10.eContents().get(0);
		private final Assignment cColumnsRefAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final CrossReference cColumnsRefColumnCrossReference_10_1_0 = (CrossReference)cColumnsRefAssignment_10_1.eContents().get(0);
		private final RuleCall cColumnsRefColumnIDTerminalRuleCall_10_1_0_1 = (RuleCall)cColumnsRefColumnCrossReference_10_1_0.eContents().get(1);
		private final RuleCall cRPARENTTerminalRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final RuleCall cCOMMATerminalRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		
		//ForeignKey:
		//	FOREIGN KEY LPARENT column+=[Column] (COMMA+ column+=[Column])* RPARENT REFERENCES tableRef=[Table] LPARENT
		//	columnsRef+=[Column] (COMMA+ columnsRef+=[Column])* RPARENT COMMA?;
		@Override public ParserRule getRule() { return rule; }
		
		//FOREIGN KEY LPARENT column+=[Column] (COMMA+ column+=[Column])* RPARENT REFERENCES tableRef=[Table] LPARENT
		//columnsRef+=[Column] (COMMA+ columnsRef+=[Column])* RPARENT COMMA?
		public Group getGroup() { return cGroup; }
		
		//FOREIGN
		public RuleCall getFOREIGNTerminalRuleCall_0() { return cFOREIGNTerminalRuleCall_0; }
		
		//KEY
		public RuleCall getKEYTerminalRuleCall_1() { return cKEYTerminalRuleCall_1; }
		
		//LPARENT
		public RuleCall getLPARENTTerminalRuleCall_2() { return cLPARENTTerminalRuleCall_2; }
		
		//column+=[Column]
		public Assignment getColumnAssignment_3() { return cColumnAssignment_3; }
		
		//[Column]
		public CrossReference getColumnColumnCrossReference_3_0() { return cColumnColumnCrossReference_3_0; }
		
		//ID
		public RuleCall getColumnColumnIDTerminalRuleCall_3_0_1() { return cColumnColumnIDTerminalRuleCall_3_0_1; }
		
		//(COMMA+ column+=[Column])*
		public Group getGroup_4() { return cGroup_4; }
		
		//COMMA+
		public RuleCall getCOMMATerminalRuleCall_4_0() { return cCOMMATerminalRuleCall_4_0; }
		
		//column+=[Column]
		public Assignment getColumnAssignment_4_1() { return cColumnAssignment_4_1; }
		
		//[Column]
		public CrossReference getColumnColumnCrossReference_4_1_0() { return cColumnColumnCrossReference_4_1_0; }
		
		//ID
		public RuleCall getColumnColumnIDTerminalRuleCall_4_1_0_1() { return cColumnColumnIDTerminalRuleCall_4_1_0_1; }
		
		//RPARENT
		public RuleCall getRPARENTTerminalRuleCall_5() { return cRPARENTTerminalRuleCall_5; }
		
		//REFERENCES
		public RuleCall getREFERENCESTerminalRuleCall_6() { return cREFERENCESTerminalRuleCall_6; }
		
		//tableRef=[Table]
		public Assignment getTableRefAssignment_7() { return cTableRefAssignment_7; }
		
		//[Table]
		public CrossReference getTableRefTableCrossReference_7_0() { return cTableRefTableCrossReference_7_0; }
		
		//ID
		public RuleCall getTableRefTableIDTerminalRuleCall_7_0_1() { return cTableRefTableIDTerminalRuleCall_7_0_1; }
		
		//LPARENT
		public RuleCall getLPARENTTerminalRuleCall_8() { return cLPARENTTerminalRuleCall_8; }
		
		//columnsRef+=[Column]
		public Assignment getColumnsRefAssignment_9() { return cColumnsRefAssignment_9; }
		
		//[Column]
		public CrossReference getColumnsRefColumnCrossReference_9_0() { return cColumnsRefColumnCrossReference_9_0; }
		
		//ID
		public RuleCall getColumnsRefColumnIDTerminalRuleCall_9_0_1() { return cColumnsRefColumnIDTerminalRuleCall_9_0_1; }
		
		//(COMMA+ columnsRef+=[Column])*
		public Group getGroup_10() { return cGroup_10; }
		
		//COMMA+
		public RuleCall getCOMMATerminalRuleCall_10_0() { return cCOMMATerminalRuleCall_10_0; }
		
		//columnsRef+=[Column]
		public Assignment getColumnsRefAssignment_10_1() { return cColumnsRefAssignment_10_1; }
		
		//[Column]
		public CrossReference getColumnsRefColumnCrossReference_10_1_0() { return cColumnsRefColumnCrossReference_10_1_0; }
		
		//ID
		public RuleCall getColumnsRefColumnIDTerminalRuleCall_10_1_0_1() { return cColumnsRefColumnIDTerminalRuleCall_10_1_0_1; }
		
		//RPARENT
		public RuleCall getRPARENTTerminalRuleCall_11() { return cRPARENTTerminalRuleCall_11; }
		
		//COMMA?
		public RuleCall getCOMMATerminalRuleCall_12() { return cCOMMATerminalRuleCall_12; }
	}
	
	public class DataTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.xtext.SQL.DataType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVarcharEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVarcharVarcharKeyword_0_0 = (Keyword)cVarcharEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntIntKeyword_1_0 = (Keyword)cIntEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBooleanBooleanKeyword_2_0 = (Keyword)cBooleanEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDateEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDateDateKeyword_3_0 = (Keyword)cDateEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cNumberEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cNumberNumberKeyword_4_0 = (Keyword)cNumberEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum DataType:
		//	varchar | int | boolean | date | number;
		public EnumRule getRule() { return rule; }
		
		//varchar | int | boolean | date | number
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//varchar
		public EnumLiteralDeclaration getVarcharEnumLiteralDeclaration_0() { return cVarcharEnumLiteralDeclaration_0; }
		
		//"varchar"
		public Keyword getVarcharVarcharKeyword_0_0() { return cVarcharVarcharKeyword_0_0; }
		
		//int
		public EnumLiteralDeclaration getIntEnumLiteralDeclaration_1() { return cIntEnumLiteralDeclaration_1; }
		
		//"int"
		public Keyword getIntIntKeyword_1_0() { return cIntIntKeyword_1_0; }
		
		//boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_2() { return cBooleanEnumLiteralDeclaration_2; }
		
		//"boolean"
		public Keyword getBooleanBooleanKeyword_2_0() { return cBooleanBooleanKeyword_2_0; }
		
		//date
		public EnumLiteralDeclaration getDateEnumLiteralDeclaration_3() { return cDateEnumLiteralDeclaration_3; }
		
		//"date"
		public Keyword getDateDateKeyword_3_0() { return cDateDateKeyword_3_0; }
		
		//number
		public EnumLiteralDeclaration getNumberEnumLiteralDeclaration_4() { return cNumberEnumLiteralDeclaration_4; }
		
		//"number"
		public Keyword getNumberNumberKeyword_4_0() { return cNumberNumberKeyword_4_0; }
	}
	
	private final DataBaseElements pDataBase;
	private final TableElements pTable;
	private final ColumnElements pColumn;
	private final PrimaryKeyElements pPrimaryKey;
	private final ForeignKeyElements pForeignKey;
	private final DataTypeElements eDataType;
	private final TerminalRule tCREATE;
	private final TerminalRule tCTABLE;
	private final TerminalRule tLPARENT;
	private final TerminalRule tRPARENT;
	private final TerminalRule tCOMMA;
	private final TerminalRule tFOREIGN;
	private final TerminalRule tPRIMARY;
	private final TerminalRule tKEY;
	private final TerminalRule tNOT_NULL;
	private final TerminalRule tREFERENCES;
	private final TerminalRule tID;
	private final TerminalRule tNUMBER;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SQLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pDataBase = new DataBaseElements();
		this.pTable = new TableElements();
		this.pColumn = new ColumnElements();
		this.pPrimaryKey = new PrimaryKeyElements();
		this.pForeignKey = new ForeignKeyElements();
		this.eDataType = new DataTypeElements();
		this.tCREATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.xtext.SQL.CREATE");
		this.tCTABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.xtext.SQL.CTABLE");
		this.tLPARENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.xtext.SQL.LPARENT");
		this.tRPARENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.xtext.SQL.RPARENT");
		this.tCOMMA = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.xtext.SQL.COMMA");
		this.tFOREIGN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.xtext.SQL.FOREIGN");
		this.tPRIMARY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.xtext.SQL.PRIMARY");
		this.tKEY = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.xtext.SQL.KEY");
		this.tNOT_NULL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.xtext.SQL.NOT_NULL");
		this.tREFERENCES = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.xtext.SQL.REFERENCES");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.xtext.SQL.ID");
		this.tNUMBER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.uniandes.xtext.SQL.NUMBER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.uniandes.xtext.SQL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//DataBase:
	//	{DataBase} table+=Table+;
	public DataBaseElements getDataBaseAccess() {
		return pDataBase;
	}
	
	public ParserRule getDataBaseRule() {
		return getDataBaseAccess().getRule();
	}
	
	//Table:
	//	CREATE CTABLE name=ID
	//	LPARENT
	//	column+=Column+
	//	primarykey=PrimaryKey
	//	foreignkey+=ForeignKey*
	//	RPARENT;
	public TableElements getTableAccess() {
		return pTable;
	}
	
	public ParserRule getTableRule() {
		return getTableAccess().getRule();
	}
	
	//Column:
	//	name=ID (type=DataType (LPARENT NUMBER RPARENT)? isNull?=NOT_NULL?)? COMMA?;
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//PrimaryKey:
	//	PRIMARY KEY LPARENT column+=[Column] (COMMA+ column+=[Column])* RPARENT COMMA?;
	public PrimaryKeyElements getPrimaryKeyAccess() {
		return pPrimaryKey;
	}
	
	public ParserRule getPrimaryKeyRule() {
		return getPrimaryKeyAccess().getRule();
	}
	
	//ForeignKey:
	//	FOREIGN KEY LPARENT column+=[Column] (COMMA+ column+=[Column])* RPARENT REFERENCES tableRef=[Table] LPARENT
	//	columnsRef+=[Column] (COMMA+ columnsRef+=[Column])* RPARENT COMMA?;
	public ForeignKeyElements getForeignKeyAccess() {
		return pForeignKey;
	}
	
	public ParserRule getForeignKeyRule() {
		return getForeignKeyAccess().getRule();
	}
	
	//enum DataType:
	//	varchar | int | boolean | date | number;
	public DataTypeElements getDataTypeAccess() {
		return eDataType;
	}
	
	public EnumRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}
	
	//terminal CREATE:
	//	"CREATE";
	public TerminalRule getCREATERule() {
		return tCREATE;
	}
	
	//terminal CTABLE:
	//	"TABLE";
	public TerminalRule getCTABLERule() {
		return tCTABLE;
	}
	
	//terminal LPARENT:
	//	"(";
	public TerminalRule getLPARENTRule() {
		return tLPARENT;
	}
	
	//terminal RPARENT:
	//	")";
	public TerminalRule getRPARENTRule() {
		return tRPARENT;
	}
	
	//terminal COMMA:
	//	",";
	public TerminalRule getCOMMARule() {
		return tCOMMA;
	}
	
	//terminal FOREIGN:
	//	"FOREIGN";
	public TerminalRule getFOREIGNRule() {
		return tFOREIGN;
	}
	
	//terminal PRIMARY:
	//	"PRIMARY";
	public TerminalRule getPRIMARYRule() {
		return tPRIMARY;
	}
	
	//terminal KEY:
	//	"KEY";
	public TerminalRule getKEYRule() {
		return tKEY;
	}
	
	//terminal NOT_NULL:
	//	"NOT NULL";
	public TerminalRule getNOT_NULLRule() {
		return tNOT_NULL;
	}
	
	//terminal REFERENCES:
	//	"REFERENCES";
	public TerminalRule getREFERENCESRule() {
		return tREFERENCES;
	}
	
	//terminal ID:
	//	"A".."z" ("0".."9" | "A".."Z" | "a".."z")*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal NUMBER:
	//	"0".."9"*;
	public TerminalRule getNUMBERRule() {
		return tNUMBER;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}

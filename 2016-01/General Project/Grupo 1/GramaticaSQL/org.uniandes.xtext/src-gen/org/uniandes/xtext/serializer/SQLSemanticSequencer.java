/*
 * generated by Xtext 2.9.1
 */
package org.uniandes.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.uniandes.xtext.sQL.Column;
import org.uniandes.xtext.sQL.DataBase;
import org.uniandes.xtext.sQL.ForeignKey;
import org.uniandes.xtext.sQL.PrimaryKey;
import org.uniandes.xtext.sQL.SQLPackage;
import org.uniandes.xtext.sQL.Table;
import org.uniandes.xtext.services.SQLGrammarAccess;

@SuppressWarnings("all")
public class SQLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SQLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SQLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SQLPackage.COLUMN:
				sequence_Column(context, (Column) semanticObject); 
				return; 
			case SQLPackage.DATA_BASE:
				sequence_DataBase(context, (DataBase) semanticObject); 
				return; 
			case SQLPackage.FOREIGN_KEY:
				sequence_ForeignKey(context, (ForeignKey) semanticObject); 
				return; 
			case SQLPackage.PRIMARY_KEY:
				sequence_PrimaryKey(context, (PrimaryKey) semanticObject); 
				return; 
			case SQLPackage.TABLE:
				sequence_Table(context, (Table) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Column returns Column
	 *
	 * Constraint:
	 *     (name=ID (type=DataType isNull?=NOT_NULL?)?)
	 */
	protected void sequence_Column(ISerializationContext context, Column semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataBase returns DataBase
	 *
	 * Constraint:
	 *     table+=Table+
	 */
	protected void sequence_DataBase(ISerializationContext context, DataBase semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ForeignKey returns ForeignKey
	 *
	 * Constraint:
	 *     (column+=[Column|ID] column+=[Column|ID]* tableRef=[Table|ID] columnsRef+=[Column|ID] columnsRef+=[Column|ID]*)
	 */
	protected void sequence_ForeignKey(ISerializationContext context, ForeignKey semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrimaryKey returns PrimaryKey
	 *
	 * Constraint:
	 *     (column+=[Column|ID] column+=[Column|ID]*)
	 */
	protected void sequence_PrimaryKey(ISerializationContext context, PrimaryKey semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Table returns Table
	 *
	 * Constraint:
	 *     (name=ID column+=Column+ primarykey=PrimaryKey foreignkey+=ForeignKey*)
	 */
	protected void sequence_Table(ISerializationContext context, Table semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}

/*
 * generated by Xtext 2.9.1
 */
grammar InternalSQL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.uniandes.xtext.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.uniandes.xtext.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.uniandes.xtext.services.SQLGrammarAccess;

}

@parser::members {

 	private SQLGrammarAccess grammarAccess;

    public InternalSQLParser(TokenStream input, SQLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "DataBase";
   	}

   	@Override
   	protected SQLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDataBase
entryRuleDataBase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataBaseRule()); }
	iv_ruleDataBase=ruleDataBase
	{ $current=$iv_ruleDataBase.current; }
	EOF;

// Rule DataBase
ruleDataBase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDataBaseAccess().getDataBaseAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDataBaseAccess().getTableTableParserRuleCall_1_0());
				}
				lv_table_1_0=ruleTable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDataBaseRule());
					}
					add(
						$current,
						"table",
						lv_table_1_0,
						"org.uniandes.xtext.SQL.Table");
					afterParserOrEnumRuleCall();
				}
			)
		)+
	)
;

// Entry rule entryRuleTable
entryRuleTable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTableRule()); }
	iv_ruleTable=ruleTable
	{ $current=$iv_ruleTable.current; }
	EOF;

// Rule Table
ruleTable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_CREATE_0=RULE_CREATE
		{
			newLeafNode(this_CREATE_0, grammarAccess.getTableAccess().getCREATETerminalRuleCall_0());
		}
		this_CTABLE_1=RULE_CTABLE
		{
			newLeafNode(this_CTABLE_1, grammarAccess.getTableAccess().getCTABLETerminalRuleCall_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getTableAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.uniandes.xtext.SQL.ID");
				}
			)
		)
		this_LPARENT_3=RULE_LPARENT
		{
			newLeafNode(this_LPARENT_3, grammarAccess.getTableAccess().getLPARENTTerminalRuleCall_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTableAccess().getColumnColumnParserRuleCall_4_0());
				}
				lv_column_4_0=ruleColumn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableRule());
					}
					add(
						$current,
						"column",
						lv_column_4_0,
						"org.uniandes.xtext.SQL.Column");
					afterParserOrEnumRuleCall();
				}
			)
		)+
		(
			(
				{
					newCompositeNode(grammarAccess.getTableAccess().getPrimarykeyPrimaryKeyParserRuleCall_5_0());
				}
				lv_primarykey_5_0=rulePrimaryKey
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableRule());
					}
					set(
						$current,
						"primarykey",
						lv_primarykey_5_0,
						"org.uniandes.xtext.SQL.PrimaryKey");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getTableAccess().getForeignkeyForeignKeyParserRuleCall_6_0());
				}
				lv_foreignkey_6_0=ruleForeignKey
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableRule());
					}
					add(
						$current,
						"foreignkey",
						lv_foreignkey_6_0,
						"org.uniandes.xtext.SQL.ForeignKey");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		this_RPARENT_7=RULE_RPARENT
		{
			newLeafNode(this_RPARENT_7, grammarAccess.getTableAccess().getRPARENTTerminalRuleCall_7());
		}
	)
;

// Entry rule entryRuleColumn
entryRuleColumn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnRule()); }
	iv_ruleColumn=ruleColumn
	{ $current=$iv_ruleColumn.current; }
	EOF;

// Rule Column
ruleColumn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColumnRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.uniandes.xtext.SQL.ID");
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getColumnAccess().getTypeDataTypeEnumRuleCall_1_0_0());
					}
					lv_type_1_0=ruleDataType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getColumnRule());
						}
						set(
							$current,
							"type",
							lv_type_1_0,
							"org.uniandes.xtext.SQL.DataType");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				this_LPARENT_2=RULE_LPARENT
				{
					newLeafNode(this_LPARENT_2, grammarAccess.getColumnAccess().getLPARENTTerminalRuleCall_1_1_0());
				}
				this_NUMBER_3=RULE_NUMBER
				{
					newLeafNode(this_NUMBER_3, grammarAccess.getColumnAccess().getNUMBERTerminalRuleCall_1_1_1());
				}
				this_RPARENT_4=RULE_RPARENT
				{
					newLeafNode(this_RPARENT_4, grammarAccess.getColumnAccess().getRPARENTTerminalRuleCall_1_1_2());
				}
			)?
			(
				(
					lv_isNull_5_0=RULE_NOT_NULL
					{
						newLeafNode(lv_isNull_5_0, grammarAccess.getColumnAccess().getIsNullNOT_NULLTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColumnRule());
						}
						setWithLastConsumed(
							$current,
							"isNull",
							true,
							"org.uniandes.xtext.SQL.NOT_NULL");
					}
				)
			)?
		)?
		(
			this_COMMA_6=RULE_COMMA
			{
				newLeafNode(this_COMMA_6, grammarAccess.getColumnAccess().getCOMMATerminalRuleCall_2());
			}
		)?
	)
;

// Entry rule entryRulePrimaryKey
entryRulePrimaryKey returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryKeyRule()); }
	iv_rulePrimaryKey=rulePrimaryKey
	{ $current=$iv_rulePrimaryKey.current; }
	EOF;

// Rule PrimaryKey
rulePrimaryKey returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_PRIMARY_0=RULE_PRIMARY
		{
			newLeafNode(this_PRIMARY_0, grammarAccess.getPrimaryKeyAccess().getPRIMARYTerminalRuleCall_0());
		}
		this_KEY_1=RULE_KEY
		{
			newLeafNode(this_KEY_1, grammarAccess.getPrimaryKeyAccess().getKEYTerminalRuleCall_1());
		}
		this_LPARENT_2=RULE_LPARENT
		{
			newLeafNode(this_LPARENT_2, grammarAccess.getPrimaryKeyAccess().getLPARENTTerminalRuleCall_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrimaryKeyRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getPrimaryKeyAccess().getColumnColumnCrossReference_3_0());
				}
			)
		)
		(
			(
				this_COMMA_4=RULE_COMMA
				{
					newLeafNode(this_COMMA_4, grammarAccess.getPrimaryKeyAccess().getCOMMATerminalRuleCall_4_0());
				}
			)+
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrimaryKeyRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getPrimaryKeyAccess().getColumnColumnCrossReference_4_1_0());
					}
				)
			)
		)*
		this_RPARENT_6=RULE_RPARENT
		{
			newLeafNode(this_RPARENT_6, grammarAccess.getPrimaryKeyAccess().getRPARENTTerminalRuleCall_5());
		}
		(
			this_COMMA_7=RULE_COMMA
			{
				newLeafNode(this_COMMA_7, grammarAccess.getPrimaryKeyAccess().getCOMMATerminalRuleCall_6());
			}
		)?
	)
;

// Entry rule entryRuleForeignKey
entryRuleForeignKey returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForeignKeyRule()); }
	iv_ruleForeignKey=ruleForeignKey
	{ $current=$iv_ruleForeignKey.current; }
	EOF;

// Rule ForeignKey
ruleForeignKey returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_FOREIGN_0=RULE_FOREIGN
		{
			newLeafNode(this_FOREIGN_0, grammarAccess.getForeignKeyAccess().getFOREIGNTerminalRuleCall_0());
		}
		this_KEY_1=RULE_KEY
		{
			newLeafNode(this_KEY_1, grammarAccess.getForeignKeyAccess().getKEYTerminalRuleCall_1());
		}
		this_LPARENT_2=RULE_LPARENT
		{
			newLeafNode(this_LPARENT_2, grammarAccess.getForeignKeyAccess().getLPARENTTerminalRuleCall_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForeignKeyRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getForeignKeyAccess().getColumnColumnCrossReference_3_0());
				}
			)
		)
		(
			(
				this_COMMA_4=RULE_COMMA
				{
					newLeafNode(this_COMMA_4, grammarAccess.getForeignKeyAccess().getCOMMATerminalRuleCall_4_0());
				}
			)+
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getForeignKeyRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getForeignKeyAccess().getColumnColumnCrossReference_4_1_0());
					}
				)
			)
		)*
		this_RPARENT_6=RULE_RPARENT
		{
			newLeafNode(this_RPARENT_6, grammarAccess.getForeignKeyAccess().getRPARENTTerminalRuleCall_5());
		}
		this_REFERENCES_7=RULE_REFERENCES
		{
			newLeafNode(this_REFERENCES_7, grammarAccess.getForeignKeyAccess().getREFERENCESTerminalRuleCall_6());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForeignKeyRule());
					}
				}
				otherlv_8=RULE_ID
				{
					newLeafNode(otherlv_8, grammarAccess.getForeignKeyAccess().getTableRefTableCrossReference_7_0());
				}
			)
		)
		this_LPARENT_9=RULE_LPARENT
		{
			newLeafNode(this_LPARENT_9, grammarAccess.getForeignKeyAccess().getLPARENTTerminalRuleCall_8());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForeignKeyRule());
					}
				}
				otherlv_10=RULE_ID
				{
					newLeafNode(otherlv_10, grammarAccess.getForeignKeyAccess().getColumnsRefColumnCrossReference_9_0());
				}
			)
		)
		(
			(
				this_COMMA_11=RULE_COMMA
				{
					newLeafNode(this_COMMA_11, grammarAccess.getForeignKeyAccess().getCOMMATerminalRuleCall_10_0());
				}
			)+
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getForeignKeyRule());
						}
					}
					otherlv_12=RULE_ID
					{
						newLeafNode(otherlv_12, grammarAccess.getForeignKeyAccess().getColumnsRefColumnCrossReference_10_1_0());
					}
				)
			)
		)*
		this_RPARENT_13=RULE_RPARENT
		{
			newLeafNode(this_RPARENT_13, grammarAccess.getForeignKeyAccess().getRPARENTTerminalRuleCall_11());
		}
		(
			this_COMMA_14=RULE_COMMA
			{
				newLeafNode(this_COMMA_14, grammarAccess.getForeignKeyAccess().getCOMMATerminalRuleCall_12());
			}
		)?
	)
;

// Rule DataType
ruleDataType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='varchar'
			{
				$current = grammarAccess.getDataTypeAccess().getVarcharEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDataTypeAccess().getVarcharEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='int'
			{
				$current = grammarAccess.getDataTypeAccess().getIntEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDataTypeAccess().getIntEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='boolean'
			{
				$current = grammarAccess.getDataTypeAccess().getBooleanEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getDataTypeAccess().getBooleanEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='date'
			{
				$current = grammarAccess.getDataTypeAccess().getDateEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getDataTypeAccess().getDateEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='number'
			{
				$current = grammarAccess.getDataTypeAccess().getNumberEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getDataTypeAccess().getNumberEnumLiteralDeclaration_4());
			}
		)
	)
;

RULE_CREATE : 'CREATE';

RULE_CTABLE : 'TABLE';

RULE_LPARENT : '(';

RULE_RPARENT : ')';

RULE_COMMA : ',';

RULE_FOREIGN : 'FOREIGN';

RULE_PRIMARY : 'PRIMARY';

RULE_KEY : 'KEY';

RULE_NOT_NULL : 'NOT NULL';

RULE_REFERENCES : 'REFERENCES';

RULE_ID : 'A'..'z' ('0'..'9'|'A'..'Z'|'a'..'z')*;

RULE_NUMBER : ('0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

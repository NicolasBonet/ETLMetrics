/**
 * generated by Xtext 2.9.1
 */
package co.edu.uniandes.tallerM2M.scoping;

import co.edu.uniandes.tallerM2M.sql.Columna;
import co.edu.uniandes.tallerM2M.sql.ForeignKey;
import co.edu.uniandes.tallerM2M.sql.Tabla;
import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.xbase.lib.InputOutput;

@SuppressWarnings("all")
public class SqlScopeProvider extends AbstractDeclarativeScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    boolean _and = false;
    boolean _and_1 = false;
    if (!(context instanceof ForeignKey)) {
      _and_1 = false;
    } else {
      String _name = reference.getName();
      boolean _notEquals = (!Objects.equal(_name, null));
      _and_1 = _notEquals;
    }
    if (!_and_1) {
      _and = false;
    } else {
      String _name_1 = reference.getName();
      boolean _equals = Objects.equal(_name_1, "referenceColumn");
      _and = _equals;
    }
    if (_and) {
      for (int i = 0; (i < context.eContainer().eContainer().eContents().size()); i++) {
        {
          InputOutput.<String>println(("-------->i " + Integer.valueOf(i)));
          EObject _eContainer = context.eContainer();
          EObject _eContainer_1 = _eContainer.eContainer();
          EList<EObject> _eContents = _eContainer_1.eContents();
          EObject _get = _eContents.get(i);
          String _name_2 = ((Tabla) _get).getName();
          Tabla _referenceTable = ((ForeignKey) context).getReferenceTable();
          String _name_3 = _referenceTable.getName();
          boolean _equals_1 = Objects.equal(_name_2, _name_3);
          if (_equals_1) {
            EObject _eContainer_2 = context.eContainer();
            EObject _eContainer_3 = _eContainer_2.eContainer();
            EList<EObject> _eContents_1 = _eContainer_3.eContents();
            EObject _get_1 = _eContents_1.get(i);
            final EList<Columna> columnas = ((Tabla) _get_1).getColumnas();
            return Scopes.scopeFor(columnas);
          }
        }
      }
      return null;
    } else {
      return super.getScope(context, reference);
    }
  }
}

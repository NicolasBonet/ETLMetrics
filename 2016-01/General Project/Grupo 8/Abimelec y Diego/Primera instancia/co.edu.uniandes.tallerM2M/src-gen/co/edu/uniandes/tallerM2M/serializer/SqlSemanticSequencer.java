/*
 * generated by Xtext 2.9.1
 */
package co.edu.uniandes.tallerM2M.serializer;

import co.edu.uniandes.tallerM2M.services.SqlGrammarAccess;
import co.edu.uniandes.tallerM2M.sql.Columna;
import co.edu.uniandes.tallerM2M.sql.Database;
import co.edu.uniandes.tallerM2M.sql.ForeignKey;
import co.edu.uniandes.tallerM2M.sql.Primary;
import co.edu.uniandes.tallerM2M.sql.SqlPackage;
import co.edu.uniandes.tallerM2M.sql.Tabla;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SqlSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SqlGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SqlPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SqlPackage.COLUMNA:
				sequence_Columna(context, (Columna) semanticObject); 
				return; 
			case SqlPackage.DATABASE:
				sequence_Database(context, (Database) semanticObject); 
				return; 
			case SqlPackage.FOREIGN_KEY:
				sequence_ForeingKey(context, (ForeignKey) semanticObject); 
				return; 
			case SqlPackage.PRIMARY:
				sequence_Primary(context, (Primary) semanticObject); 
				return; 
			case SqlPackage.TABLA:
				sequence_Tabla(context, (Tabla) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Columna returns Columna
	 *
	 * Constraint:
	 *     (name=ID (tipo=VVARCHAR | tipo=VINT | tipo=VVARCHAR255) notNull=' NOT NULL'?)
	 */
	protected void sequence_Columna(ISerializationContext context, Columna semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Database returns Database
	 *
	 * Constraint:
	 *     tablas+=Tabla+
	 */
	protected void sequence_Database(ISerializationContext context, Database semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ForeingKey returns ForeignKey
	 *
	 * Constraint:
	 *     (name=ID referenceTable=[Tabla|ID] referenceColumn=[Columna|ID])
	 */
	protected void sequence_ForeingKey(ISerializationContext context, ForeignKey semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SqlPackage.Literals.FOREIGN_KEY__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SqlPackage.Literals.FOREIGN_KEY__NAME));
			if (transientValues.isValueTransient(semanticObject, SqlPackage.Literals.FOREIGN_KEY__REFERENCE_TABLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SqlPackage.Literals.FOREIGN_KEY__REFERENCE_TABLE));
			if (transientValues.isValueTransient(semanticObject, SqlPackage.Literals.FOREIGN_KEY__REFERENCE_COLUMN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SqlPackage.Literals.FOREIGN_KEY__REFERENCE_COLUMN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getForeingKeyAccess().getNameIDTerminalRuleCall_5_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getForeingKeyAccess().getReferenceTableTablaIDTerminalRuleCall_10_0_1(), semanticObject.getReferenceTable());
		feeder.accept(grammarAccess.getForeingKeyAccess().getReferenceColumnColumnaIDTerminalRuleCall_12_0_1(), semanticObject.getReferenceColumn());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Primary returns Primary
	 *
	 * Constraint:
	 *     (column+=[Columna|ID] column+=[Columna|ID]*)
	 */
	protected void sequence_Primary(ISerializationContext context, Primary semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Tabla returns Tabla
	 *
	 * Constraint:
	 *     (name=ID columnas+=Columna+ primarys+=Primary+ foreigns+=ForeingKey*)
	 */
	protected void sequence_Tabla(ISerializationContext context, Tabla semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}

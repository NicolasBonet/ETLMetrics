/*
 * generated by Xtext 2.9.1
 */
package co.edu.uniandes.ide.contentassist.antlr;

import co.edu.uniandes.ide.contentassist.antlr.internal.InternalGenSqlParser;
import co.edu.uniandes.services.GenSqlGrammarAccess;
import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class GenSqlParser extends AbstractContentAssistParser {

	@Inject
	private GenSqlGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalGenSqlParser createParser() {
		InternalGenSqlParser result = new InternalGenSqlParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTableAccess().getAlternatives_8(), "rule__Table__Alternatives_8");
					put(grammarAccess.getDataBaseAccess().getGroup(), "rule__DataBase__Group__0");
					put(grammarAccess.getTableAccess().getGroup(), "rule__Table__Group__0");
					put(grammarAccess.getColumnAccess().getGroup(), "rule__Column__Group__0");
					put(grammarAccess.getColumnAccess().getGroup_3(), "rule__Column__Group_3__0");
					put(grammarAccess.getPrimaryKeyAccess().getGroup(), "rule__PrimaryKey__Group__0");
					put(grammarAccess.getPrimaryKeyAccess().getGroup_4(), "rule__PrimaryKey__Group_4__0");
					put(grammarAccess.getForeignKeyAccess().getGroup(), "rule__ForeignKey__Group__0");
					put(grammarAccess.getForeignKeyAccess().getGroup_4(), "rule__ForeignKey__Group_4__0");
					put(grammarAccess.getForeignKeyAccess().getGroup_10(), "rule__ForeignKey__Group_10__0");
					put(grammarAccess.getDataBaseAccess().getTablesAssignment_1(), "rule__DataBase__TablesAssignment_1");
					put(grammarAccess.getTableAccess().getNameAssignment_2(), "rule__Table__NameAssignment_2");
					put(grammarAccess.getTableAccess().getColumnsAssignment_4(), "rule__Table__ColumnsAssignment_4");
					put(grammarAccess.getTableAccess().getPrimarykeyAssignment_5(), "rule__Table__PrimarykeyAssignment_5");
					put(grammarAccess.getTableAccess().getForeignkeysAssignment_6(), "rule__Table__ForeignkeysAssignment_6");
					put(grammarAccess.getColumnAccess().getNameAssignment_0(), "rule__Column__NameAssignment_0");
					put(grammarAccess.getColumnAccess().getSQLTypeAssignment_1(), "rule__Column__SQLTypeAssignment_1");
					put(grammarAccess.getColumnAccess().getLongitudAssignment_2(), "rule__Column__LongitudAssignment_2");
					put(grammarAccess.getPrimaryKeyAccess().getColumnsAssignment_3(), "rule__PrimaryKey__ColumnsAssignment_3");
					put(grammarAccess.getPrimaryKeyAccess().getColumnsAssignment_4_1(), "rule__PrimaryKey__ColumnsAssignment_4_1");
					put(grammarAccess.getForeignKeyAccess().getColumnsAssignment_3(), "rule__ForeignKey__ColumnsAssignment_3");
					put(grammarAccess.getForeignKeyAccess().getColumnsAssignment_4_1(), "rule__ForeignKey__ColumnsAssignment_4_1");
					put(grammarAccess.getForeignKeyAccess().getTableRefAssignment_7(), "rule__ForeignKey__TableRefAssignment_7");
					put(grammarAccess.getForeignKeyAccess().getColumnsRefAssignment_9(), "rule__ForeignKey__ColumnsRefAssignment_9");
					put(grammarAccess.getForeignKeyAccess().getColumnsRefAssignment_10_1(), "rule__ForeignKey__ColumnsRefAssignment_10_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalGenSqlParser typedParser = (InternalGenSqlParser) parser;
			typedParser.entryRuleDataBase();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GenSqlGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GenSqlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}

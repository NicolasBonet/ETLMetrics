/**
 * generated by Xtext 2.9.1
 */
package org.xtext.example.mydsl.sQL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import org.xtext.example.mydsl.sQL.Column;
import org.xtext.example.mydsl.sQL.ForeignKey;
import org.xtext.example.mydsl.sQL.SQLPackage;
import org.xtext.example.mydsl.sQL.Table;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Foreign Key</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.xtext.example.mydsl.sQL.impl.ForeignKeyImpl#getColumns <em>Columns</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sQL.impl.ForeignKeyImpl#getRefTable <em>Ref Table</em>}</li>
 *   <li>{@link org.xtext.example.mydsl.sQL.impl.ForeignKeyImpl#getRefColumns <em>Ref Columns</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class ForeignKeyImpl extends MinimalEObjectImpl.Container implements ForeignKey
{
  /**
   * The cached value of the '{@link #getColumns() <em>Columns</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColumns()
   * @generated
   * @ordered
   */
  protected EList<Column> columns;

  /**
   * The cached value of the '{@link #getRefTable() <em>Ref Table</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRefTable()
   * @generated
   * @ordered
   */
  protected Table refTable;

  /**
   * The cached value of the '{@link #getRefColumns() <em>Ref Columns</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRefColumns()
   * @generated
   * @ordered
   */
  protected EList<Column> refColumns;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ForeignKeyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SQLPackage.Literals.FOREIGN_KEY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Column> getColumns()
  {
    if (columns == null)
    {
      columns = new EObjectResolvingEList<Column>(Column.class, this, SQLPackage.FOREIGN_KEY__COLUMNS);
    }
    return columns;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Table getRefTable()
  {
    if (refTable != null && refTable.eIsProxy())
    {
      InternalEObject oldRefTable = (InternalEObject)refTable;
      refTable = (Table)eResolveProxy(oldRefTable);
      if (refTable != oldRefTable)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, SQLPackage.FOREIGN_KEY__REF_TABLE, oldRefTable, refTable));
      }
    }
    return refTable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Table basicGetRefTable()
  {
    return refTable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRefTable(Table newRefTable)
  {
    Table oldRefTable = refTable;
    refTable = newRefTable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SQLPackage.FOREIGN_KEY__REF_TABLE, oldRefTable, refTable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Column> getRefColumns()
  {
    if (refColumns == null)
    {
      refColumns = new EObjectResolvingEList<Column>(Column.class, this, SQLPackage.FOREIGN_KEY__REF_COLUMNS);
    }
    return refColumns;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SQLPackage.FOREIGN_KEY__COLUMNS:
        return getColumns();
      case SQLPackage.FOREIGN_KEY__REF_TABLE:
        if (resolve) return getRefTable();
        return basicGetRefTable();
      case SQLPackage.FOREIGN_KEY__REF_COLUMNS:
        return getRefColumns();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SQLPackage.FOREIGN_KEY__COLUMNS:
        getColumns().clear();
        getColumns().addAll((Collection<? extends Column>)newValue);
        return;
      case SQLPackage.FOREIGN_KEY__REF_TABLE:
        setRefTable((Table)newValue);
        return;
      case SQLPackage.FOREIGN_KEY__REF_COLUMNS:
        getRefColumns().clear();
        getRefColumns().addAll((Collection<? extends Column>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SQLPackage.FOREIGN_KEY__COLUMNS:
        getColumns().clear();
        return;
      case SQLPackage.FOREIGN_KEY__REF_TABLE:
        setRefTable((Table)null);
        return;
      case SQLPackage.FOREIGN_KEY__REF_COLUMNS:
        getRefColumns().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SQLPackage.FOREIGN_KEY__COLUMNS:
        return columns != null && !columns.isEmpty();
      case SQLPackage.FOREIGN_KEY__REF_TABLE:
        return refTable != null;
      case SQLPackage.FOREIGN_KEY__REF_COLUMNS:
        return refColumns != null && !refColumns.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ForeignKeyImpl

/*
 * generated by Xtext 2.9.1
 */
grammar InternalSQL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.SQLGrammarAccess;

}

@parser::members {

 	private SQLGrammarAccess grammarAccess;

    public InternalSQLParser(TokenStream input, SQLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Database";
   	}

   	@Override
   	protected SQLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleDatabase
entryRuleDatabase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDatabaseRule()); }
	iv_ruleDatabase=ruleDatabase
	{ $current=$iv_ruleDatabase.current; }
	EOF;

// Rule Database
ruleDatabase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDatabaseAccess().getDatabaseAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDatabaseAccess().getTablesTableParserRuleCall_1_0());
				}
				lv_tables_1_0=ruleTable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDatabaseRule());
					}
					add(
						$current,
						"tables",
						lv_tables_1_0,
						"org.xtext.example.mydsl.SQL.Table");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleTable
entryRuleTable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTableRule()); }
	iv_ruleTable=ruleTable
	{ $current=$iv_ruleTable.current; }
	EOF;

// Rule Table
ruleTable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_CREATE_TABLE_0=RULE_CREATE_TABLE
		{
			newLeafNode(this_CREATE_TABLE_0, grammarAccess.getTableAccess().getCREATE_TABLETerminalRuleCall_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTableAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		this_LPAR_2=RULE_LPAR
		{
			newLeafNode(this_LPAR_2, grammarAccess.getTableAccess().getLPARTerminalRuleCall_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTableAccess().getColumnsColumnParserRuleCall_3_0());
				}
				lv_columns_3_0=ruleColumn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableRule());
					}
					add(
						$current,
						"columns",
						lv_columns_3_0,
						"org.xtext.example.mydsl.SQL.Column");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			this_COMMA_4=RULE_COMMA
			{
				newLeafNode(this_COMMA_4, grammarAccess.getTableAccess().getCOMMATerminalRuleCall_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getTableAccess().getColumnsColumnParserRuleCall_4_1_0());
					}
					lv_columns_5_0=ruleColumn
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getTableRule());
						}
						add(
							$current,
							"columns",
							lv_columns_5_0,
							"org.xtext.example.mydsl.SQL.Column");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getTableAccess().getPrimaryKeyPrimaryKeyParserRuleCall_5_0());
				}
				lv_primaryKey_6_0=rulePrimaryKey
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableRule());
					}
					set(
						$current,
						"primaryKey",
						lv_primaryKey_6_0,
						"org.xtext.example.mydsl.SQL.PrimaryKey");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getTableAccess().getForeignKeysForeignKeyParserRuleCall_6_0());
				}
				lv_foreignKeys_7_0=ruleForeignKey
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableRule());
					}
					add(
						$current,
						"foreignKeys",
						lv_foreignKeys_7_0,
						"org.xtext.example.mydsl.SQL.ForeignKey");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		this_RPAR_8=RULE_RPAR
		{
			newLeafNode(this_RPAR_8, grammarAccess.getTableAccess().getRPARTerminalRuleCall_7());
		}
	)
;

// Entry rule entryRuleColumn
entryRuleColumn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnRule()); }
	iv_ruleColumn=ruleColumn
	{ $current=$iv_ruleColumn.current; }
	EOF;

// Rule Column
ruleColumn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColumnRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				lv_dataType_1_0=RULE_DATA_TYPE
				{
					newLeafNode(lv_dataType_1_0, grammarAccess.getColumnAccess().getDataTypeDATA_TYPETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColumnRule());
					}
					setWithLastConsumed(
						$current,
						"dataType",
						lv_dataType_1_0,
						"org.xtext.example.mydsl.SQL.DATA_TYPE");
				}
			)
		)
		(
			(
				lv_notNull_2_0=RULE_NOT_NULL
				{
					newLeafNode(lv_notNull_2_0, grammarAccess.getColumnAccess().getNotNullNOT_NULLTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColumnRule());
					}
					setWithLastConsumed(
						$current,
						"notNull",
						lv_notNull_2_0,
						"org.xtext.example.mydsl.SQL.NOT_NULL");
				}
			)
		)?
	)
;

// Entry rule entryRulePrimaryKey
entryRulePrimaryKey returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryKeyRule()); }
	iv_rulePrimaryKey=rulePrimaryKey
	{ $current=$iv_rulePrimaryKey.current; }
	EOF;

// Rule PrimaryKey
rulePrimaryKey returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_COMMA_0=RULE_COMMA
		{
			newLeafNode(this_COMMA_0, grammarAccess.getPrimaryKeyAccess().getCOMMATerminalRuleCall_0());
		}
		this_PRIMARY_KEY_1=RULE_PRIMARY_KEY
		{
			newLeafNode(this_PRIMARY_KEY_1, grammarAccess.getPrimaryKeyAccess().getPRIMARY_KEYTerminalRuleCall_1());
		}
		this_LPAR_2=RULE_LPAR
		{
			newLeafNode(this_LPAR_2, grammarAccess.getPrimaryKeyAccess().getLPARTerminalRuleCall_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrimaryKeyRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getPrimaryKeyAccess().getColumnsColumnCrossReference_3_0());
				}
			)
		)
		(
			this_COMMA_4=RULE_COMMA
			{
				newLeafNode(this_COMMA_4, grammarAccess.getPrimaryKeyAccess().getCOMMATerminalRuleCall_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrimaryKeyRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getPrimaryKeyAccess().getColumnsColumnCrossReference_4_1_0());
					}
				)
			)
		)*
		this_RPAR_6=RULE_RPAR
		{
			newLeafNode(this_RPAR_6, grammarAccess.getPrimaryKeyAccess().getRPARTerminalRuleCall_5());
		}
	)
;

// Entry rule entryRuleForeignKey
entryRuleForeignKey returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForeignKeyRule()); }
	iv_ruleForeignKey=ruleForeignKey
	{ $current=$iv_ruleForeignKey.current; }
	EOF;

// Rule ForeignKey
ruleForeignKey returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_COMMA_0=RULE_COMMA
		{
			newLeafNode(this_COMMA_0, grammarAccess.getForeignKeyAccess().getCOMMATerminalRuleCall_0());
		}
		this_FOREIGN_KEY_1=RULE_FOREIGN_KEY
		{
			newLeafNode(this_FOREIGN_KEY_1, grammarAccess.getForeignKeyAccess().getFOREIGN_KEYTerminalRuleCall_1());
		}
		this_LPAR_2=RULE_LPAR
		{
			newLeafNode(this_LPAR_2, grammarAccess.getForeignKeyAccess().getLPARTerminalRuleCall_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForeignKeyRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getForeignKeyAccess().getColumnsColumnCrossReference_3_0());
				}
			)
		)
		(
			this_COMMA_4=RULE_COMMA
			{
				newLeafNode(this_COMMA_4, grammarAccess.getForeignKeyAccess().getCOMMATerminalRuleCall_4_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getForeignKeyRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getForeignKeyAccess().getColumnsColumnCrossReference_4_1_0());
					}
				)
			)
		)*
		this_RPAR_6=RULE_RPAR
		{
			newLeafNode(this_RPAR_6, grammarAccess.getForeignKeyAccess().getRPARTerminalRuleCall_5());
		}
		this_REFERENCES_7=RULE_REFERENCES
		{
			newLeafNode(this_REFERENCES_7, grammarAccess.getForeignKeyAccess().getREFERENCESTerminalRuleCall_6());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForeignKeyRule());
					}
				}
				otherlv_8=RULE_ID
				{
					newLeafNode(otherlv_8, grammarAccess.getForeignKeyAccess().getRefTableTableCrossReference_7_0());
				}
			)
		)
		this_LPAR_9=RULE_LPAR
		{
			newLeafNode(this_LPAR_9, grammarAccess.getForeignKeyAccess().getLPARTerminalRuleCall_8());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForeignKeyRule());
					}
				}
				otherlv_10=RULE_ID
				{
					newLeafNode(otherlv_10, grammarAccess.getForeignKeyAccess().getRefColumnsColumnCrossReference_9_0());
				}
			)
		)
		(
			this_COMMA_11=RULE_COMMA
			{
				newLeafNode(this_COMMA_11, grammarAccess.getForeignKeyAccess().getCOMMATerminalRuleCall_10_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getForeignKeyRule());
						}
					}
					otherlv_12=RULE_ID
					{
						newLeafNode(otherlv_12, grammarAccess.getForeignKeyAccess().getRefColumnsColumnCrossReference_10_1_0());
					}
				)
			)
		)*
		this_RPAR_13=RULE_RPAR
		{
			newLeafNode(this_RPAR_13, grammarAccess.getForeignKeyAccess().getRPARTerminalRuleCall_11());
		}
	)
;

RULE_CREATE_TABLE : 'CREATE TABLE';

RULE_NOT_NULL : 'NOT NULL';

RULE_PRIMARY_KEY : 'PRIMARY KEY';

RULE_FOREIGN_KEY : 'FOREIGN KEY';

RULE_REFERENCES : 'REFERENCES';

RULE_COMMA : ',';

RULE_LPAR : '(';

RULE_RPAR : ')';

fragment RULE_TINT : 'int' RULE_MAX_LENGTH?;

fragment RULE_TVARCHAR : 'varchar' RULE_MAX_LENGTH;

fragment RULE_TCHARACTER : 'char' RULE_MAX_LENGTH;

fragment RULE_TBINARY : 'binary' RULE_MAX_LENGTH;

fragment RULE_TBOOLEAN : 'boolean';

fragment RULE_TVARBINARY : 'varbinary' RULE_MAX_LENGTH;

fragment RULE_TSMALLINT : 'smallint';

fragment RULE_TBIGINT : 'bigint';

fragment RULE_TDECIMAL : 'decimal' RULE_PRECISION;

fragment RULE_TNUMERIC : 'numeric' RULE_PRECISION;

fragment RULE_TFLOAT : 'float';

fragment RULE_TDATE : 'date';

fragment RULE_TTIME : 'time';

fragment RULE_TTIMESTAMP : 'timestamp';

RULE_DATA_TYPE : (RULE_TINT|RULE_TVARCHAR|RULE_TCHARACTER|RULE_TBINARY|RULE_TBOOLEAN|RULE_TVARBINARY|RULE_TSMALLINT|RULE_TBIGINT|RULE_TDECIMAL|RULE_TNUMERIC|RULE_TFLOAT|RULE_TDATE|RULE_TTIME|RULE_TTIMESTAMP);

fragment RULE_MAX_LENGTH : RULE_LPAR RULE_INT RULE_RPAR;

fragment RULE_PRECISION : RULE_LPAR RULE_INT RULE_COMMA RULE_INT RULE_RPAR;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

fragment RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

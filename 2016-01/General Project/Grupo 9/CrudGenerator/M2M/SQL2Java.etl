model sql driver EMF {path='SQL.ecore'};
model java driver EMF {path='mmJavaMinimalista.ecore'};

rule SQL2Java
	transform
		s:sql!Database
	to
		t:java!Application{
			t.name = "co.edu.uniandes.sqlcrud";
			
			var entitiesPackage : new java!Package;
			entitiesPackage.name = "marketplace";
			entitiesPackage.classifier = s.tables.equivalent("Table2Class");
			t.package.add(entitiesPackage);
		}	
	
rule Table2Class
	transform
		s:sql!Table
	to
		t:java!Class{
			t.name = s.name.firstToUpperCase();
			
			var a = new java!Annotation;
			a.name = "Entity";
			t.annotations.add(a);
			
			t.structuredElements = s.columns.equivalent("Column2Attribute");
		}

rule Column2Attribute
	transform
		s:sql!Column
	to
		t:java!Attribute{
			var attributeName = s.name.toLowerCase();
			if(s.getForeignKeyTableName() <> ""){
				//Add attribute type
				var dataType = new java!Class;
				dataType.name = s.getForeignKeyTableName().firstToUpperCase();
			 	t.type = dataType;
			 	
			 	//Set attribute name
				attributeName = dataType.name.toLowerCase();
				
				//Add annotations
				var a1 = new java!Annotation;
				a1.name = "ManyToOne";
				
				var p1 = new java!KeyValue;
				p1.key = "fetch";
				p1.value = "FetchType.LAZY";
				a1.parameters.add(p1);
				
				var p2 = new java!KeyValue;
				p2.key = "cascade";
				p2.value = "CascadeType.PERSIST";
				a1.parameters.add(p2);
				t.annotations.add(a1);
				
				var a2 = new java!Annotation;
				a2.name = "PrimaryKeyJoinColumn";
				t.annotations.add(a2);
			} else {
				if(s.dataType.startsWith("int")){
					var dataType = new java!Primitive;
					dataType.primitiveType = java!PrimitiveDataTypeEnum#INT;
					t.type = dataType;
				} else if(s.dataType.startsWith("varchar")){
					var dataType = new java!Class;
					dataType.name = "String";
					t.type = dataType;
				}
			}
			
			if(s.isPrimaryKey()){
				var a = new java!Annotation;
				a.name = "Id";
				t.annotations.add(a);
			}
			
			t.name = attributeName;
		}
		
operation sql!Column getForeignKeyTableName(): String{
	for(foreignKey in self.eContainer.foreignKeys){
		if(foreignKey.columns.select(c|c.name == self.name).size() > 0){
			return foreignKey.refTable.name.firstToUpperCase();
		}
	}
	return "";
}
		
operation sql!Column isPrimaryKey(): Boolean{
	var primaryKey = self.eContainer.primaryKey;
	if(primaryKey <> null and primaryKey.columns.select(c|c.name == self.name).size() > 0){
		return true;
	}
	return false;
}
/*
 * generated by Xtext 2.9.1
 */
package org.uniandes.edu.co.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.uniandes.edu.co.services.SqlCrudGrammarAccess;
import org.uniandes.edu.co.sqlCrud.Binary;
import org.uniandes.edu.co.sqlCrud.ColumnTipoEnum;
import org.uniandes.edu.co.sqlCrud.Columna;
import org.uniandes.edu.co.sqlCrud.Database;
import org.uniandes.edu.co.sqlCrud.ForeignKey;
import org.uniandes.edu.co.sqlCrud.PrimaryKey;
import org.uniandes.edu.co.sqlCrud.SqlCrudPackage;
import org.uniandes.edu.co.sqlCrud.Table;
import org.uniandes.edu.co.sqlCrud.Varchar;

@SuppressWarnings("all")
public class SqlCrudSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SqlCrudGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SqlCrudPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SqlCrudPackage.BINARY:
				if (rule == grammarAccess.getBinaryRule()) {
					sequence_Binary(context, (Binary) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getVarBinaryRule()) {
					sequence_VarBinary(context, (Binary) semanticObject); 
					return; 
				}
				else break;
			case SqlCrudPackage.COLUMN_TIPO_ENUM:
				sequence_ColumnTipoEnum(context, (ColumnTipoEnum) semanticObject); 
				return; 
			case SqlCrudPackage.COLUMNA:
				sequence_Columna(context, (Columna) semanticObject); 
				return; 
			case SqlCrudPackage.DATABASE:
				sequence_Database(context, (Database) semanticObject); 
				return; 
			case SqlCrudPackage.FOREIGN_KEY:
				sequence_ForeignKey(context, (ForeignKey) semanticObject); 
				return; 
			case SqlCrudPackage.PRIMARY_KEY:
				sequence_PrimaryKey(context, (PrimaryKey) semanticObject); 
				return; 
			case SqlCrudPackage.TABLE:
				sequence_Table(context, (Table) semanticObject); 
				return; 
			case SqlCrudPackage.VARCHAR:
				sequence_Varchar(context, (Varchar) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Binary returns Binary
	 *
	 * Constraint:
	 *     max=ENTERO
	 */
	protected void sequence_Binary(ISerializationContext context, Binary semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SqlCrudPackage.Literals.BINARY__MAX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SqlCrudPackage.Literals.BINARY__MAX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBinaryAccess().getMaxENTEROTerminalRuleCall_2_0(), semanticObject.getMax());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ColumnTipoEnum returns ColumnTipoEnum
	 *
	 * Constraint:
	 *     (
	 *         intt=TIPOINT | 
	 *         varchart=Varchar | 
	 *         smallintt='SMALLINT' | 
	 *         bigintt='BIGINT' | 
	 *         booleant='BOOLEAN' | 
	 *         realt='REAL' | 
	 *         floatt='FLOAT' | 
	 *         binaryt=Binary | 
	 *         varbinaryt=VarBinary | 
	 *         datet='DATE' | 
	 *         timestampt='TIMESTAMP' | 
	 *         multisett='MULTISET' | 
	 *         xmlt='XML'
	 *     )
	 */
	protected void sequence_ColumnTipoEnum(ISerializationContext context, ColumnTipoEnum semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Columna returns Columna
	 *
	 * Constraint:
	 *     (nombre=NOMBRE tipo=ColumnTipoEnum notnullable=NOTNULL?)
	 */
	protected void sequence_Columna(ISerializationContext context, Columna semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Database returns Database
	 *
	 * Constraint:
	 *     tables+=Table+
	 */
	protected void sequence_Database(ISerializationContext context, Database semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ForeignKey returns ForeignKey
	 *
	 * Constraint:
	 *     (column=NOMBRE referencetab=NOMBRE referencecol=NOMBRE)
	 */
	protected void sequence_ForeignKey(ISerializationContext context, ForeignKey semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SqlCrudPackage.Literals.FOREIGN_KEY__COLUMN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SqlCrudPackage.Literals.FOREIGN_KEY__COLUMN));
			if (transientValues.isValueTransient(semanticObject, SqlCrudPackage.Literals.FOREIGN_KEY__REFERENCETAB) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SqlCrudPackage.Literals.FOREIGN_KEY__REFERENCETAB));
			if (transientValues.isValueTransient(semanticObject, SqlCrudPackage.Literals.FOREIGN_KEY__REFERENCECOL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SqlCrudPackage.Literals.FOREIGN_KEY__REFERENCECOL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getForeignKeyAccess().getColumnNOMBRETerminalRuleCall_6_0(), semanticObject.getColumn());
		feeder.accept(grammarAccess.getForeignKeyAccess().getReferencetabNOMBRETerminalRuleCall_11_0(), semanticObject.getReferencetab());
		feeder.accept(grammarAccess.getForeignKeyAccess().getReferencecolNOMBRETerminalRuleCall_15_0(), semanticObject.getReferencecol());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PrimaryKey returns PrimaryKey
	 *
	 * Constraint:
	 *     (cols+=NOMBRE cols+=NOMBRE*)
	 */
	protected void sequence_PrimaryKey(ISerializationContext context, PrimaryKey semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Table returns Table
	 *
	 * Constraint:
	 *     (nombre=NOMBRE columnas+=Columna+ prkey=PrimaryKey forkeys+=ForeignKey*)
	 */
	protected void sequence_Table(ISerializationContext context, Table semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     VarBinary returns Binary
	 *
	 * Constraint:
	 *     max=ENTERO
	 */
	protected void sequence_VarBinary(ISerializationContext context, Binary semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SqlCrudPackage.Literals.BINARY__MAX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SqlCrudPackage.Literals.BINARY__MAX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarBinaryAccess().getMaxENTEROTerminalRuleCall_2_0(), semanticObject.getMax());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Varchar returns Varchar
	 *
	 * Constraint:
	 *     max=ENTERO
	 */
	protected void sequence_Varchar(ISerializationContext context, Varchar semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SqlCrudPackage.Literals.VARCHAR__MAX) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SqlCrudPackage.Literals.VARCHAR__MAX));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVarcharAccess().getMaxENTEROTerminalRuleCall_2_0(), semanticObject.getMax());
		feeder.finish();
	}
	
	
}

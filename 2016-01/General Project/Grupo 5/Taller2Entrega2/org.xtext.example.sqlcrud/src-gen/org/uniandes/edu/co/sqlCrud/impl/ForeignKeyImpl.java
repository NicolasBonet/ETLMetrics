/**
 * generated by Xtext 2.9.1
 */
package org.uniandes.edu.co.sqlCrud.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.uniandes.edu.co.sqlCrud.ForeignKey;
import org.uniandes.edu.co.sqlCrud.SqlCrudPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Foreign Key</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.uniandes.edu.co.sqlCrud.impl.ForeignKeyImpl#getColumn <em>Column</em>}</li>
 *   <li>{@link org.uniandes.edu.co.sqlCrud.impl.ForeignKeyImpl#getReferencetab <em>Referencetab</em>}</li>
 *   <li>{@link org.uniandes.edu.co.sqlCrud.impl.ForeignKeyImpl#getReferencecol <em>Referencecol</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class ForeignKeyImpl extends MinimalEObjectImpl.Container implements ForeignKey
{
  /**
   * The default value of the '{@link #getColumn() <em>Column</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColumn()
   * @generated
   * @ordered
   */
  protected static final String COLUMN_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getColumn() <em>Column</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColumn()
   * @generated
   * @ordered
   */
  protected String column = COLUMN_EDEFAULT;

  /**
   * The default value of the '{@link #getReferencetab() <em>Referencetab</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReferencetab()
   * @generated
   * @ordered
   */
  protected static final String REFERENCETAB_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getReferencetab() <em>Referencetab</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReferencetab()
   * @generated
   * @ordered
   */
  protected String referencetab = REFERENCETAB_EDEFAULT;

  /**
   * The default value of the '{@link #getReferencecol() <em>Referencecol</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReferencecol()
   * @generated
   * @ordered
   */
  protected static final String REFERENCECOL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getReferencecol() <em>Referencecol</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReferencecol()
   * @generated
   * @ordered
   */
  protected String referencecol = REFERENCECOL_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ForeignKeyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SqlCrudPackage.Literals.FOREIGN_KEY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getColumn()
  {
    return column;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setColumn(String newColumn)
  {
    String oldColumn = column;
    column = newColumn;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SqlCrudPackage.FOREIGN_KEY__COLUMN, oldColumn, column));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getReferencetab()
  {
    return referencetab;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setReferencetab(String newReferencetab)
  {
    String oldReferencetab = referencetab;
    referencetab = newReferencetab;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SqlCrudPackage.FOREIGN_KEY__REFERENCETAB, oldReferencetab, referencetab));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getReferencecol()
  {
    return referencecol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setReferencecol(String newReferencecol)
  {
    String oldReferencecol = referencecol;
    referencecol = newReferencecol;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SqlCrudPackage.FOREIGN_KEY__REFERENCECOL, oldReferencecol, referencecol));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SqlCrudPackage.FOREIGN_KEY__COLUMN:
        return getColumn();
      case SqlCrudPackage.FOREIGN_KEY__REFERENCETAB:
        return getReferencetab();
      case SqlCrudPackage.FOREIGN_KEY__REFERENCECOL:
        return getReferencecol();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SqlCrudPackage.FOREIGN_KEY__COLUMN:
        setColumn((String)newValue);
        return;
      case SqlCrudPackage.FOREIGN_KEY__REFERENCETAB:
        setReferencetab((String)newValue);
        return;
      case SqlCrudPackage.FOREIGN_KEY__REFERENCECOL:
        setReferencecol((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SqlCrudPackage.FOREIGN_KEY__COLUMN:
        setColumn(COLUMN_EDEFAULT);
        return;
      case SqlCrudPackage.FOREIGN_KEY__REFERENCETAB:
        setReferencetab(REFERENCETAB_EDEFAULT);
        return;
      case SqlCrudPackage.FOREIGN_KEY__REFERENCECOL:
        setReferencecol(REFERENCECOL_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SqlCrudPackage.FOREIGN_KEY__COLUMN:
        return COLUMN_EDEFAULT == null ? column != null : !COLUMN_EDEFAULT.equals(column);
      case SqlCrudPackage.FOREIGN_KEY__REFERENCETAB:
        return REFERENCETAB_EDEFAULT == null ? referencetab != null : !REFERENCETAB_EDEFAULT.equals(referencetab);
      case SqlCrudPackage.FOREIGN_KEY__REFERENCECOL:
        return REFERENCECOL_EDEFAULT == null ? referencecol != null : !REFERENCECOL_EDEFAULT.equals(referencecol);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (column: ");
    result.append(column);
    result.append(", referencetab: ");
    result.append(referencetab);
    result.append(", referencecol: ");
    result.append(referencecol);
    result.append(')');
    return result.toString();
  }

} //ForeignKeyImpl

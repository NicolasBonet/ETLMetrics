/**
 * generated by Xtext 2.9.1
 */
package uniandes.automat.sql.scoping;

import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import uniandes.automat.sql.sql.Column;
import uniandes.automat.sql.sql.ForeignKey;
import uniandes.automat.sql.sql.Table;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class SqlScopeProvider extends AbstractDeclarativeScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    boolean _and = false;
    if (!(context instanceof ForeignKey)) {
      _and = false;
    } else {
      String _name = reference.getName();
      boolean _equals = _name.equals("foreignColumns");
      _and = _equals;
    }
    if (_and) {
      Table refForeignTable = ((ForeignKey) context).getForeignTable();
      for (int i = 0; (i < context.eContainer().eContainer().eContents().size()); i++) {
        {
          EObject _eContainer = context.eContainer();
          EObject _eContainer_1 = _eContainer.eContainer();
          EList<EObject> _eContents = _eContainer_1.eContents();
          EObject _get = _eContents.get(i);
          Table iTable = ((Table) _get);
          String _name_1 = iTable.getName();
          System.out.println(_name_1);
          String _name_2 = iTable.getName();
          String _name_3 = refForeignTable.getName();
          boolean _equals_1 = _name_2.equals(_name_3);
          if (_equals_1) {
            EList<EObject> facts = iTable.getFacts();
            EList<Column> columns = new BasicEList<Column>();
            for (final EObject f : facts) {
              if ((f instanceof Column)) {
                columns.add(((Column)f));
              }
            }
            return Scopes.scopeFor(columns);
          }
        }
      }
      return null;
    } else {
      return super.getScope(context, reference);
    }
  }
}

/*
 * generated by Xtext 2.9.1
 */
package edu.uniandes.automatizacion.sql_crud_generator.scoping

import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference
import edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ForeignKey
import edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.Table

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class SqlCrudGeneratorScopeProvider extends AbstractDeclarativeScopeProvider {
	override public IScope getScope(EObject context, EReference reference) {

		if (context instanceof ForeignKey && reference.name == "reference") {
			var rootElement = EcoreUtil2.getRootContainer(context);
			var tables = EcoreUtil2.getAllContentsOfType(rootElement, Table);
			return Scopes.scopeFor(tables);
		} else if (context instanceof ForeignKey && (context as ForeignKey).reference != null &&
			reference.name == "refsFrom") {
			val columns = (context as ForeignKey).reference.columns;
			return Scopes::scopeFor(columns);
		} else {
			return super.getScope(context, reference)
		}
	}
}

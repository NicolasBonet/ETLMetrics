/**
 * generated by Xtext 2.9.2
 */
package edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.impl;

import edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.Column;
import edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.DataType;
import edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ForeignKey;
import edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.PrimaryKey;
import edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.Schema;
import edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.SqlCrudGeneratorFactory;
import edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.SqlCrudGeneratorPackage;
import edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.Table;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SqlCrudGeneratorPackageImpl extends EPackageImpl implements SqlCrudGeneratorPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass schemaEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass tableEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass columnEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass primaryKeyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass foreignKeyEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass dataTypeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum enuM_DATA_TYPEEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.SqlCrudGeneratorPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private SqlCrudGeneratorPackageImpl()
  {
    super(eNS_URI, SqlCrudGeneratorFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   * 
   * <p>This method is used to initialize {@link SqlCrudGeneratorPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static SqlCrudGeneratorPackage init()
  {
    if (isInited) return (SqlCrudGeneratorPackage)EPackage.Registry.INSTANCE.getEPackage(SqlCrudGeneratorPackage.eNS_URI);

    // Obtain or create and register package
    SqlCrudGeneratorPackageImpl theSqlCrudGeneratorPackage = (SqlCrudGeneratorPackageImpl)(EPackage.Registry.INSTANCE.get(eNS_URI) instanceof SqlCrudGeneratorPackageImpl ? EPackage.Registry.INSTANCE.get(eNS_URI) : new SqlCrudGeneratorPackageImpl());

    isInited = true;

    // Create package meta-data objects
    theSqlCrudGeneratorPackage.createPackageContents();

    // Initialize created meta-data
    theSqlCrudGeneratorPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theSqlCrudGeneratorPackage.freeze();

  
    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(SqlCrudGeneratorPackage.eNS_URI, theSqlCrudGeneratorPackage);
    return theSqlCrudGeneratorPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getSchema()
  {
    return schemaEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getSchema_Name()
  {
    return (EAttribute)schemaEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getSchema_Tables()
  {
    return (EReference)schemaEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getTable()
  {
    return tableEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getTable_Name()
  {
    return (EAttribute)tableEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getTable_Columns()
  {
    return (EReference)tableEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getTable_PrimaryKey()
  {
    return (EReference)tableEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getTable_ForeignsKeys()
  {
    return (EReference)tableEClass.getEStructuralFeatures().get(3);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getColumn()
  {
    return columnEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getColumn_Name()
  {
    return (EAttribute)columnEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getColumn_DataType()
  {
    return (EReference)columnEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getPrimaryKey()
  {
    return primaryKeyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getPrimaryKey_Ids()
  {
    return (EReference)primaryKeyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getForeignKey()
  {
    return foreignKeyEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getForeignKey_RefsTo()
  {
    return (EReference)foreignKeyEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getForeignKey_Reference()
  {
    return (EReference)foreignKeyEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EReference getForeignKey_RefsFrom()
  {
    return (EReference)foreignKeyEClass.getEStructuralFeatures().get(2);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EClass getDataType()
  {
    return dataTypeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getDataType_DataType()
  {
    return (EAttribute)dataTypeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EAttribute getDataType_Precision()
  {
    return (EAttribute)dataTypeEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EEnum getENUM_DATA_TYPE()
  {
    return enuM_DATA_TYPEEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SqlCrudGeneratorFactory getSqlCrudGeneratorFactory()
  {
    return (SqlCrudGeneratorFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    schemaEClass = createEClass(SCHEMA);
    createEAttribute(schemaEClass, SCHEMA__NAME);
    createEReference(schemaEClass, SCHEMA__TABLES);

    tableEClass = createEClass(TABLE);
    createEAttribute(tableEClass, TABLE__NAME);
    createEReference(tableEClass, TABLE__COLUMNS);
    createEReference(tableEClass, TABLE__PRIMARY_KEY);
    createEReference(tableEClass, TABLE__FOREIGNS_KEYS);

    columnEClass = createEClass(COLUMN);
    createEAttribute(columnEClass, COLUMN__NAME);
    createEReference(columnEClass, COLUMN__DATA_TYPE);

    primaryKeyEClass = createEClass(PRIMARY_KEY);
    createEReference(primaryKeyEClass, PRIMARY_KEY__IDS);

    foreignKeyEClass = createEClass(FOREIGN_KEY);
    createEReference(foreignKeyEClass, FOREIGN_KEY__REFS_TO);
    createEReference(foreignKeyEClass, FOREIGN_KEY__REFERENCE);
    createEReference(foreignKeyEClass, FOREIGN_KEY__REFS_FROM);

    dataTypeEClass = createEClass(DATA_TYPE);
    createEAttribute(dataTypeEClass, DATA_TYPE__DATA_TYPE);
    createEAttribute(dataTypeEClass, DATA_TYPE__PRECISION);

    // Create enums
    enuM_DATA_TYPEEEnum = createEEnum(ENUM_DATA_TYPE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes

    // Initialize classes and features; add operations and parameters
    initEClass(schemaEClass, Schema.class, "Schema", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSchema_Name(), ecorePackage.getEString(), "name", null, 0, 1, Schema.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSchema_Tables(), this.getTable(), null, "tables", null, 0, -1, Schema.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(tableEClass, Table.class, "Table", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTable_Name(), ecorePackage.getEString(), "name", null, 0, 1, Table.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTable_Columns(), this.getColumn(), null, "columns", null, 0, -1, Table.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTable_PrimaryKey(), this.getPrimaryKey(), null, "primaryKey", null, 0, 1, Table.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getTable_ForeignsKeys(), this.getForeignKey(), null, "foreignsKeys", null, 0, -1, Table.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(columnEClass, Column.class, "Column", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getColumn_Name(), ecorePackage.getEString(), "name", null, 0, 1, Column.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getColumn_DataType(), this.getDataType(), null, "dataType", null, 0, 1, Column.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(primaryKeyEClass, PrimaryKey.class, "PrimaryKey", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getPrimaryKey_Ids(), this.getColumn(), null, "ids", null, 0, -1, PrimaryKey.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, !IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(foreignKeyEClass, ForeignKey.class, "ForeignKey", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getForeignKey_RefsTo(), this.getColumn(), null, "refsTo", null, 0, 1, ForeignKey.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getForeignKey_Reference(), this.getTable(), null, "reference", null, 0, 1, ForeignKey.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getForeignKey_RefsFrom(), this.getColumn(), null, "refsFrom", null, 0, 1, ForeignKey.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_COMPOSITE, IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(dataTypeEClass, DataType.class, "DataType", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getDataType_DataType(), this.getENUM_DATA_TYPE(), "dataType", null, 0, 1, DataType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getDataType_Precision(), ecorePackage.getEInt(), "precision", null, 0, 1, DataType.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.class, "ENUM_DATA_TYPE");
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.CHARACTER);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.VARCHAR);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.VARYING);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.BOOLEAN);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.VARBINARY);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.BINARY);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.INTEGER);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.SMALLINT);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.INT);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.BIGINT);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.DECIMAL);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.NUMERIC);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.FLOAT);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.REAL);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.DATE);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.TIME);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.TIMESTAMP);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.INTERVAL);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.ARRAY);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.MULTISET);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.XML);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.CHARACTER_M);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.VARCHAR_M);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.VARYING_M);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.BOOLEAN_M);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.VARBINARY_M);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.BINARY_M);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.INTEGER_M);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.SMALLINT_M);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.INT_M);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.BIGINT_M);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.DECIMAL_M);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.NUMERIC_M);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.FLOAT_M);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.REAL_M);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.DATE_M);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.TIME_M);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.TIMESTAMP_M);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.INTERVAL_M);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.ARRAY_M);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.MULTISET_M);
    addEEnumLiteral(enuM_DATA_TYPEEEnum, edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ENUM_DATA_TYPE.XML_M);

    // Create resource
    createResource(eNS_URI);
  }

} //SqlCrudGeneratorPackageImpl

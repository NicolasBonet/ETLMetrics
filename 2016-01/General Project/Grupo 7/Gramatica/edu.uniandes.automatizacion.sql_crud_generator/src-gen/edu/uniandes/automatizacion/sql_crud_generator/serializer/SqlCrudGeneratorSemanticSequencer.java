/*
 * generated by Xtext 2.9.2
 */
package edu.uniandes.automatizacion.sql_crud_generator.serializer;

import com.google.inject.Inject;
import edu.uniandes.automatizacion.sql_crud_generator.services.SqlCrudGeneratorGrammarAccess;
import edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.Column;
import edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.DataType;
import edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.ForeignKey;
import edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.PrimaryKey;
import edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.Schema;
import edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.SqlCrudGeneratorPackage;
import edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.Table;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class SqlCrudGeneratorSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SqlCrudGeneratorGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SqlCrudGeneratorPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SqlCrudGeneratorPackage.COLUMN:
				sequence_Column(context, (Column) semanticObject); 
				return; 
			case SqlCrudGeneratorPackage.DATA_TYPE:
				sequence_DataType(context, (DataType) semanticObject); 
				return; 
			case SqlCrudGeneratorPackage.FOREIGN_KEY:
				sequence_ForeignKey(context, (ForeignKey) semanticObject); 
				return; 
			case SqlCrudGeneratorPackage.PRIMARY_KEY:
				sequence_PrimaryKey(context, (PrimaryKey) semanticObject); 
				return; 
			case SqlCrudGeneratorPackage.SCHEMA:
				sequence_Schema(context, (Schema) semanticObject); 
				return; 
			case SqlCrudGeneratorPackage.TABLE:
				sequence_Table(context, (Table) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Column returns Column
	 *
	 * Constraint:
	 *     (name=ID dataType=DataType)
	 */
	protected void sequence_Column(ISerializationContext context, Column semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SqlCrudGeneratorPackage.Literals.COLUMN__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SqlCrudGeneratorPackage.Literals.COLUMN__NAME));
			if (transientValues.isValueTransient(semanticObject, SqlCrudGeneratorPackage.Literals.COLUMN__DATA_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SqlCrudGeneratorPackage.Literals.COLUMN__DATA_TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getColumnAccess().getDataTypeDataTypeParserRuleCall_1_0(), semanticObject.getDataType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DataType returns DataType
	 *
	 * Constraint:
	 *     (dataType=ENUM_DATA_TYPE precision=INT?)
	 */
	protected void sequence_DataType(ISerializationContext context, DataType semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ForeignKey returns ForeignKey
	 *
	 * Constraint:
	 *     (refsTo=[Column|ID] reference=[Table|ID] refsFrom=[Column|ID])
	 */
	protected void sequence_ForeignKey(ISerializationContext context, ForeignKey semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SqlCrudGeneratorPackage.Literals.FOREIGN_KEY__REFS_TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SqlCrudGeneratorPackage.Literals.FOREIGN_KEY__REFS_TO));
			if (transientValues.isValueTransient(semanticObject, SqlCrudGeneratorPackage.Literals.FOREIGN_KEY__REFERENCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SqlCrudGeneratorPackage.Literals.FOREIGN_KEY__REFERENCE));
			if (transientValues.isValueTransient(semanticObject, SqlCrudGeneratorPackage.Literals.FOREIGN_KEY__REFS_FROM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SqlCrudGeneratorPackage.Literals.FOREIGN_KEY__REFS_FROM));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getForeignKeyAccess().getRefsToColumnIDTerminalRuleCall_2_0_1(), semanticObject.getRefsTo());
		feeder.accept(grammarAccess.getForeignKeyAccess().getReferenceTableIDTerminalRuleCall_5_0_1(), semanticObject.getReference());
		feeder.accept(grammarAccess.getForeignKeyAccess().getRefsFromColumnIDTerminalRuleCall_7_0_1(), semanticObject.getRefsFrom());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     PrimaryKey returns PrimaryKey
	 *
	 * Constraint:
	 *     (ids+=[Column|ID] ids+=[Column|ID]*)
	 */
	protected void sequence_PrimaryKey(ISerializationContext context, PrimaryKey semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Schema returns Schema
	 *
	 * Constraint:
	 *     (name=ID tables+=Table*)
	 */
	protected void sequence_Schema(ISerializationContext context, Schema semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Table returns Table
	 *
	 * Constraint:
	 *     (name=ID columns+=Column* primaryKey=PrimaryKey? foreignsKeys+=ForeignKey*)
	 */
	protected void sequence_Table(ISerializationContext context, Table semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}

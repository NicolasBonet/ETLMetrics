/**
 * generated by Xtext 2.9.2
 */
package edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>ENUM DATA TYPE</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see edu.uniandes.automatizacion.sql_crud_generator.sqlCrudGenerator.SqlCrudGeneratorPackage#getENUM_DATA_TYPE()
 * @model
 * @generated
 */
public enum ENUM_DATA_TYPE implements Enumerator
{
  /**
   * The '<em><b>CHARACTER</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CHARACTER_VALUE
   * @generated
   * @ordered
   */
  CHARACTER(0, "CHARACTER", "CHARACTER"),

  /**
   * The '<em><b>VARCHAR</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #VARCHAR_VALUE
   * @generated
   * @ordered
   */
  VARCHAR(1, "VARCHAR", "VARCHAR"),

  /**
   * The '<em><b>VARYING</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #VARYING_VALUE
   * @generated
   * @ordered
   */
  VARYING(2, "VARYING", "VARYING"),

  /**
   * The '<em><b>BOOLEAN</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #BOOLEAN_VALUE
   * @generated
   * @ordered
   */
  BOOLEAN(3, "BOOLEAN", "BOOLEAN"),

  /**
   * The '<em><b>VARBINARY</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #VARBINARY_VALUE
   * @generated
   * @ordered
   */
  VARBINARY(4, "VARBINARY", "VARBINARY"),

  /**
   * The '<em><b>BINARY</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #BINARY_VALUE
   * @generated
   * @ordered
   */
  BINARY(5, "BINARY", "BINARY"),

  /**
   * The '<em><b>INTEGER</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #INTEGER_VALUE
   * @generated
   * @ordered
   */
  INTEGER(6, "INTEGER", "INTEGER"),

  /**
   * The '<em><b>SMALLINT</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SMALLINT_VALUE
   * @generated
   * @ordered
   */
  SMALLINT(7, "SMALLINT", "SMALLINT"),

  /**
   * The '<em><b>INT</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #INT_VALUE
   * @generated
   * @ordered
   */
  INT(8, "INT", "INT"),

  /**
   * The '<em><b>BIGINT</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #BIGINT_VALUE
   * @generated
   * @ordered
   */
  BIGINT(9, "BIGINT", "BIGINT"),

  /**
   * The '<em><b>DECIMAL</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DECIMAL_VALUE
   * @generated
   * @ordered
   */
  DECIMAL(10, "DECIMAL", "DECIMAL"),

  /**
   * The '<em><b>NUMERIC</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NUMERIC_VALUE
   * @generated
   * @ordered
   */
  NUMERIC(11, "NUMERIC", "NUMERIC"),

  /**
   * The '<em><b>FLOAT</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #FLOAT_VALUE
   * @generated
   * @ordered
   */
  FLOAT(12, "FLOAT", "FLOAT"),

  /**
   * The '<em><b>REAL</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #REAL_VALUE
   * @generated
   * @ordered
   */
  REAL(13, "REAL", "REAL"),

  /**
   * The '<em><b>DATE</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DATE_VALUE
   * @generated
   * @ordered
   */
  DATE(14, "DATE", "DATE"),

  /**
   * The '<em><b>TIME</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TIME_VALUE
   * @generated
   * @ordered
   */
  TIME(15, "TIME", "TIME"),

  /**
   * The '<em><b>TIMESTAMP</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TIMESTAMP_VALUE
   * @generated
   * @ordered
   */
  TIMESTAMP(16, "TIMESTAMP", "TIMESTAMP"),

  /**
   * The '<em><b>INTERVAL</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #INTERVAL_VALUE
   * @generated
   * @ordered
   */
  INTERVAL(17, "INTERVAL", "INTERVAL"),

  /**
   * The '<em><b>ARRAY</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ARRAY_VALUE
   * @generated
   * @ordered
   */
  ARRAY(18, "ARRAY", "ARRAY"),

  /**
   * The '<em><b>MULTISET</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #MULTISET_VALUE
   * @generated
   * @ordered
   */
  MULTISET(19, "MULTISET", "MULTISET"),

  /**
   * The '<em><b>XML</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #XML_VALUE
   * @generated
   * @ordered
   */
  XML(20, "XML", "XML"),

  /**
   * The '<em><b>CHARACTER M</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #CHARACTER_M_VALUE
   * @generated
   * @ordered
   */
  CHARACTER_M(21, "CHARACTER_M", "character"),

  /**
   * The '<em><b>VARCHAR M</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #VARCHAR_M_VALUE
   * @generated
   * @ordered
   */
  VARCHAR_M(22, "VARCHAR_M", "varchar"),

  /**
   * The '<em><b>VARYING M</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #VARYING_M_VALUE
   * @generated
   * @ordered
   */
  VARYING_M(23, "VARYING_M", "varying"),

  /**
   * The '<em><b>BOOLEAN M</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #BOOLEAN_M_VALUE
   * @generated
   * @ordered
   */
  BOOLEAN_M(24, "BOOLEAN_M", "boolean"),

  /**
   * The '<em><b>VARBINARY M</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #VARBINARY_M_VALUE
   * @generated
   * @ordered
   */
  VARBINARY_M(25, "VARBINARY_M", "varbinary"),

  /**
   * The '<em><b>BINARY M</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #BINARY_M_VALUE
   * @generated
   * @ordered
   */
  BINARY_M(26, "BINARY_M", "binary"),

  /**
   * The '<em><b>INTEGER M</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #INTEGER_M_VALUE
   * @generated
   * @ordered
   */
  INTEGER_M(27, "INTEGER_M", "integer"),

  /**
   * The '<em><b>SMALLINT M</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SMALLINT_M_VALUE
   * @generated
   * @ordered
   */
  SMALLINT_M(28, "SMALLINT_M", "smallint"),

  /**
   * The '<em><b>INT M</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #INT_M_VALUE
   * @generated
   * @ordered
   */
  INT_M(29, "INT_M", "int"),

  /**
   * The '<em><b>BIGINT M</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #BIGINT_M_VALUE
   * @generated
   * @ordered
   */
  BIGINT_M(30, "BIGINT_M", "bigint"),

  /**
   * The '<em><b>DECIMAL M</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DECIMAL_M_VALUE
   * @generated
   * @ordered
   */
  DECIMAL_M(31, "DECIMAL_M", "decimal"),

  /**
   * The '<em><b>NUMERIC M</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #NUMERIC_M_VALUE
   * @generated
   * @ordered
   */
  NUMERIC_M(32, "NUMERIC_M", "numeric"),

  /**
   * The '<em><b>FLOAT M</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #FLOAT_M_VALUE
   * @generated
   * @ordered
   */
  FLOAT_M(33, "FLOAT_M", "float"),

  /**
   * The '<em><b>REAL M</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #REAL_M_VALUE
   * @generated
   * @ordered
   */
  REAL_M(34, "REAL_M", "real"),

  /**
   * The '<em><b>DATE M</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DATE_M_VALUE
   * @generated
   * @ordered
   */
  DATE_M(35, "DATE_M", "date"),

  /**
   * The '<em><b>TIME M</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TIME_M_VALUE
   * @generated
   * @ordered
   */
  TIME_M(36, "TIME_M", "time"),

  /**
   * The '<em><b>TIMESTAMP M</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #TIMESTAMP_M_VALUE
   * @generated
   * @ordered
   */
  TIMESTAMP_M(37, "TIMESTAMP_M", "timestamp"),

  /**
   * The '<em><b>INTERVAL M</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #INTERVAL_M_VALUE
   * @generated
   * @ordered
   */
  INTERVAL_M(38, "INTERVAL_M", "interval"),

  /**
   * The '<em><b>ARRAY M</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #ARRAY_M_VALUE
   * @generated
   * @ordered
   */
  ARRAY_M(39, "ARRAY_M", "array"),

  /**
   * The '<em><b>MULTISET M</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #MULTISET_M_VALUE
   * @generated
   * @ordered
   */
  MULTISET_M(40, "MULTISET_M", "multiset"),

  /**
   * The '<em><b>XML M</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #XML_M_VALUE
   * @generated
   * @ordered
   */
  XML_M(41, "XML_M", "xml");

  /**
   * The '<em><b>CHARACTER</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>CHARACTER</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #CHARACTER
   * @model
   * @generated
   * @ordered
   */
  public static final int CHARACTER_VALUE = 0;

  /**
   * The '<em><b>VARCHAR</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>VARCHAR</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #VARCHAR
   * @model
   * @generated
   * @ordered
   */
  public static final int VARCHAR_VALUE = 1;

  /**
   * The '<em><b>VARYING</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>VARYING</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #VARYING
   * @model
   * @generated
   * @ordered
   */
  public static final int VARYING_VALUE = 2;

  /**
   * The '<em><b>BOOLEAN</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>BOOLEAN</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #BOOLEAN
   * @model
   * @generated
   * @ordered
   */
  public static final int BOOLEAN_VALUE = 3;

  /**
   * The '<em><b>VARBINARY</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>VARBINARY</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #VARBINARY
   * @model
   * @generated
   * @ordered
   */
  public static final int VARBINARY_VALUE = 4;

  /**
   * The '<em><b>BINARY</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>BINARY</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #BINARY
   * @model
   * @generated
   * @ordered
   */
  public static final int BINARY_VALUE = 5;

  /**
   * The '<em><b>INTEGER</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>INTEGER</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #INTEGER
   * @model
   * @generated
   * @ordered
   */
  public static final int INTEGER_VALUE = 6;

  /**
   * The '<em><b>SMALLINT</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>SMALLINT</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #SMALLINT
   * @model
   * @generated
   * @ordered
   */
  public static final int SMALLINT_VALUE = 7;

  /**
   * The '<em><b>INT</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>INT</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #INT
   * @model
   * @generated
   * @ordered
   */
  public static final int INT_VALUE = 8;

  /**
   * The '<em><b>BIGINT</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>BIGINT</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #BIGINT
   * @model
   * @generated
   * @ordered
   */
  public static final int BIGINT_VALUE = 9;

  /**
   * The '<em><b>DECIMAL</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>DECIMAL</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #DECIMAL
   * @model
   * @generated
   * @ordered
   */
  public static final int DECIMAL_VALUE = 10;

  /**
   * The '<em><b>NUMERIC</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>NUMERIC</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #NUMERIC
   * @model
   * @generated
   * @ordered
   */
  public static final int NUMERIC_VALUE = 11;

  /**
   * The '<em><b>FLOAT</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>FLOAT</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #FLOAT
   * @model
   * @generated
   * @ordered
   */
  public static final int FLOAT_VALUE = 12;

  /**
   * The '<em><b>REAL</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>REAL</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #REAL
   * @model
   * @generated
   * @ordered
   */
  public static final int REAL_VALUE = 13;

  /**
   * The '<em><b>DATE</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>DATE</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #DATE
   * @model
   * @generated
   * @ordered
   */
  public static final int DATE_VALUE = 14;

  /**
   * The '<em><b>TIME</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>TIME</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #TIME
   * @model
   * @generated
   * @ordered
   */
  public static final int TIME_VALUE = 15;

  /**
   * The '<em><b>TIMESTAMP</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>TIMESTAMP</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #TIMESTAMP
   * @model
   * @generated
   * @ordered
   */
  public static final int TIMESTAMP_VALUE = 16;

  /**
   * The '<em><b>INTERVAL</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>INTERVAL</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #INTERVAL
   * @model
   * @generated
   * @ordered
   */
  public static final int INTERVAL_VALUE = 17;

  /**
   * The '<em><b>ARRAY</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>ARRAY</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #ARRAY
   * @model
   * @generated
   * @ordered
   */
  public static final int ARRAY_VALUE = 18;

  /**
   * The '<em><b>MULTISET</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>MULTISET</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #MULTISET
   * @model
   * @generated
   * @ordered
   */
  public static final int MULTISET_VALUE = 19;

  /**
   * The '<em><b>XML</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>XML</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #XML
   * @model
   * @generated
   * @ordered
   */
  public static final int XML_VALUE = 20;

  /**
   * The '<em><b>CHARACTER M</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>CHARACTER M</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #CHARACTER_M
   * @model literal="character"
   * @generated
   * @ordered
   */
  public static final int CHARACTER_M_VALUE = 21;

  /**
   * The '<em><b>VARCHAR M</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>VARCHAR M</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #VARCHAR_M
   * @model literal="varchar"
   * @generated
   * @ordered
   */
  public static final int VARCHAR_M_VALUE = 22;

  /**
   * The '<em><b>VARYING M</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>VARYING M</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #VARYING_M
   * @model literal="varying"
   * @generated
   * @ordered
   */
  public static final int VARYING_M_VALUE = 23;

  /**
   * The '<em><b>BOOLEAN M</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>BOOLEAN M</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #BOOLEAN_M
   * @model literal="boolean"
   * @generated
   * @ordered
   */
  public static final int BOOLEAN_M_VALUE = 24;

  /**
   * The '<em><b>VARBINARY M</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>VARBINARY M</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #VARBINARY_M
   * @model literal="varbinary"
   * @generated
   * @ordered
   */
  public static final int VARBINARY_M_VALUE = 25;

  /**
   * The '<em><b>BINARY M</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>BINARY M</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #BINARY_M
   * @model literal="binary"
   * @generated
   * @ordered
   */
  public static final int BINARY_M_VALUE = 26;

  /**
   * The '<em><b>INTEGER M</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>INTEGER M</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #INTEGER_M
   * @model literal="integer"
   * @generated
   * @ordered
   */
  public static final int INTEGER_M_VALUE = 27;

  /**
   * The '<em><b>SMALLINT M</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>SMALLINT M</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #SMALLINT_M
   * @model literal="smallint"
   * @generated
   * @ordered
   */
  public static final int SMALLINT_M_VALUE = 28;

  /**
   * The '<em><b>INT M</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>INT M</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #INT_M
   * @model literal="int"
   * @generated
   * @ordered
   */
  public static final int INT_M_VALUE = 29;

  /**
   * The '<em><b>BIGINT M</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>BIGINT M</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #BIGINT_M
   * @model literal="bigint"
   * @generated
   * @ordered
   */
  public static final int BIGINT_M_VALUE = 30;

  /**
   * The '<em><b>DECIMAL M</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>DECIMAL M</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #DECIMAL_M
   * @model literal="decimal"
   * @generated
   * @ordered
   */
  public static final int DECIMAL_M_VALUE = 31;

  /**
   * The '<em><b>NUMERIC M</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>NUMERIC M</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #NUMERIC_M
   * @model literal="numeric"
   * @generated
   * @ordered
   */
  public static final int NUMERIC_M_VALUE = 32;

  /**
   * The '<em><b>FLOAT M</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>FLOAT M</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #FLOAT_M
   * @model literal="float"
   * @generated
   * @ordered
   */
  public static final int FLOAT_M_VALUE = 33;

  /**
   * The '<em><b>REAL M</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>REAL M</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #REAL_M
   * @model literal="real"
   * @generated
   * @ordered
   */
  public static final int REAL_M_VALUE = 34;

  /**
   * The '<em><b>DATE M</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>DATE M</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #DATE_M
   * @model literal="date"
   * @generated
   * @ordered
   */
  public static final int DATE_M_VALUE = 35;

  /**
   * The '<em><b>TIME M</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>TIME M</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #TIME_M
   * @model literal="time"
   * @generated
   * @ordered
   */
  public static final int TIME_M_VALUE = 36;

  /**
   * The '<em><b>TIMESTAMP M</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>TIMESTAMP M</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #TIMESTAMP_M
   * @model literal="timestamp"
   * @generated
   * @ordered
   */
  public static final int TIMESTAMP_M_VALUE = 37;

  /**
   * The '<em><b>INTERVAL M</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>INTERVAL M</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #INTERVAL_M
   * @model literal="interval"
   * @generated
   * @ordered
   */
  public static final int INTERVAL_M_VALUE = 38;

  /**
   * The '<em><b>ARRAY M</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>ARRAY M</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #ARRAY_M
   * @model literal="array"
   * @generated
   * @ordered
   */
  public static final int ARRAY_M_VALUE = 39;

  /**
   * The '<em><b>MULTISET M</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>MULTISET M</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #MULTISET_M
   * @model literal="multiset"
   * @generated
   * @ordered
   */
  public static final int MULTISET_M_VALUE = 40;

  /**
   * The '<em><b>XML M</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <p>
   * If the meaning of '<em><b>XML M</b></em>' literal object isn't clear,
   * there really should be more of a description here...
   * </p>
   * <!-- end-user-doc -->
   * @see #XML_M
   * @model literal="xml"
   * @generated
   * @ordered
   */
  public static final int XML_M_VALUE = 41;

  /**
   * An array of all the '<em><b>ENUM DATA TYPE</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final ENUM_DATA_TYPE[] VALUES_ARRAY =
    new ENUM_DATA_TYPE[]
    {
      CHARACTER,
      VARCHAR,
      VARYING,
      BOOLEAN,
      VARBINARY,
      BINARY,
      INTEGER,
      SMALLINT,
      INT,
      BIGINT,
      DECIMAL,
      NUMERIC,
      FLOAT,
      REAL,
      DATE,
      TIME,
      TIMESTAMP,
      INTERVAL,
      ARRAY,
      MULTISET,
      XML,
      CHARACTER_M,
      VARCHAR_M,
      VARYING_M,
      BOOLEAN_M,
      VARBINARY_M,
      BINARY_M,
      INTEGER_M,
      SMALLINT_M,
      INT_M,
      BIGINT_M,
      DECIMAL_M,
      NUMERIC_M,
      FLOAT_M,
      REAL_M,
      DATE_M,
      TIME_M,
      TIMESTAMP_M,
      INTERVAL_M,
      ARRAY_M,
      MULTISET_M,
      XML_M,
    };

  /**
   * A public read-only list of all the '<em><b>ENUM DATA TYPE</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<ENUM_DATA_TYPE> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>ENUM DATA TYPE</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static ENUM_DATA_TYPE get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      ENUM_DATA_TYPE result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>ENUM DATA TYPE</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static ENUM_DATA_TYPE getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      ENUM_DATA_TYPE result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>ENUM DATA TYPE</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static ENUM_DATA_TYPE get(int value)
  {
    switch (value)
    {
      case CHARACTER_VALUE: return CHARACTER;
      case VARCHAR_VALUE: return VARCHAR;
      case VARYING_VALUE: return VARYING;
      case BOOLEAN_VALUE: return BOOLEAN;
      case VARBINARY_VALUE: return VARBINARY;
      case BINARY_VALUE: return BINARY;
      case INTEGER_VALUE: return INTEGER;
      case SMALLINT_VALUE: return SMALLINT;
      case INT_VALUE: return INT;
      case BIGINT_VALUE: return BIGINT;
      case DECIMAL_VALUE: return DECIMAL;
      case NUMERIC_VALUE: return NUMERIC;
      case FLOAT_VALUE: return FLOAT;
      case REAL_VALUE: return REAL;
      case DATE_VALUE: return DATE;
      case TIME_VALUE: return TIME;
      case TIMESTAMP_VALUE: return TIMESTAMP;
      case INTERVAL_VALUE: return INTERVAL;
      case ARRAY_VALUE: return ARRAY;
      case MULTISET_VALUE: return MULTISET;
      case XML_VALUE: return XML;
      case CHARACTER_M_VALUE: return CHARACTER_M;
      case VARCHAR_M_VALUE: return VARCHAR_M;
      case VARYING_M_VALUE: return VARYING_M;
      case BOOLEAN_M_VALUE: return BOOLEAN_M;
      case VARBINARY_M_VALUE: return VARBINARY_M;
      case BINARY_M_VALUE: return BINARY_M;
      case INTEGER_M_VALUE: return INTEGER_M;
      case SMALLINT_M_VALUE: return SMALLINT_M;
      case INT_M_VALUE: return INT_M;
      case BIGINT_M_VALUE: return BIGINT_M;
      case DECIMAL_M_VALUE: return DECIMAL_M;
      case NUMERIC_M_VALUE: return NUMERIC_M;
      case FLOAT_M_VALUE: return FLOAT_M;
      case REAL_M_VALUE: return REAL_M;
      case DATE_M_VALUE: return DATE_M;
      case TIME_M_VALUE: return TIME_M;
      case TIMESTAMP_M_VALUE: return TIMESTAMP_M;
      case INTERVAL_M_VALUE: return INTERVAL_M;
      case ARRAY_M_VALUE: return ARRAY_M;
      case MULTISET_M_VALUE: return MULTISET_M;
      case XML_M_VALUE: return XML_M;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private ENUM_DATA_TYPE(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //ENUM_DATA_TYPE

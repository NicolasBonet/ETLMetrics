/*
 * generated by Xtext 2.9.2
 */
grammar InternalSqlCrudGenerator;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package edu.uniandes.automatizacion.sql_crud_generator.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package edu.uniandes.automatizacion.sql_crud_generator.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import edu.uniandes.automatizacion.sql_crud_generator.services.SqlCrudGeneratorGrammarAccess;

}

@parser::members {

 	private SqlCrudGeneratorGrammarAccess grammarAccess;

    public InternalSqlCrudGeneratorParser(TokenStream input, SqlCrudGeneratorGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Schema";
   	}

   	@Override
   	protected SqlCrudGeneratorGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSchema
entryRuleSchema returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSchemaRule()); }
	iv_ruleSchema=ruleSchema
	{ $current=$iv_ruleSchema.current; }
	EOF;

// Rule Schema
ruleSchema returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_WCREATE_0=RULE_WCREATE
		{
			newLeafNode(this_WCREATE_0, grammarAccess.getSchemaAccess().getWCREATETerminalRuleCall_0());
		}
		this_WNEW_1=RULE_WNEW
		{
			newLeafNode(this_WNEW_1, grammarAccess.getSchemaAccess().getWNEWTerminalRuleCall_1());
		}
		this_WSCHEMA_2=RULE_WSCHEMA
		{
			newLeafNode(this_WSCHEMA_2, grammarAccess.getSchemaAccess().getWSCHEMATerminalRuleCall_2());
		}
		(
			(
				lv_name_3_0=RULE_ID
				{
					newLeafNode(lv_name_3_0, grammarAccess.getSchemaAccess().getNameIDTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSchemaRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_3_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		this_SEMICOLON_4=RULE_SEMICOLON
		{
			newLeafNode(this_SEMICOLON_4, grammarAccess.getSchemaAccess().getSEMICOLONTerminalRuleCall_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSchemaAccess().getTablesTableParserRuleCall_5_0());
				}
				lv_tables_5_0=ruleTable
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSchemaRule());
					}
					add(
						$current,
						"tables",
						lv_tables_5_0,
						"edu.uniandes.automatizacion.sql_crud_generator.SqlCrudGenerator.Table");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleTable
entryRuleTable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTableRule()); }
	iv_ruleTable=ruleTable
	{ $current=$iv_ruleTable.current; }
	EOF;

// Rule Table
ruleTable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_WCREATE_0=RULE_WCREATE
		{
			newLeafNode(this_WCREATE_0, grammarAccess.getTableAccess().getWCREATETerminalRuleCall_0());
		}
		this_WTABLE_1=RULE_WTABLE
		{
			newLeafNode(this_WTABLE_1, grammarAccess.getTableAccess().getWTABLETerminalRuleCall_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getTableAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTableRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		this_PARENTHESIS_IZQ_3=RULE_PARENTHESIS_IZQ
		{
			newLeafNode(this_PARENTHESIS_IZQ_3, grammarAccess.getTableAccess().getPARENTHESIS_IZQTerminalRuleCall_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTableAccess().getColumnsColumnParserRuleCall_4_0());
				}
				lv_columns_4_0=ruleColumn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableRule());
					}
					add(
						$current,
						"columns",
						lv_columns_4_0,
						"edu.uniandes.automatizacion.sql_crud_generator.SqlCrudGenerator.Column");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getTableAccess().getPrimaryKeyPrimaryKeyParserRuleCall_5_0());
				}
				lv_primaryKey_5_0=rulePrimaryKey
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableRule());
					}
					set(
						$current,
						"primaryKey",
						lv_primaryKey_5_0,
						"edu.uniandes.automatizacion.sql_crud_generator.SqlCrudGenerator.PrimaryKey");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getTableAccess().getForeignsKeysForeignKeyParserRuleCall_6_0());
				}
				lv_foreignsKeys_6_0=ruleForeignKey
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTableRule());
					}
					add(
						$current,
						"foreignsKeys",
						lv_foreignsKeys_6_0,
						"edu.uniandes.automatizacion.sql_crud_generator.SqlCrudGenerator.ForeignKey");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		this_PARENTHESIS_DER_7=RULE_PARENTHESIS_DER
		{
			newLeafNode(this_PARENTHESIS_DER_7, grammarAccess.getTableAccess().getPARENTHESIS_DERTerminalRuleCall_7());
		}
	)
;

// Entry rule entryRuleColumn
entryRuleColumn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnRule()); }
	iv_ruleColumn=ruleColumn
	{ $current=$iv_ruleColumn.current; }
	EOF;

// Rule Column
ruleColumn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_name_0_0=RULE_ID
				{
					newLeafNode(lv_name_0_0, grammarAccess.getColumnAccess().getNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColumnRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getColumnAccess().getDataTypeDataTypeParserRuleCall_1_0());
				}
				lv_dataType_1_0=ruleDataType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColumnRule());
					}
					set(
						$current,
						"dataType",
						lv_dataType_1_0,
						"edu.uniandes.automatizacion.sql_crud_generator.SqlCrudGenerator.DataType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			this_WNOT_2=RULE_WNOT
			{
				newLeafNode(this_WNOT_2, grammarAccess.getColumnAccess().getWNOTTerminalRuleCall_2_0());
			}
			this_WNULL_3=RULE_WNULL
			{
				newLeafNode(this_WNULL_3, grammarAccess.getColumnAccess().getWNULLTerminalRuleCall_2_1());
			}
		)?
		(
			this_COMA_4=RULE_COMA
			{
				newLeafNode(this_COMA_4, grammarAccess.getColumnAccess().getCOMATerminalRuleCall_3());
			}
		)?
	)
;

// Entry rule entryRulePrimaryKey
entryRulePrimaryKey returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryKeyRule()); }
	iv_rulePrimaryKey=rulePrimaryKey
	{ $current=$iv_rulePrimaryKey.current; }
	EOF;

// Rule PrimaryKey
rulePrimaryKey returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_WPRIMARY_KEY_0=RULE_WPRIMARY_KEY
		{
			newLeafNode(this_WPRIMARY_KEY_0, grammarAccess.getPrimaryKeyAccess().getWPRIMARY_KEYTerminalRuleCall_0());
		}
		this_PARENTHESIS_IZQ_1=RULE_PARENTHESIS_IZQ
		{
			newLeafNode(this_PARENTHESIS_IZQ_1, grammarAccess.getPrimaryKeyAccess().getPARENTHESIS_IZQTerminalRuleCall_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPrimaryKeyRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getPrimaryKeyAccess().getIdsColumnCrossReference_2_0());
				}
			)
		)
		(
			this_COMA_3=RULE_COMA
			{
				newLeafNode(this_COMA_3, grammarAccess.getPrimaryKeyAccess().getCOMATerminalRuleCall_3_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getPrimaryKeyRule());
						}
					}
					otherlv_4=RULE_ID
					{
						newLeafNode(otherlv_4, grammarAccess.getPrimaryKeyAccess().getIdsColumnCrossReference_3_1_0());
					}
				)
			)
		)*
		this_PARENTHESIS_DER_5=RULE_PARENTHESIS_DER
		{
			newLeafNode(this_PARENTHESIS_DER_5, grammarAccess.getPrimaryKeyAccess().getPARENTHESIS_DERTerminalRuleCall_4());
		}
		(
			this_COMA_6=RULE_COMA
			{
				newLeafNode(this_COMA_6, grammarAccess.getPrimaryKeyAccess().getCOMATerminalRuleCall_5());
			}
		)?
	)
;

// Entry rule entryRuleForeignKey
entryRuleForeignKey returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForeignKeyRule()); }
	iv_ruleForeignKey=ruleForeignKey
	{ $current=$iv_ruleForeignKey.current; }
	EOF;

// Rule ForeignKey
ruleForeignKey returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_WFOREIGN_KEY_0=RULE_WFOREIGN_KEY
		{
			newLeafNode(this_WFOREIGN_KEY_0, grammarAccess.getForeignKeyAccess().getWFOREIGN_KEYTerminalRuleCall_0());
		}
		this_PARENTHESIS_IZQ_1=RULE_PARENTHESIS_IZQ
		{
			newLeafNode(this_PARENTHESIS_IZQ_1, grammarAccess.getForeignKeyAccess().getPARENTHESIS_IZQTerminalRuleCall_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForeignKeyRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getForeignKeyAccess().getRefsToColumnCrossReference_2_0());
				}
			)
		)
		this_PARENTHESIS_DER_3=RULE_PARENTHESIS_DER
		{
			newLeafNode(this_PARENTHESIS_DER_3, grammarAccess.getForeignKeyAccess().getPARENTHESIS_DERTerminalRuleCall_3());
		}
		this_WREFERENCES_4=RULE_WREFERENCES
		{
			newLeafNode(this_WREFERENCES_4, grammarAccess.getForeignKeyAccess().getWREFERENCESTerminalRuleCall_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForeignKeyRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getForeignKeyAccess().getReferenceTableCrossReference_5_0());
				}
			)
		)
		this_PARENTHESIS_IZQ_6=RULE_PARENTHESIS_IZQ
		{
			newLeafNode(this_PARENTHESIS_IZQ_6, grammarAccess.getForeignKeyAccess().getPARENTHESIS_IZQTerminalRuleCall_6());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForeignKeyRule());
					}
				}
				otherlv_7=RULE_ID
				{
					newLeafNode(otherlv_7, grammarAccess.getForeignKeyAccess().getRefsFromColumnCrossReference_7_0());
				}
			)
		)
		this_PARENTHESIS_DER_8=RULE_PARENTHESIS_DER
		{
			newLeafNode(this_PARENTHESIS_DER_8, grammarAccess.getForeignKeyAccess().getPARENTHESIS_DERTerminalRuleCall_8());
		}
		(
			this_COMA_9=RULE_COMA
			{
				newLeafNode(this_COMA_9, grammarAccess.getForeignKeyAccess().getCOMATerminalRuleCall_9());
			}
		)?
	)
;

// Entry rule entryRuleDataType
entryRuleDataType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataTypeRule()); }
	iv_ruleDataType=ruleDataType
	{ $current=$iv_ruleDataType.current; }
	EOF;

// Rule DataType
ruleDataType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getDataTypeAccess().getDataTypeENUM_DATA_TYPEEnumRuleCall_0_0());
				}
				lv_dataType_0_0=ruleENUM_DATA_TYPE
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDataTypeRule());
					}
					set(
						$current,
						"dataType",
						lv_dataType_0_0,
						"edu.uniandes.automatizacion.sql_crud_generator.SqlCrudGenerator.ENUM_DATA_TYPE");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			this_PARENTHESIS_IZQ_1=RULE_PARENTHESIS_IZQ
			{
				newLeafNode(this_PARENTHESIS_IZQ_1, grammarAccess.getDataTypeAccess().getPARENTHESIS_IZQTerminalRuleCall_1_0());
			}
			(
				(
					lv_precision_2_0=RULE_INT
					{
						newLeafNode(lv_precision_2_0, grammarAccess.getDataTypeAccess().getPrecisionINTTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDataTypeRule());
						}
						setWithLastConsumed(
							$current,
							"precision",
							lv_precision_2_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			this_PARENTHESIS_DER_3=RULE_PARENTHESIS_DER
			{
				newLeafNode(this_PARENTHESIS_DER_3, grammarAccess.getDataTypeAccess().getPARENTHESIS_DERTerminalRuleCall_1_2());
			}
		)?
	)
;

// Rule ENUM_DATA_TYPE
ruleENUM_DATA_TYPE returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='CHARACTER'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getCHARACTEREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getENUM_DATA_TYPEAccess().getCHARACTEREnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='VARCHAR'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getVARCHAREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getENUM_DATA_TYPEAccess().getVARCHAREnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='VARYING'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getVARYINGEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getENUM_DATA_TYPEAccess().getVARYINGEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='BOOLEAN'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getBOOLEANEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getENUM_DATA_TYPEAccess().getBOOLEANEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='VARBINARY'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getVARBINARYEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getENUM_DATA_TYPEAccess().getVARBINARYEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='BINARY'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getBINARYEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getENUM_DATA_TYPEAccess().getBINARYEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='INTEGER'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getINTEGEREnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getENUM_DATA_TYPEAccess().getINTEGEREnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='SMALLINT'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getSMALLINTEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getENUM_DATA_TYPEAccess().getSMALLINTEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='INT'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getINTEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getENUM_DATA_TYPEAccess().getINTEnumLiteralDeclaration_8());
			}
		)
		    |
		(
			enumLiteral_9='BIGINT'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getBIGINTEnumLiteralDeclaration_9().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_9, grammarAccess.getENUM_DATA_TYPEAccess().getBIGINTEnumLiteralDeclaration_9());
			}
		)
		    |
		(
			enumLiteral_10='DECIMAL'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getDECIMALEnumLiteralDeclaration_10().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_10, grammarAccess.getENUM_DATA_TYPEAccess().getDECIMALEnumLiteralDeclaration_10());
			}
		)
		    |
		(
			enumLiteral_11='NUMERIC'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getNUMERICEnumLiteralDeclaration_11().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_11, grammarAccess.getENUM_DATA_TYPEAccess().getNUMERICEnumLiteralDeclaration_11());
			}
		)
		    |
		(
			enumLiteral_12='FLOAT'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getFLOATEnumLiteralDeclaration_12().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_12, grammarAccess.getENUM_DATA_TYPEAccess().getFLOATEnumLiteralDeclaration_12());
			}
		)
		    |
		(
			enumLiteral_13='REAL'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getREALEnumLiteralDeclaration_13().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_13, grammarAccess.getENUM_DATA_TYPEAccess().getREALEnumLiteralDeclaration_13());
			}
		)
		    |
		(
			enumLiteral_14='DATE'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getDATEEnumLiteralDeclaration_14().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_14, grammarAccess.getENUM_DATA_TYPEAccess().getDATEEnumLiteralDeclaration_14());
			}
		)
		    |
		(
			enumLiteral_15='TIME'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getTIMEEnumLiteralDeclaration_15().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_15, grammarAccess.getENUM_DATA_TYPEAccess().getTIMEEnumLiteralDeclaration_15());
			}
		)
		    |
		(
			enumLiteral_16='TIMESTAMP'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getTIMESTAMPEnumLiteralDeclaration_16().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_16, grammarAccess.getENUM_DATA_TYPEAccess().getTIMESTAMPEnumLiteralDeclaration_16());
			}
		)
		    |
		(
			enumLiteral_17='INTERVAL'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getINTERVALEnumLiteralDeclaration_17().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_17, grammarAccess.getENUM_DATA_TYPEAccess().getINTERVALEnumLiteralDeclaration_17());
			}
		)
		    |
		(
			enumLiteral_18='ARRAY'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getARRAYEnumLiteralDeclaration_18().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_18, grammarAccess.getENUM_DATA_TYPEAccess().getARRAYEnumLiteralDeclaration_18());
			}
		)
		    |
		(
			enumLiteral_19='MULTISET'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getMULTISETEnumLiteralDeclaration_19().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_19, grammarAccess.getENUM_DATA_TYPEAccess().getMULTISETEnumLiteralDeclaration_19());
			}
		)
		    |
		(
			enumLiteral_20='XML'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getXMLEnumLiteralDeclaration_20().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_20, grammarAccess.getENUM_DATA_TYPEAccess().getXMLEnumLiteralDeclaration_20());
			}
		)
		    |
		(
			enumLiteral_21='character'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getCHARACTER_MEnumLiteralDeclaration_21().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_21, grammarAccess.getENUM_DATA_TYPEAccess().getCHARACTER_MEnumLiteralDeclaration_21());
			}
		)
		    |
		(
			enumLiteral_22='varchar'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getVARCHAR_MEnumLiteralDeclaration_22().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_22, grammarAccess.getENUM_DATA_TYPEAccess().getVARCHAR_MEnumLiteralDeclaration_22());
			}
		)
		    |
		(
			enumLiteral_23='varying'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getVARYING_MEnumLiteralDeclaration_23().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_23, grammarAccess.getENUM_DATA_TYPEAccess().getVARYING_MEnumLiteralDeclaration_23());
			}
		)
		    |
		(
			enumLiteral_24='boolean'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getBOOLEAN_MEnumLiteralDeclaration_24().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_24, grammarAccess.getENUM_DATA_TYPEAccess().getBOOLEAN_MEnumLiteralDeclaration_24());
			}
		)
		    |
		(
			enumLiteral_25='varbinary'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getVARBINARY_MEnumLiteralDeclaration_25().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_25, grammarAccess.getENUM_DATA_TYPEAccess().getVARBINARY_MEnumLiteralDeclaration_25());
			}
		)
		    |
		(
			enumLiteral_26='binary'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getBINARY_MEnumLiteralDeclaration_26().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_26, grammarAccess.getENUM_DATA_TYPEAccess().getBINARY_MEnumLiteralDeclaration_26());
			}
		)
		    |
		(
			enumLiteral_27='integer'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getINTEGER_MEnumLiteralDeclaration_27().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_27, grammarAccess.getENUM_DATA_TYPEAccess().getINTEGER_MEnumLiteralDeclaration_27());
			}
		)
		    |
		(
			enumLiteral_28='smallint'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getSMALLINT_MEnumLiteralDeclaration_28().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_28, grammarAccess.getENUM_DATA_TYPEAccess().getSMALLINT_MEnumLiteralDeclaration_28());
			}
		)
		    |
		(
			enumLiteral_29='int'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getINT_MEnumLiteralDeclaration_29().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_29, grammarAccess.getENUM_DATA_TYPEAccess().getINT_MEnumLiteralDeclaration_29());
			}
		)
		    |
		(
			enumLiteral_30='bigint'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getBIGINT_MEnumLiteralDeclaration_30().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_30, grammarAccess.getENUM_DATA_TYPEAccess().getBIGINT_MEnumLiteralDeclaration_30());
			}
		)
		    |
		(
			enumLiteral_31='decimal'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getDECIMAL_MEnumLiteralDeclaration_31().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_31, grammarAccess.getENUM_DATA_TYPEAccess().getDECIMAL_MEnumLiteralDeclaration_31());
			}
		)
		    |
		(
			enumLiteral_32='numeric'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getNUMERIC_MEnumLiteralDeclaration_32().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_32, grammarAccess.getENUM_DATA_TYPEAccess().getNUMERIC_MEnumLiteralDeclaration_32());
			}
		)
		    |
		(
			enumLiteral_33='float'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getFLOAT_MEnumLiteralDeclaration_33().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_33, grammarAccess.getENUM_DATA_TYPEAccess().getFLOAT_MEnumLiteralDeclaration_33());
			}
		)
		    |
		(
			enumLiteral_34='real'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getREAL_MEnumLiteralDeclaration_34().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_34, grammarAccess.getENUM_DATA_TYPEAccess().getREAL_MEnumLiteralDeclaration_34());
			}
		)
		    |
		(
			enumLiteral_35='date'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getDATE_MEnumLiteralDeclaration_35().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_35, grammarAccess.getENUM_DATA_TYPEAccess().getDATE_MEnumLiteralDeclaration_35());
			}
		)
		    |
		(
			enumLiteral_36='time'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getTIME_MEnumLiteralDeclaration_36().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_36, grammarAccess.getENUM_DATA_TYPEAccess().getTIME_MEnumLiteralDeclaration_36());
			}
		)
		    |
		(
			enumLiteral_37='timestamp'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getTIMESTAMP_MEnumLiteralDeclaration_37().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_37, grammarAccess.getENUM_DATA_TYPEAccess().getTIMESTAMP_MEnumLiteralDeclaration_37());
			}
		)
		    |
		(
			enumLiteral_38='interval'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getINTERVAL_MEnumLiteralDeclaration_38().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_38, grammarAccess.getENUM_DATA_TYPEAccess().getINTERVAL_MEnumLiteralDeclaration_38());
			}
		)
		    |
		(
			enumLiteral_39='array'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getARRAY_MEnumLiteralDeclaration_39().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_39, grammarAccess.getENUM_DATA_TYPEAccess().getARRAY_MEnumLiteralDeclaration_39());
			}
		)
		    |
		(
			enumLiteral_40='multiset'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getMULTISET_MEnumLiteralDeclaration_40().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_40, grammarAccess.getENUM_DATA_TYPEAccess().getMULTISET_MEnumLiteralDeclaration_40());
			}
		)
		    |
		(
			enumLiteral_41='xml'
			{
				$current = grammarAccess.getENUM_DATA_TYPEAccess().getXML_MEnumLiteralDeclaration_41().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_41, grammarAccess.getENUM_DATA_TYPEAccess().getXML_MEnumLiteralDeclaration_41());
			}
		)
	)
;

RULE_WNEW : 'NEW';

RULE_WSCHEMA : 'SCHEMA';

RULE_WCREATE : 'CREATE';

RULE_WTABLE : 'TABLE';

RULE_WPRIMARY_KEY : 'PRIMARY KEY';

RULE_WFOREIGN_KEY : 'FOREIGN KEY';

RULE_WREFERENCES : 'REFERENCES';

RULE_WNOT : 'NOT';

RULE_WNULL : 'NULL';

RULE_PARENTHESIS_IZQ : '(';

RULE_PARENTHESIS_DER : ')';

RULE_SEMICOLON : ';';

RULE_COMA : ',';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;

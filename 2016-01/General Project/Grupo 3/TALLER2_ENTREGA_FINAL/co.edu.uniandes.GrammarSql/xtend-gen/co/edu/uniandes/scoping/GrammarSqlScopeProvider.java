/**
 * generated by Xtext 2.9.1
 */
package co.edu.uniandes.scoping;

import co.edu.uniandes.grammarSql.Table;
import co.edu.uniandes.grammarSql.impl.ModelImpl;
import co.edu.uniandes.grammarSql.impl.ReferenceImpl;
import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class GrammarSqlScopeProvider extends AbstractDeclarativeScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    IScope _xifexpression = null;
    if ((context instanceof ReferenceImpl)) {
      IScope _xifexpression_1 = null;
      String _name = reference.getName();
      boolean _equals = Objects.equal(_name, "fromT");
      if (_equals) {
        EObject _eContainer = ((ReferenceImpl)context).eContainer();
        EObject _eContainer_1 = _eContainer.eContainer();
        EObject _eContainer_2 = _eContainer_1.eContainer();
        EList<Table> _tables = ((ModelImpl) _eContainer_2).getTables();
        return Scopes.scopeFor(_tables);
      } else {
        for (int i = 0; (i < ((ModelImpl) ((ReferenceImpl)context).eContainer().eContainer().eContainer()).getTables().size()); i++) {
          EObject _eContainer_3 = ((ReferenceImpl)context).eContainer();
          EObject _eContainer_4 = _eContainer_3.eContainer();
          EObject _eContainer_5 = _eContainer_4.eContainer();
          EList<Table> _tables_1 = ((ModelImpl) _eContainer_5).getTables();
          Table _get = _tables_1.get(i);
          String _name_1 = _get.getName();
          EList<Table> _fromT = ((ReferenceImpl)context).getFromT();
          Table _get_1 = _fromT.get(0);
          String _name_2 = _get_1.getName();
          boolean _equals_1 = Objects.equal(_name_1, _name_2);
          if (_equals_1) {
            EObject _eContainer_6 = ((ReferenceImpl)context).eContainer();
            EObject _eContainer_7 = _eContainer_6.eContainer();
            EObject _eContainer_8 = _eContainer_7.eContainer();
            EList<Table> _tables_2 = ((ModelImpl) _eContainer_8).getTables();
            Table _get_2 = _tables_2.get(i);
            EList<EObject> _elements = _get_2.getElements();
            return Scopes.scopeFor(_elements);
          }
        }
      }
      _xifexpression = _xifexpression_1;
    } else {
      EObject _eContainer_3 = context.eContainer();
      EList<EObject> _eContents = _eContainer_3.eContents();
      return Scopes.scopeFor(_eContents);
    }
    return _xifexpression;
  }
}

/**
 * generated by Xtext 2.9.1
 */
package co.edu.uniandes.grammarSql.impl;

import co.edu.uniandes.grammarSql.Column;
import co.edu.uniandes.grammarSql.GrammarSqlPackage;
import co.edu.uniandes.grammarSql.Reference;
import co.edu.uniandes.grammarSql.Table;

import java.util.Collection;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Reference</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link co.edu.uniandes.grammarSql.impl.ReferenceImpl#getFromT <em>From T</em>}</li>
 *   <li>{@link co.edu.uniandes.grammarSql.impl.ReferenceImpl#getFromC <em>From C</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ReferenceImpl extends MinimalEObjectImpl.Container implements Reference
{
  /**
   * The cached value of the '{@link #getFromT() <em>From T</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFromT()
   * @generated
   * @ordered
   */
  protected EList<Table> fromT;

  /**
   * The cached value of the '{@link #getFromC() <em>From C</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getFromC()
   * @generated
   * @ordered
   */
  protected EList<Column> fromC;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ReferenceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GrammarSqlPackage.Literals.REFERENCE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Table> getFromT()
  {
    if (fromT == null)
    {
      fromT = new EObjectResolvingEList<Table>(Table.class, this, GrammarSqlPackage.REFERENCE__FROM_T);
    }
    return fromT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Column> getFromC()
  {
    if (fromC == null)
    {
      fromC = new EObjectResolvingEList<Column>(Column.class, this, GrammarSqlPackage.REFERENCE__FROM_C);
    }
    return fromC;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GrammarSqlPackage.REFERENCE__FROM_T:
        return getFromT();
      case GrammarSqlPackage.REFERENCE__FROM_C:
        return getFromC();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GrammarSqlPackage.REFERENCE__FROM_T:
        getFromT().clear();
        getFromT().addAll((Collection<? extends Table>)newValue);
        return;
      case GrammarSqlPackage.REFERENCE__FROM_C:
        getFromC().clear();
        getFromC().addAll((Collection<? extends Column>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GrammarSqlPackage.REFERENCE__FROM_T:
        getFromT().clear();
        return;
      case GrammarSqlPackage.REFERENCE__FROM_C:
        getFromC().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GrammarSqlPackage.REFERENCE__FROM_T:
        return fromT != null && !fromT.isEmpty();
      case GrammarSqlPackage.REFERENCE__FROM_C:
        return fromC != null && !fromC.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ReferenceImpl

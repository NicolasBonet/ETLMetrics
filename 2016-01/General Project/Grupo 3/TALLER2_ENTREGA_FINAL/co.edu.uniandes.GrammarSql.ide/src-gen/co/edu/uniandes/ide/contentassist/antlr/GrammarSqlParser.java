/*
 * generated by Xtext 2.9.1
 */
package co.edu.uniandes.ide.contentassist.antlr;

import co.edu.uniandes.ide.contentassist.antlr.internal.InternalGrammarSqlParser;
import co.edu.uniandes.services.GrammarSqlGrammarAccess;
import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class GrammarSqlParser extends AbstractContentAssistParser {

	@Inject
	private GrammarSqlGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalGrammarSqlParser createParser() {
		InternalGrammarSqlParser result = new InternalGrammarSqlParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTableAccess().getElementsAlternatives_4_0(), "rule__Table__ElementsAlternatives_4_0");
					put(grammarAccess.getTableAccess().getElementsAlternatives_5_1_0(), "rule__Table__ElementsAlternatives_5_1_0");
					put(grammarAccess.getColumnAccess().getTypeAlternatives_1_0(), "rule__Column__TypeAlternatives_1_0");
					put(grammarAccess.getTableAccess().getGroup(), "rule__Table__Group__0");
					put(grammarAccess.getTableAccess().getGroup_5(), "rule__Table__Group_5__0");
					put(grammarAccess.getColumnAccess().getGroup(), "rule__Column__Group__0");
					put(grammarAccess.getPrimaryKeyAccess().getGroup(), "rule__PrimaryKey__Group__0");
					put(grammarAccess.getPrimaryKeyAccess().getGroup_4(), "rule__PrimaryKey__Group_4__0");
					put(grammarAccess.getForeignKeyAccess().getGroup(), "rule__ForeignKey__Group__0");
					put(grammarAccess.getForeignKeyAccess().getGroup_4(), "rule__ForeignKey__Group_4__0");
					put(grammarAccess.getReferenceAccess().getGroup(), "rule__Reference__Group__0");
					put(grammarAccess.getReferenceAccess().getGroup_4(), "rule__Reference__Group_4__0");
					put(grammarAccess.getTamanoAccess().getGroup(), "rule__Tamano__Group__0");
					put(grammarAccess.getModelAccess().getTablesAssignment(), "rule__Model__TablesAssignment");
					put(grammarAccess.getTableAccess().getNameAssignment_2(), "rule__Table__NameAssignment_2");
					put(grammarAccess.getTableAccess().getElementsAssignment_4(), "rule__Table__ElementsAssignment_4");
					put(grammarAccess.getTableAccess().getElementsAssignment_5_1(), "rule__Table__ElementsAssignment_5_1");
					put(grammarAccess.getColumnAccess().getNameAssignment_0(), "rule__Column__NameAssignment_0");
					put(grammarAccess.getColumnAccess().getTypeAssignment_1(), "rule__Column__TypeAssignment_1");
					put(grammarAccess.getColumnAccess().getIsNotNullAssignment_3(), "rule__Column__IsNotNullAssignment_3");
					put(grammarAccess.getPrimaryKeyAccess().getColAssignment_3(), "rule__PrimaryKey__ColAssignment_3");
					put(grammarAccess.getPrimaryKeyAccess().getColAssignment_4_1(), "rule__PrimaryKey__ColAssignment_4_1");
					put(grammarAccess.getForeignKeyAccess().getLocalColumnsAssignment_3(), "rule__ForeignKey__LocalColumnsAssignment_3");
					put(grammarAccess.getForeignKeyAccess().getLocalColumnsAssignment_4_1(), "rule__ForeignKey__LocalColumnsAssignment_4_1");
					put(grammarAccess.getForeignKeyAccess().getRefAssignment_6(), "rule__ForeignKey__RefAssignment_6");
					put(grammarAccess.getReferenceAccess().getFromTAssignment_1(), "rule__Reference__FromTAssignment_1");
					put(grammarAccess.getReferenceAccess().getFromCAssignment_3(), "rule__Reference__FromCAssignment_3");
					put(grammarAccess.getReferenceAccess().getFromCAssignment_4_1(), "rule__Reference__FromCAssignment_4_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalGrammarSqlParser typedParser = (InternalGrammarSqlParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public GrammarSqlGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(GrammarSqlGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}

model sql driver EMF {path='SQL.ecore'};
model java driver EMF {path='mmJavaMinimalista.ecore'};


pre{
sql!Model.all.collect(d|d.getAplication()).println();
//sql!Table.all.collect(c|c.getClasses());
}

operation sql!Model getAplication(): java!Application {
var j= new java!Application;
j.name="crud";
//var p = new java!Package  ;
//p.name ="crud";
j.packages = self.collect (c|self); 
//j.packages = self.selectOne(p|p.getPackages()).equivalent();//self.tables.at[0].equivalent();
//j.packages = self.tables.collect (c|c.getPackages()) ; 
//j.packages = self.collect(j).equivalent();
//p.select();
//j.packages = self.Model.select();
//g.subtitulo="";
//g.tipo=series!TipoGrafica#basicColumn; 
//g.graficaSerie=self.architectureResults.collect(c|c.getSerie());
return j;
}

operation sql!Model getPackages() : java!Package {
 var p= new java!Package;
 p.name = "crud";
 p.classes = self.tables.collect(c|c.getClasses());
 return p;
}

operation sql!Table getClasses():  java!Class {
var s= new java!Class;
s.name=self.name; 
self.Elements.collect(a|self).println();
//s.attributes = self.Elements.equivalents();
//s.attributes=self.Elements.collect(d|d.getAttributes()).equivalents();
return s;
} 
operation sql!Column getAttributes():  java!Attribute{
var s= new java!Attribute;
s.name = self.name; 
return s;
}

/*
operation jm!ArchitectureResults getSerie(): series!Serie {
var s= new series!Serie;
s.name=self.architecture; 
s.serieDato=self.results.collect(c|c.getDato());
return s;
} 
operation jm!Results getDato(): series!Dato { 
if (self.result.at(0).value='Get Competitors' or self.result.at(0).value='Add Competitors'){
var d= new series!Dato;
d.name=self.result.last().value;
return d;
} 
} */
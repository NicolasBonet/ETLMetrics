rule SQL2Play 
	transform s : sql!Model
	to app : play!App {
		var db: sql!Database = s.database.get(0);
		
		app.name = "myApp";
		
		var resources = db.getResources();
		
		app.backend = new play!Backend();
		app.backend.resources.addAll(resources);
		
		db.setResourceRealationships(resources);
		
		app.setHTMLFront();
		
	}
	
operation sql!Database getResources(): List{
	
	var resources = new List();
	for(t in self.tables){
		
		var r = new play!Resource();
		r.name = t.name;
		r.url = "/api/" + t.name + "/";
		
		//Primary key
		var mPk = t.getPKVars();
		if(mPk.size() == 1){ //Una sola pk, usarla directamente
			for(myVar in mPk.keySet()) 
			{
				var pk = new play!PKAtribute();
				pk.name = mPk.get(myVar).get('name');
				if(string2PrimitiveType(mPk.get(myVar).get('type')) = play!Type#int){
					pk.type = play!Type#Long; 
				}else{
					pk.type = string2PrimitiveType(mPk.get(myVar).get('type')); 
				}
				r.atributes.add(pk);
			}
		}
		else {	//Varias pk, crear una sola pk: "id"
			var pk = new play!PKAtribute();
			pk.name = 'id';
			pk.type = play!Type#Long; 
			r.atributes.add(pk);
			
			for(myVar in mPk.keySet()) 
			{
				r.atributes.add(toSimpleAtribute(myVar, mPk));
			}
			
		}
	
		//Simple atributes
		var mSimple = t.getSimpleVars();
		for(myVar in mSimple.keySet()) 
		{
			r.atributes.add(toSimpleAtribute(myVar, mSimple));
		}
		
		resources.add(r);
	}
	
	return resources;
}

operation sql!Database setResourceRealationships(resources){
	for(t in self.tables){
		var mFk = t.getFKVars();
		var r = geResourceByName(t.name ,resources);
		
		for(myVar in mFk.keySet()) 
		{
			
			var pk = new play!RefAtribute();
			pk.name = mFk.get(myVar).get('name');
			
			if(mFk.get(myVar).get('object').localColumns.size() <> 1){
				"ERROR: No se soportan Fk con varias columnas".println();
			}
			else{
				pk.type = string2PrimitiveType(
					mFk.get(myVar).get('object').localColumns.get(0).type
				); 
				pk.ref = geResourceByName(mFk.get(myVar).get('object').foreignTable.name, resources); 
			}
			if(pk.type = play!Type#int){
				pk.type =  play!Type#Long;
			}
			r.atributes.add(pk);
		}
		
	}
}


operation play!App setHTMLFront(){
	self.HTMLApp = new play!HTMLApp();
	for(r in self.backend.resources){
		var page = new play!HTMLPage();
		page.route = '/' + r.name;
		page.sourceDir = r.name.firstToLowerCase;
		page.resource = r;
		var controller = new play!HTMLController();
		controller.name = r.name.firstToLowerCase + "Ctrl";
		controller.fileName = r.name.firstToLowerCase + '.controller.js';
		page.controller = controller;
		
		var template = new play!HTMLTemplate();
		template.fileName = r.name.firstToLowerCase + '.view.html';
		page.template = template;
		self.HTMLApp.pages.add(page);	
	}
}

operation geResourceByName(inName, resources): play!Resource{
	return resources.select(c | c.name == inName).at(0);
}

//----------------------------------
//Helpers
//----------------------------------

operation toSimpleAtribute(atributeName, map){
	var pk = new play!SimpleAtribute();
	pk.name = map.get(atributeName).get('name');
	pk.type = string2PrimitiveType(map.get(atributeName).get('type')); 
	return pk;
}

operation string2PrimitiveType(inString){
	var javaT = play!Type#int;
	
	if(inString == sql!DataType#VARCHAR255){
		javaT = play!Type#String;
	}
	else if(inString == sql!DataType#INT){
		javaT = play!Type#int;
	}
	return javaT;
	
}


operation sql!Table getPKVars(){
	var cols = self.facts.select(f | f.isTypeOf(sql!Column)).select(c | c.name.asString() <> "id");
	
	var tablePk = self.facts.select(f | f.isTypeOf(sql!PrimaryKey));
	var tablePkColumns = tablePk.collect(pk | pk.col).flatten();
	
	var tableFk = self.facts.select(f | f.isTypeOf(sql!ForeignKey));
	var tableFkColumns = tableFk.collect(fk | fk.localColumns).flatten();
	
	
	var pkCols = tablePkColumns;
	var vars = new Map();
	for(col in pkCols ){
		var c = new Map();
		c.put('name', col.name);
		c.put('type', col.getType());
		c.put('object', col);
		vars.put(col.name, c);
	}
	return vars;
}

operation sql!Table getSimpleVars(){
	var cols = self.facts.select(f | f.isTypeOf(sql!Column)).select(c | c.name.asString() <> "id");
	
	var tablePk = self.facts.select(f | f.isTypeOf(sql!PrimaryKey));
	var tablePkColumns = tablePk.collect(pk | pk.col).flatten();
	
	var tableFk = self.facts.select(f | f.isTypeOf(sql!ForeignKey));
	var tableFkColumns = tableFk.collect(fk | fk.localColumns).flatten();
	
	
	var simpleCols = cols.excludingAll(tablePkColumns).excludingAll(tableFkColumns);
	var vars = new Map();
	for(col in simpleCols ){
		var c = new Map();
		c.put('name', col.name);
		c.put('type', col.getType());
		c.put('object', col);
		vars.put(col.name, c);
	}
	return vars;
}
	
operation sql!Table getFKVars(){
	var cols = self.facts.select(f | f.isTypeOf(sql!Column)).select(c | c.name.asString() <> "id");
	
	var tablePk = self.facts.select(f | f.isTypeOf(sql!PrimaryKey));
	var tablePkColumns = tablePk.collect(pk | pk.col).flatten();
	
	var tableFk = self.facts.select(f | f.isTypeOf(sql!ForeignKey));
	var tableFkColumns = tableFk.collect(fk | fk.localColumns).flatten();
		
	var vars = new Map();
	for(fk in tableFk) 
	{
 		var c = new Map();
 		
 		if(fk.localColumns.size() > 1){
 			"ERROR fk: "+ fk.localColumns.get(0).name +" referencia a varias columnas".println();
 		}
		c.put('name', fk.localColumns.get(0).name);
		c.put('type', fk.foreignTable.name);
		c.put('object', fk);
		vars.put(fk.foreignTable.name.firstToLowerCase(), c);
	}	
		
	return vars;
}


	

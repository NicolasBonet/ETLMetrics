[%
/*
***********************************************************************************************
***********************************************************************************************
GENERANDO LAS CLASES CREATE ASOCIADAS A LA ENTIDAD DE MODELO PARA EL CRUD
***********************************************************************************************
***********************************************************************************************
*/
%]
package app.hospital.uniandes.edu.co.hospital.[%=nombreClaseGenerar.firstToLowerCase()%];

import android.app.Activity;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.os.AsyncTask;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.entity.StringEntity;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONObject;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;


import app.hospital.uniandes.edu.co.hospital.R;
import app.hospital.uniandes.edu.co.hospital.dtos.[%=nombreClaseGenerar%]DTO;
[%
var package="";
for (activity in AndroidApplication!Activity.all){
package=package+"import app.hospital.uniandes.edu.co.hospital.rest.ConsumeRest"+activity.name+";\n";
}
%]

[%=package%]


[% 
/* Se definen variables que permiten armar las sentencias que son repetitivas 
en el codigo por ejemmplo el validar, las de http y los atributos dependiendo 
de la clase que los contenga. En este caso en CREATE*/

//Sentencias de parametros
			var sentencias="";
//Sentencias de ToString			
			var sentenciasToString="";
//Sentencias de parametros variables			
			var atributos="";
//Sentencias htttps para el post y put			
			var sentenciasToHttp="";
//Sentencias para hacer null los settext
			var sentenciasToSet="";
//Setencias de blank to text
			var setenciasBlank="";
//Sentencias de validar campos vacios
			var validate="if";
//Bandera para iniciar con if
			var valida=true;
//Nombre de la clase a generar en minuscula
			var nombreclaseGenerarMin=nombreClaseGenerar.firstToLowerCase();
			
			for (activity in AndroidApplication!Activity.all){
		
				var nomActivityActual = activity.name;
				
				if(nombreClaseGenerar==nomActivityActual){
%]
public class [%=nombreClaseGenerar%]Create extends AppCompatActivity {
[%
				
				--verifico los componentes que hacen la activity.
					for(atributos in activity.components){
					--verifico el tipo de campo que viene.
					var nameMin=atributos.name.firstToLowerCase();
					var nameMay=atributos.name.firstToUpperCase();	
					
	%]
	private EditText editText[%=nameMay%];
    [%
						if(atributos.isTypeOf(TextField))
						{
							if(atributos.type.isTypeOf(EEnumLiteral))
							{
								if(atributos.type.literal=='Number'){
								  //Asocio todos los campos necesarios para armar una cadena de string  	
								  sentencias=sentencias + "editText"+nameMay+" = (EditText) findViewById(R.id.editText"+nameMay+");\n";
								  sentenciasToString=sentenciasToString+nameMin+" = Long.parseLong(editText"+nameMay+".getText().toString());\n";
								  sentenciasToHttp=sentenciasToHttp+"jsonObject.accumulate("+'"'+nameMin+'"'+", "+nombreclaseGenerarMin+".get"+nameMay+"());\n";
								  sentenciasToSet=sentenciasToSet+nombreclaseGenerarMin+"New.set"+nameMay+"("+nameMin+");\n";
								  setenciasBlank=setenciasBlank+ "editText"+nameMay+".setText("+'""'+");\n";
								  if(valida){
								  validate=validate+"(editText"+nameMay+".getText().toString().trim().equals("+'""'+"))\n return false;\n ";
								  valida=false;
								  }else{
								  validate=validate+"else if(editText"+nameMay+".getText().toString().trim().equals("+'""'+"))\n return false;\n ";
								  }
								  
								  
									%]
	Long [%=nameMin%] = 0L;
									[%

								}
								if(atributos.type.literal=='Double'){
								    var name=atributos.name.firstToLowerCase();	
								 sentencias=sentencias +"editText"+nameMay+" = (EditText) findViewById(R.id.editText"+nameMay+");\n";
								 sentenciasToString=sentenciasToString+nameMin+" = Double.parseDouble(editText"+nameMay+".getText().toString());\n";
								 sentenciasToHttp=sentenciasToHttp+"jsonObject.accumulate("+'"'+nameMin+'"'+", "+nombreclaseGenerarMin+".get"+nameMay+"());\n";
								 sentenciasToSet=sentenciasToSet+nombreclaseGenerarMin+"New.set"+nameMay+"("+nameMin+");\n";
								 setenciasBlank=setenciasBlank+ "editText"+nameMay+".setText("+'""'+");\n";
								 if(valida){
								 validate=validate+"(editText"+nameMay+".getText().toString().trim().equals("+'""'+"))\n return false;\n ";
								 valida=false;
								 }else{
								 validate=validate+"else if(editText"+nameMay+".getText().toString().trim().equals("+'""'+"))\n return false;\n ";
								 }
								 
									%]
	Double [%=nameMin%];
									[%

								}
								if(atributos.type.literal=='Text'){
								sentencias=sentencias+"editText"+nameMay+" = (EditText) findViewById(R.id.editText"+nameMay+");\n";
								sentenciasToString=sentenciasToString+nameMin+" = editText"+nameMay+".getText().toString();\n";
								sentenciasToHttp=sentenciasToHttp+"jsonObject.accumulate("+'"'+nameMin+'"'+", "+nombreclaseGenerarMin+".get"+nameMay+"());\n";
								sentenciasToSet=sentenciasToSet+nombreclaseGenerarMin+"New.set"+nameMay+"("+nameMin+");\n";
								setenciasBlank=setenciasBlank+ "editText"+nameMay+".setText("+'""'+");\n";
								if(valida){
								validate=validate+"(editText"+nameMay+".getText().toString().trim().equals("+'""'+"))\n return false;\n ";
								valida=false;
								}else{
								validate=validate+"else if(editText"+nameMay+".getText().toString().trim().equals("+'""'+"))\n return false;\n ";
								}
								
									%]
	String [%=nameMin%];
									[%
							 	}
							}	
						}
					}
					validate=validate+" else \n return true;";
%]

    private Button btnCrear[%=nombreClaseGenerar%];
    private [%=nombreClaseGenerar%]DTO [%=nombreclaseGenerarMin%]New = new [%=nombreClaseGenerar%]DTO();
    

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_[%=nombreclaseGenerarMin%]_create);

[%=sentencias%]

        btnCrear[%=nombreClaseGenerar%] = (Button) findViewById(R.id.btnGuardar[%=nombreClaseGenerar%]);

        btnCrear[%=nombreClaseGenerar%].setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {

                if (!validate()) {
                    Toast.makeText(getBaseContext(), "Por favor complete todos los campos!", Toast.LENGTH_LONG).show();
                } else {
                
[%=sentenciasToString%]

                    // call AsynTask to perform network operation on separate thread
                    
                    new HttpAsyncTask().execute("http://157.253.204.6:8080/hospital.api/api/[%=nombreclaseGenerarMin%]s/");
                    
                }
            }
        });
    }

    public static String POST(String url, [%=nombreClaseGenerar%]DTO [%=nombreclaseGenerarMin%]) {
        InputStream inputStream = null;
        String result = "";
        try {

            // 1. create HttpClient
            HttpClient httpclient = new DefaultHttpClient();

            // 2. make POST request to the given URL
            HttpPost httpPost = new HttpPost(url);

            String json = "";

            // 3. build jsonObject
            JSONObject jsonObject = new JSONObject();
            
            [%=sentenciasToHttp%]

            // 4. convert JSONObject to JSON to String
            json = jsonObject.toString();

            // 5. set json to StringEntity
            StringEntity se = new StringEntity(json);

            // 6. set httpPost Entity
            httpPost.setEntity(se);

            // 7. Set some headers to inform server about the type of the content
            httpPost.setHeader("Accept", "application/json");
            httpPost.setHeader("Content-type", "application/json");

            // 8. Execute POST request to the given URL
            HttpResponse httpResponse = httpclient.execute(httpPost);

            // 9. receive response as inputStream
            inputStream = httpResponse.getEntity().getContent();

            // 10. convert inputstream to string
            if (inputStream != null)
                result = convertInputStreamToString(inputStream);
            else
                result = "No trabaj√≥ correctamente!";

        } catch (Exception e) {
            Log.d("InputStream", e.getLocalizedMessage());
        }

        // 11. return result
        return result;
    }

    private class HttpAsyncTask extends AsyncTask<String, Void, String> {
        @Override
        protected String doInBackground(String... urls) {

            [%=sentenciasToSet%]

            return POST(urls[0], [%=nombreclaseGenerarMin%]New);
        }

        // onPostExecute displays the results of the AsyncTask.
        @Override
        protected void onPostExecute(String result) {
            
            [%=setenciasBlank%]
            
            Toast.makeText(getBaseContext(), "Datos enviados!", Toast.LENGTH_LONG).show();
            autoLoadRest();
        }
    }

    private boolean validate() {
    
    [%=validate%]
    
    }

    private static String convertInputStreamToString(InputStream inputStream) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
        String line = "";
        String result = "";
        while ((line = bufferedReader.readLine()) != null)
            result += line;
        inputStream.close();
        return result;

    }

    public void autoLoadRest() {
    
    [% 
  
    for (activity in AndroidApplication!Activity.all){
    var nombreClaseGenerar=activity.name;
    var nombreClaseGenerarMin=activity.name.firstToLowerCase();
   %]
        String url[%=nombreClaseGenerar%] = String.format("http://157.253.204.6:8080/hospital.api/api/[%=nombreClaseGenerarMin%]s/",0);
        String [%=nombreClaseGenerarMin%]="[%=nombreClaseGenerarMin%]s";
        new ConsumeRest[%=nombreClaseGenerar%]().execute(url[%=nombreClaseGenerar%],[%=nombreClaseGenerarMin%]);
        [%
         }
    %]
    }
}
[%
				}
			}
%]

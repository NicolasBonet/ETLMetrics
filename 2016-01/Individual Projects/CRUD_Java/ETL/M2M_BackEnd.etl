pre {
  "Inicia ETL M2M_BackEnd".println();
}

post {
  "Finaliza ETL M2M_BackEnd".println();
}

//Regla de Portal a WebApp
rule Portal2WebApp
	transform uml : UML!Model
  	to app : backend!Application {
  		guard : uml.name <> 'EcorePrimitiveTypes'
  		app.name = 'GIA Portal Empleo';
  	}

//Regla de transformacion de Clase a Entidad
rule Class2BusinessEntity
	transform class : UML!Class
	to businessEntity : backend!BusinessEntity {
		guard : class.getAppliedStereotypes()->exists(s|s.name = "Entity")
		var stereotype:Any = class.getAppliedStereotypes().get(0);
		businessEntity.name = class.name;
		businessEntity.isAbstract = class.getValue(stereotype, "isAbstract");
		backend!Application.allInstances().select(s | s.name = 'GIA Portal Empleo').first().businessentities.add(businessEntity);
		('Entidad ' + class.name + ' generada').println();
	}

//Regla de transformacion de Atributo a Atributo
rule Attribute2Attribute
	transform attributeUML : UML!Property
	to attribute : backend!Attribute {
		guard : attributeUML.getAppliedStereotypes()->exists(s|s.name = "Attribute")
		var stereotype:Any = attributeUML.getAppliedStereotypes().get(0);
		attribute.name = attributeUML.name;
		attribute.isPK = attributeUML.getValue(stereotype, "isPrimaryKey");
		attribute.isRequired = attributeUML.getValue(stereotype, "isRequired");
		if (attributeUML.type.name = 'EDate'){
			attribute.dataType = 'Date';
		}
		else if (attributeUML.type.name = 'EBigInteger'){
			attribute.dataType = 'Long';
		}
		else if (attributeUML.type.name = 'EDouble' or attributeUML.type.name = 'EInt'){
			attribute.dataType = 'int';
		}
		else{
			attribute.dataType = 'String';
		}
		backend!BusinessEntity.allInstances().select(s | s.name = attributeUML.eContainer().name).first().attributes.add(attribute);
	}
	
//Regla de transformacion de Asociacion a Asociacion
rule Association2Association
	transform associationUML : UML!Association
	to association : backend!Association {
		guard : associationUML.getAppliedStereotypes()->exists(s|s.name = "Association" or s.name = "Composition" or s.name = "Heritage")
		var stereotype:Any = associationUML.getAppliedStereotypes().get(0);
		association.name = associationUML.getValue(stereotype, "target").firstToLowerCase() + 's';
		association.source = associationUML.getValue(stereotype, "source");
		association.target = associationUML.getValue(stereotype, "target");
		association.typeAssociation = stereotype.name;
		backend!BusinessEntity.allInstances().select(s | s.name = associationUML.getValue(stereotype, "source")).first().associations.add(association);
		
		if (stereotype.name = 'Composition'){
			var service = new backend!Service;
			service.name = associationUML.getValue(stereotype, "target");
			backend!BusinessEntity.allInstances().select(s | s.name = associationUML.getValue(stereotype, "source")).first().services.add(service);
		}
	}
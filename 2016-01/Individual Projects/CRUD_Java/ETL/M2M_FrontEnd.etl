model UML driver UML {path='model.uml'};
model frontend driver EMF {path='metamodeloFront.ecore'};

pre {
  "Inicia ETL M2M_FrontEnd".println();
}

post {
  "Finaliza ETL M2M_FrontEnd".println();
}

//Regla de Portal a WebApp
rule Portal2WebApp
	transform uml : UML!Model
  	to front : frontend!WebApp {
  		guard : uml.name <> 'EcorePrimitiveTypes'
  		for (child in uml.ownedElements)
		{
			if (child.getAppliedStereotypes()->exists(s|s.name = "Entity") ) 
			{
				var stereotype:Any = child.getAppliedStereotypes.select(s | s.name = 'Entity').first();
				if (child.getValue(stereotype, "isAbstract") = false){
					var modelo = new frontend!Modelo;
					modelo.name = child.name;
					modelo.master = child.getMaster();
					modelo.attributes = child.getAttributes();
					front.models.add(modelo);
					('Modelo generado clase ' + child.name).println(); 
					
					var webPageList = new frontend!WebPage;
					var webPageCreate = new frontend!WebPage;
					var webPageUpdate = new frontend!WebPage;
					var webPageView = new frontend!WebPage;
					var service = new frontend!Service;
					
					webPageList.name = 'list-' + child.name + 's';
					webPageList.master = child.getMaster();
					webPageList.entityName = child.name;
					webPageList.grid = child.getGrid();
					webPageList.buttons = webPageList.getButtons();
					
					webPageCreate.name = 'create-' + child.name;
					webPageCreate.master = child.getMaster();
					webPageCreate.entityName = child.name;
					webPageCreate.buttons = webPageCreate.getButtons();
					webPageCreate.inputs = child.getInputs();
					webPageCreate.selects = child.getSelects();
					
					webPageUpdate.name = 'edit-' + child.name;
					webPageUpdate.master = child.getMaster();
					webPageUpdate.entityName = child.name;
					webPageUpdate.buttons = webPageUpdate.getButtons();
					webPageUpdate.inputs = child.getInputs();
					webPageUpdate.selects = child.getSelects();
					
					webPageView.name = 'view-' + child.name;
					webPageView.master = child.getMaster();
					webPageView.entityName = child.name;
					webPageView.buttons = webPageView.getButtons();
					webPageView.inputs = child.getInputsView();
					
					service.master = child.getMaster();
					service.name = child.name;
					front.webPages.add(webPageList);
					front.webPages.add(webPageCreate);
					front.webPages.add(webPageUpdate);
					front.webPages.add(webPageView);
					('web pages generadas para clase ' + child.name).println();
					front.services.add(service);
					('servicio generado para clase ' + child.name).println();
				}
			}
		}
	}

//Operacion para obtener las webPage maestro
operation UML!Class getMaster(): String{
	var master : String = '';
	for (association in UML!Association){
		if (association.getAppliedStereotypes()->exists(s|s.name = "Composition")){
			var stereotype:Any = association.getAppliedStereotypes().get(0);
			if (association.getValue(stereotype, "target") = self.name){
				master = association.getValue(stereotype, "source");
			}
		}
	}
	return(master);
}

//Operacion para obtener atributos
operation UML!Class getAttributes(): Set(frontend!Attribute){
	var setOfAttributes : Set;
	for (association in UML!Association){
		if (association.getAppliedStereotypes()->exists(s|s.name = "Heritage")){
			var stereotype:Any = association.getAppliedStereotypes().get(0);
			if (association.getValue(stereotype, "source") = self.name){
				for (attribute in UML!Property){
					if (attribute.getAppliedStereotypes()->exists(s|s.name = "Attribute")){
						if (attribute.eContainer().name = UML!Class.allInstances().select(c | c.name = association.getValue(stereotype, "target")).first().name){
							var stereotypeAtt:Any = attribute.getAppliedStereotypes().get(0);
							var att = new frontend!Attribute;
							att.name = attribute.name;
							att.type = attribute.type.name;
							att.isRequired = attribute.getValue(stereotypeAtt, "isRequired");
							att.label = attribute.getValue(stereotypeAtt, "label");
							att.isPK = attribute.getValue(stereotypeAtt, "isPrimaryKey");
							att.showInGrid = attribute.getValue(stereotypeAtt, "showInGrid");
							setOfAttributes.add(att);
						}
					}
				}		
			}
		}
	}
	
	for (attribute in UML!Property){
		if (attribute.getAppliedStereotypes()->exists(s|s.name = "Attribute")){
			if (attribute.eContainer().name = self.name){
				var stereotypeAtt:Any = attribute.getAppliedStereotypes().get(0);
				var attr = new frontend!Attribute;
				attr.name = attribute.name;
				attr.type = attribute.type.name;
				attr.isRequired = attribute.getValue(stereotypeAtt, "isRequired");
				attr.label = attribute.getValue(stereotypeAtt, "label");
				attr.isPK = attribute.getValue(stereotypeAtt, "isPrimaryKey");
				attr.showInGrid = attribute.getValue(stereotypeAtt, "showInGrid");
				setOfAttributes.add(attr);
			}
		}
	}
	return(setOfAttributes);
}

//Operacion para obtener inputs
operation UML!Class getInputs(): Set(frontend!Input){
	var setOfInputs : Set;
	for (attribute in frontend!Modelo.allInstances().select(n | n.name = self.name).first().attributes){
		if (attribute.type.startsWith('E') and attribute.isPK = false){
			var input = new frontend!Input;
			input.name = attribute.name;
			input.type = attribute.type.toString();
			input.isRequired = attribute.isRequired;
			input.label = attribute.label;
			setOfInputs.add(input);
		}
	}
	return (setOfInputs);
}


operation UML!Class getInputsView(): Set(frontend!Input){
	var setOfInputs : Set;
	for (attribute in frontend!Modelo.allInstances().select(n | n.name = self.name).first().attributes){
		if (attribute.isPK = false){
			var input = new frontend!Input;
			input.name = attribute.name;
			input.type = attribute.type.toString();
			input.isRequired = attribute.isRequired;
			input.label = attribute.label;
			setOfInputs.add(input);
		}
	}
	return (setOfInputs);
}

//Operacion para obtener elementos select
operation UML!Class getSelects(): Set(frontend!Select){
	var setOfSelects : Set;
	for (attribute in frontend!Modelo.allInstances().select(n | n.name = self.name).first().attributes){
		if (attribute.type.startsWith('E') = false){
			var select = new frontend!Select;
			select.name = attribute.name;
			select.label = attribute.label;
			select.isRequired = attribute.isRequired;
			
			for (literal in UML!EnumerationLiteral){
				if (attribute.type = literal.eContainer().name){
					var item = new frontend!Item;
					item.name = literal.name;
					select.items.add(item);		
				}
			}
			
			setOfSelects.add(select);
		}
	}
	return (setOfSelects);
}

//Operacion para obtener una grid
operation UML!Class getGrid(): frontend!Grid{
	var grid = new frontend!Grid;
	for (attribute in frontend!Modelo.allInstances().select(n | n.name = self.name).first().attributes){
		if (attribute.showInGrid = true){
			var column = new frontend!Column;
			column.name = attribute.name;
			column.label = attribute.label;
			grid.columns.add(column);
		}
	}
	var button = new frontend!Button;
	button.name = 'Ver';
	grid.buttons.add(button);
	var button = new frontend!Button;
	button.name = 'Editar';
	grid.buttons.add(button);
	var button = new frontend!Button;
	button.name = 'Eliminar';
	grid.buttons.add(button);
	return (grid);
}

//Operacion para obtener botones
operation frontend!WebPage getButtons(): Set(frontend!Button){
	var setOfButtons : Set;
	if (self.name.startsWith('list')){
		var button = new frontend!Button;
		button.name = 'Crear';
		setOfButtons.add(button);
	}
	if (self.name.startsWith('create')){
		var button = new frontend!Button;
		button.name = 'Guardar';
		setOfButtons.add(button);
	}
	if (self.name.startsWith('view')){
		if (self.master <> ''){
			var button = new frontend!Button;
			button.name = 'Volver';
			setOfButtons.add(button);
		}
		for (association in UML!Association){
			if(association.getAppliedStereotypes()->exists(s|s.name = "Composition")){
				var stereotype:Any = association.getAppliedStereotypes().get(0);
				if (self.entityName = association.getValue(stereotype, "source")){
					var button = new frontend!Button;
					button.name = association.getValue(stereotype, "target");
					setOfButtons.add(button);
				}
			}
		}				

	}
	if (self.name.startsWith('edit')){
		var button = new frontend!Button;
		button.name = 'Guardar';
		setOfButtons.add(button);
	}
	return (setOfButtons);
}
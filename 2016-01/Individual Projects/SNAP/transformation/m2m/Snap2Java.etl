pre{
	snap!Application.all.collect(t|t.getProject());
}

/*******PROYECTO*******/
//Metodo que construye el proyecto
operation snap!Application getProject(): java!Project {
	//Se añade un atributo Id a los campos del metamodelo entrante
	for (p in self.programs){
		for (e in p.entities){
			var atr = new snap!Attribute;
			atr.name="ID";
			atr.description="id";
			atr.dataType="I02";
			e.attributes.add(atr);
		}
	}
	var p = new java!Project;
	var implems = new Set;
	var serInt = new java!Interface;
	serInt.name="Serializable";
	implems.add(serInt);
	p.name=self.name.toLowerCase().replace(" ","-")+"-ejb";
	p.packages=self.collect(c|c.getPackageEntities(implems))
	->includingAll(self.collect(d|d.getPackageService()))
	->includingAll(self.collect(d|d.getPackageDAO()))
	->includingAll(self.collect(d|d.getPackageDTO(implems)))
	->includingAll(self.collect(d|d.getPackageUtil()))
	;
	return p;
}

/*******PAQUETES*******/
//Metodo que construye los paquetes para las entities
operation snap!Application getPackageEntities(implems:Set): java!Package {
	var pa = new java!Package;
	var entities = new Set;
	pa.name="com.uniandes."+self.name.toLowerCase().replace(" ",".")+".domain";
	for (p in self.programs){
		for (e in p.entities){
			entities.add(e);
		}
	}
	pa.classes=self.getClass(implems,entities);
	return pa;
}

//Metodo que construye los paquetes para los Service
operation snap!Application getPackageService(): java!Package {
	var pa = new java!Package;
	pa.name="com.uniandes."+self.name.toLowerCase().replace(" ",".")+".service";
	pa.classes=self.programs.collect(c|c.getClassModule(self.name.toLowerCase()));
	pa.interfaces=self.programs.collect(c|c.getInterfaceModule(self.name.toLowerCase()));
	return pa;
}

//Metodo que construye los paquetes para los DAO
operation snap!Application getPackageDAO(): java!Package {
	var pa = new java!Package;
	var entities = new Set;
	pa.name="com.uniandes."+self.name.toLowerCase().replace(" ",".")+".dao";
	for (p in self.programs){
		for (e in p.entities){
			entities.add(e);
		}
		//entities->includingAll(p.entities);
	}
	pa.interfaces=self.getInterfaceDAO(entities.clone());
	pa.interfaces.add(self.getIntGenericDAO());
	pa.classes=self.getClassDAO(entities);
	pa.classes.add(self.getClassGenericDAO());
	return pa;
}

//Metodo que construye los paquetes para los DTO (Data Transfer Object))
operation snap!Application getPackageDTO(implems:Set): java!Package {
	var pa = new java!Package;
	var entities = new Set;
	pa.name="com.uniandes."+self.name.toLowerCase().replace(" ",".")+".dto";
	for (p in self.programs){
		for (e in p.entities){
			entities.add(e);
		}
		//entities->includingAll(p.entities);
	}
	pa.classes=entities.collect(c|c.getClassDTO(implems, entities));
	return pa;
}

//Metodo que construye el paquete Utils
operation snap!Application getPackageUtil(): java!Package {
	var pa = new java!Package;
	var entities = new Set;
	var c = new java!Class;
	pa.name="com.uniandes."+self.name.toLowerCase().replace(" ",".")+".utils";
	c.name="Utils";
	for (p in self.programs){
		for (e in p.entities){
			entities.add(e);
		}
	}
	for (p in self.programs){
		for (e in p.entities){
		//Se crean los metodos toDTO y toDomain, con el fin de hacer la conversion a diferente tipo de objeto
			//Se guardan las referencias en otras Entities
			var entRefs = e.getEntsRef(e,entities);
			var imports = new java!Import;
			var methodToDTO = new java!Method;
			var methodToDomain = new java!Method;
			var t = new java!PrimitiveType;
			var noAccessModifier = new java!NoAccessModifier;
			imports.name = "com.uniandes."+self.name.toLowerCase().replace(" ",".")+".domain."+e.name.toLowerCase().firstToUpperCase();
			c.imports.add(imports);
			imports = new java!Import;
			imports.name = "com.uniandes."+self.name.toLowerCase().replace(" ",".")+".dto."+e.name.toLowerCase().firstToUpperCase()+"DTO";
			c.imports.add(imports);
			t.type=java!EJavaType#void;
			noAccessModifier.modifier=java!ENoAccess#static;
			methodToDTO.name="convertTo"+e.name.toLowerCase().firstToUpperCase()+"DTO";
			methodToDTO.visibility=java!EVisibility#public;
			methodToDTO.returns=t;
			methodToDTO.modifiers.add(noAccessModifier);
			methodToDTO.parameters=e.getParams(true);
			methodToDTO.content=e.getContentToDTO(entRefs);
			t = new java!PrimitiveType;
			noAccessModifier = new java!NoAccessModifier;
			t.type=java!EJavaType#void;
			noAccessModifier.modifier=java!ENoAccess#static;
			methodToDomain.name="convertTo"+e.name.toLowerCase().firstToUpperCase();
			methodToDomain.visibility=java!EVisibility#public;
			methodToDomain.returns=t;
			methodToDomain.modifiers.add(noAccessModifier);
			methodToDomain.parameters=e.getParams(false);
			methodToDomain.content=e.getContentToDomain(entRefs);
			c.methods.add(methodToDTO);
			c.methods.add(methodToDomain);
			entities.add(e);
		}
		//entities->includingAll(p.entities);
	}
	pa.classes.add(c);
	return pa;
}

//Metodo para devolver las entidades que referencian a una clase
operation snap!Entity getEntsRef(e:snap!Entity, entities:Set): Set {
	var entRefs = new Set;
	for (ent in entities){
		if (ent.name.toLowerCase().firstToUpperCase() <> e.name.toLowerCase().firstToUpperCase() ){
			//Si la entidad es diferente a la actual, se verifica si existe referencia
			for(at in ent.attributes){
				if(at.ref <> null 
				and at.ref.name.toLowerCase().firstToUpperCase() == e.name.toLowerCase().firstToUpperCase()){
					entRefs.add(ent.name.toLowerCase());
					break;
				}
			}
		}
	}
	return entRefs;
}

/*******CLASES*******/
//Metodo que construye las clases Entity
operation snap!Application getClass(implems:Set, entities: Set): Set {
	var classes = new Set;
	for (p in self.programs){
		for (e in p.entities){
			//Se guardan las referencias en otras Entities
			var entRefs = e.getEntsRef(e,entities);
			var c = new java!Class;
			var attrs = new Set;
			var imports = new java!Import;
			var an = new java!Annotation;
			an.value="@Entity";
			c.annotations.add(an);
			c.service = p.name.replace(" ","").firstToUpperCase();
			an = new java!Annotation;
			an.value="@NamedQuery(name=\""+e.name.toLowerCase().firstToUpperCase()+".findAll\", query=\"SELECT p FROM "+e.name.toLowerCase().firstToUpperCase()+" p\")";
			c.annotations.add(an);
			imports.name = "java.io.Serializable";
			c.imports.add(imports);
			imports = new java!Import;
			imports.name = "javax.persistence.*";
			c.imports.add(imports);
			imports = new java!Import;
			imports.name = "java.util.ArrayList";
			c.imports.add(imports);
			imports = new java!Import;
			imports.name = "java.util.List";
			c.imports.add(imports);
			c.name=e.name.toLowerCase().firstToUpperCase();
			c.implements=implems;
			c.attributes=e.attributes.collect(c|c.getAttribute(e.name, true))
			->includingAll(e.getClassAttributeRef(entRefs, e.name, true));
			c.methods=e.getMethod()
			->includingAll(e.getClassMethodAttributeRef(entRefs));
			classes.add(c);
		}
	}
	return classes;
}

//Metodo que construye los atributos referenciados
operation snap!Entity getClassAttributeRef(entRefs:Set, className:String, isEntity:Boolean): Set {
	var attrs = new Set;
	for(at in entRefs){
		var a = new java!Attribute;
		var lt = new java!ArrayList;
		var cRef = new java!Class;
		a.name=at;
		a.initialization=true;
		a.visibility=java!EVisibility#private;
		if (isEntity){
			cRef.name= at.firstToUpperCase();
			lt.typeOf=cRef;
			a.typeOf=lt;
			var an = new java!Annotation;
			an.value="@OneToMany(mappedBy=\""+className.toLowerCase()+"\", orphanRemoval=true, cascade={CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})";
			a.annotations.add(an);
		} else {
			cRef.name= at.firstToUpperCase()+"DTO";
			lt.typeOf=cRef;
			a.typeOf=lt;
		}
		attrs.add(a);
	}
	return attrs;
}

//Metodo que construye las clases service
operation snap!Program getClassModule(nameApp:String): java!Class {
	var c = new java!Class;
	var imp = new java!Import;
	var an = new java!Annotation;
	var inter = new java!Interface;
	an.value="@Stateless";
	imp.name="java.util.ArrayList";
	c.imports.add(imp);
	imp = new java!Import;
	imp.name="java.util.List";
	c.imports.add(imp);
	imp = new java!Import;
	imp.name="javax.ejb.EJB";
	c.imports.add(imp);
	imp = new java!Import;
	imp.name="javax.ejb.Stateless";
	c.imports.add(imp);
	for(i in self.entities){
		imp = new java!Import;
		imp.name="com.uniandes."+nameApp.replace(" ",".")+".domain."+i.name.toLowerCase().firstToUpperCase();
		c.imports.add(imp);
		imp = new java!Import;
		imp.name="com.uniandes."+nameApp.replace(" ",".")+".dto."+i.name.toLowerCase().firstToUpperCase()+"DTO";
		c.imports.add(imp);
		imp = new java!Import;
		imp.name="com.uniandes."+nameApp.replace(" ",".")+".dao."+i.name.toLowerCase().firstToUpperCase()+"DAOLocal";
		c.imports.add(imp);
	}
	imp = new java!Import;
	imp.name="com.uniandes."+nameApp.replace(" ",".")+".utils.Utils";
	c.imports.add(imp);
	c.annotations.add(an);
	c.name=self.name.replace(" ","").firstToUpperCase()+"Service";
	inter.name = self.name.replace(" ","").firstToUpperCase()+"ServiceLocal";
	c.attributes=self.entities.collect(c|c.getAttributeModule());
	c.implements.add(inter);
	c.methods=self.getMethodService(nameApp)
	->includingAll(self.entities.collect(d|d.getEntityMethodCreateService(false)))
	->includingAll(self.entities.collect(d|d.getEntityMethodUpdateService(false)))
	->includingAll(self.entities.collect(d|d.getEntityMethodDeleteService(false)))
	->includingAll(self.entities.collect(d|d.getEntityMethodListService(false)))
	;
	return c;
}

//Metodo que construye los metodos CRUD para el servicio por cada entidad
operation snap!Entity getEntityMethodCreateService(isInterface) : java!Method {
	//crear con un DTO de entrada
	var m = new java!Method;
	var t = new java!PrimitiveType;
	var nomUp = self.name.toLowerCase().firstToUpperCase();
	var nomLo =  self.name.toLowerCase();
	t.type=java!EJavaType#void;
	m.name="create"+self.name.toLowerCase().firstToUpperCase();
	m.parameters=self.getParamsCRUDService();
	m.returns=t;
	if(isInterface <> true){
	    var an = new java!Annotation;
		an.value="@Override";
		m.annotations.add(an);
		m.content=nomUp+" "+nomLo+" = new "+nomUp+"();";
		m.content=m.content+"\n\tUtils.convertTo"+nomUp+"("+nomLo+","+nomLo+"DTO);";
		m.content=m.content+"\n\t"+nomLo+"DAOLocal.create("+nomLo+");";
	}
	return m;
}

//Metodo que construye los metodos CRUD para el servicio por cada entidad
operation snap!Entity getEntityMethodUpdateService(isInterface) : java!Method {
	//actualizar con un DTO de entrada
	var m = new java!Method;
	var t = new java!PrimitiveType;
	var nomUp = self.name.toLowerCase().firstToUpperCase();
	var nomLo =  self.name.toLowerCase();
	t.type=java!EJavaType#void;
	m.name="update"+self.name.toLowerCase().firstToUpperCase();
	m.parameters=self.getParamsCRUDService();
	m.returns=t;
	if(isInterface <> true){
	    var an = new java!Annotation;
		an.value="@Override";
		m.annotations.add(an);
		m.content=nomUp+" "+nomLo+" = new "+nomUp+"();";
		m.content=m.content+"\n\tUtils.convertTo"+nomUp+"("+nomLo+","+nomLo+"DTO);";
		m.content=m.content+"\n\t"+nomLo+"DAOLocal.edit("+nomLo+");";
	}
	return m;
}

//Metodo que construye los metodos CRUD para el servicio por cada entidad
operation snap!Entity getEntityMethodDeleteService(isInterface) : java!Method {
	//eliminar con un DTO de entrada
	var m = new java!Method;
	var t = new java!PrimitiveType;
	var nomUp = self.name.toLowerCase().firstToUpperCase();
	var nomLo =  self.name.toLowerCase();
	t.type=java!EJavaType#void;
	m.name="delete"+self.name.toLowerCase().firstToUpperCase();
	m.parameters=self.getParamsCRUDService();
	m.returns=t;
	if(isInterface <> true){
	    var an = new java!Annotation;
		an.value="@Override";
		m.annotations.add(an);
		m.content=nomUp+" "+nomLo+" = new "+nomUp+"();";
		m.content=m.content+"\n\tUtils.convertTo"+nomUp+"("+nomLo+","+nomLo+"DTO);";
		m.content=m.content+"\n\t"+nomLo+"DAOLocal.delete("+nomLo+");";
	}
	return m;
}

//Metodo que construye los metodos CRUD para el servicio por cada entidad
operation snap!Entity getEntityMethodListService(isInterface) : java!Method {
	//listar los registros para la Entity
	var m = new java!Method;
	var lt = new java!ArrayList;
	var cRef = new java!Class;
	var nomUp = self.name.toLowerCase().firstToUpperCase();
	var nomLo =  self.name.toLowerCase();
	cRef.name = self.name.toLowerCase().firstToUpperCase+"DTO";
	lt.typeOf=cRef;
	m.name="getAll"+self.name.toLowerCase().firstToUpperCase();
	m.returns=lt;
	if(isInterface <> true){
	    var an = new java!Annotation;
		an.value="@Override";
		m.annotations.add(an);
		m.content="List<"+nomUp+"DTO> "+nomLo+"DTOs = new ArrayList<"+nomUp+"DTO>();";
		m.content=m.content+"\n\tList<"+nomUp+"> "+nomLo+"s = "+nomLo+"DAOLocal.get"+nomUp+"();";
		m.content=m.content+"\n\tfor ("+nomUp+" p : "+nomLo+"s){";
		m.content=m.content+"\n\t\t"+nomUp+"DTO "+nomLo+"DTO = new "+nomUp+"DTO();";
		m.content=m.content+"\n\t\tUtils.convertTo"+nomUp+"DTO("+nomLo+"DTO,p);";
		m.content=m.content+"\n\t\t"+nomLo+"DTOs.add("+nomLo+"DTO);";
		m.content=m.content+"\n\t}";
		m.content=m.content+"\n\treturn "+nomLo+"DTOs;";
	}
	return m;
}

//Metodo que construye los metodos CRUD para el servicio por cada entidad
operation snap!Entity getParamsCRUDService() : Set {
	var params = new Set;
	var c = new java!Class;
	var at = new java!Parameter;
	c.name=self.name.toLowerCase().firstToUpperCase()+"DTO";
	at.name=self.name.toLowerCase()+"DTO";
	at.typeOf=c;
	params.add(at);
	return params;
}

//Metodo que construye las clases DAO
operation snap!Application getClassDAO(entities : Set): Set {
	var class = new Set;
	for (e in entities){
		var c = new java!Class;
		var cExt = new java!Class;
		var impl = new java!Interface;
		var imports = new java!Import;
		var an = new java!Annotation;
		an.value="@Stateless";
		c.annotations.add(an);
		an = new java!Annotation;
		an.value="@LocalBean";
		c.annotations.add(an);
		imports.name = "java.util.List";
		c.imports.add(imports);
		imports = new java!Import;
		imports.name = "javax.ejb.LocalBean";
		c.imports.add(imports);
		imports = new java!Import;
		imports.name = "javax.ejb.Stateless";
		c.imports.add(imports);
		imports = new java!Import;
		imports.name = "javax.persistence.Query";
		c.imports.add(imports);
		imports = new java!Import;
		imports.name = "com.uniandes."+self.name.toLowerCase().replace(" ",".")+".domain."+e.name.toLowerCase().firstToUpperCase();
		c.imports.add(imports);
		cExt.name="GenericDAO<"+e.name.toLowerCase().firstToUpperCase()+">";
		impl.name=e.name.toLowerCase().firstToUpperCase()+"DAOLocal";
		c.name=e.name.toLowerCase().firstToUpperCase()+"DAO";
		c.extend=cExt;
		c.implements.add(impl);
		c.methods=e.getMethodDAO();
		class.add(c);
	}
	return class;
}

//Metodo que construye la clase generica para los DAO
operation snap!Application getClassGenericDAO(): java!Class {
	var c = new java!Class;
	var imports = new java!Import;
	var impl = new java!Interface;
	var an = new java!Annotation;
	an.value="@Stateless";
	imports.name = "java.lang.reflect.ParameterizedType";
	c.imports.add(imports);
	imports = new java!Import;
	imports.name = "javax.ejb.Stateless";
	c.imports.add(imports);
	imports = new java!Import;
	imports.name = "javax.persistence.EntityManager";
	c.imports.add(imports);
	imports = new java!Import;
	imports.name = "javax.persistence.PersistenceContext";
	c.imports.add(imports);
	c.annotations.add(an);
	c.name="GenericDAO<T>";
	impl.name="GenericDAOLocal<T>";
	c.implements.add(impl);
	c.attributes.add(self.getGenericDAOAttribute());
	c.methods=self.getMethodClassGenericDAO();
	return c;
}

//Metodo para construir el atributo para la clase GenericDAO
operation snap!Application getGenericDAOAttribute() : java!Attribute{
	var a = new java!Attribute;
	var an = new java!Annotation;
	var t = new java!PrimitiveType;
	an.value="@PersistenceContext(unitName = \""+self.name.replace(" ","").firstToLowerCase()+"PU\")";
	a.name="em";
	a.visibility=java!EVisibility#protected;
	a.annotations.add(an);
	t.type=java!EJavaType#EntityManager;
	a.typeOf=t;
	return a;
}

//Metodo que construye las clases DTO
operation snap!Entity getClassDTO(implems:Set,entities:Set): java!Class {
	//Se guardan las referencias en otras Entities
	var entRefs = self.getEntsRef(self,entities);
	var c = new java!Class;
	var attrs = new Set;
	var imports = new java!Import;
	imports.name = "java.io.Serializable";
	c.imports.add(imports);
	imports = new java!Import;
	imports.name = "java.util.ArrayList";
	c.imports.add(imports);
	imports = new java!Import;
	imports.name = "java.util.List";
	c.imports.add(imports);
	c.name=self.name.toLowerCase().firstToUpperCase()+"DTO";
	c.implements=implems;
	c.attributes=self.attributes.collect(c|c.getAttribute("",false))
	->includingAll(self.getClassAttributeRef(entRefs, "", false));
	c.methods=self.getMethodDTO()
	->includingAll(self.getClassDTOMethodAttributeRef(entRefs));
	return c;
}

/*******INTERFACES*******/
//Metodo que construye las interfaces DAO
operation snap!Application getInterfaceDAO(entities : Set): Set {
	var interfaces = new Set;
	for (e in entities){
		var c = new java!Interface;
		var cExt = new java!Class;
		var imports = new java!Import;
		var an = new java!Annotation;
		an.value="@Local";
		imports.name = "java.util.List";
		c.imports.add(imports);
		imports = new java!Import;
		imports.name = "javax.ejb.Local";
		c.imports.add(imports);
		imports = new java!Import;
		imports.name = "com.uniandes."+self.name.toLowerCase().replace(" ",".")+".domain."+e.name.toLowerCase().firstToUpperCase();
		c.imports.add(imports);
		cExt.name="GenericDAOLocal<"+e.name.toLowerCase().firstToUpperCase()+">";
		c.name=e.name.toLowerCase().firstToUpperCase()+"DAOLocal";
		c.annotations.add(an);
		c.extend=cExt;
		c.methods=e.getMethodIntDAO();
		interfaces.add(c);
	}
	return interfaces;
}

//Metodo que construye las interfaz Generica de los DAO
operation snap!Application getIntGenericDAO(): java!Interface {
	var c = new java!Interface;
	var imports = new java!Import;
	var an = new java!Annotation;
	an.value="@Local";
	imports.name = "javax.ejb.Local";
	c.imports.add(imports);
	c.annotations.add(an);
	c.name="GenericDAOLocal<T>";
	c.methods=self.getMethodIntGenericDAO();
	return c;
}

operation snap!Program getInterfaceModule(nameApp:String): java!Interface {
	var c = new java!Interface;
	var imp = new java!Import;
	var an = new java!Annotation;
	an.value="@Local";
	c.annotations.add(an);
	imp.name="java.util.ArrayList";
	c.imports.add(imp);
	imp = new java!Import;
	imp.name="java.util.List";
	c.imports.add(imp);
	imp = new java!Import;
	imp.name="javax.ejb.Local";
	c.imports.add(imp);
	for(i in self.entities){
		imp = new java!Import;
		imp.name="com.uniandes."+nameApp.replace(" ",".")+".domain."+i.name.toLowerCase().firstToUpperCase();
		c.imports.add(imp);
		imp = new java!Import;
		imp.name="com.uniandes."+nameApp.replace(" ",".")+".dto."+i.name.toLowerCase().firstToUpperCase()+"DTO";
		c.imports.add(imp);
	}
	c.name=self.name.replace(" ","").firstToUpperCase()+"ServiceLocal";
	c.methods=self.entities.collect(d|d.getEntityMethodCreateService(true))
	->includingAll(self.entities.collect(d|d.getEntityMethodUpdateService(true)))
	->includingAll(self.entities.collect(d|d.getEntityMethodDeleteService(true)))
	->includingAll(self.entities.collect(d|d.getEntityMethodListService(true)))
	;
	return c;
}

/*******ATRIBUTOS-CLASES*******/
//Metodo que construye los atributos Entity
operation snap!Attribute getAttribute(className:String, isEntity): java!Attribute {
	var a = new java!Attribute;
	a.visibility=java!EVisibility#private;
	//Cuando es un valor por referencia, se crea diferente el atributo
	if (self.ref <> null and isEntity){
		a=self.getAttributeRef();
		var an = new java!Annotation;
		an.value="@ManyToOne";
		a.annotations.add(an);
		an = new java!Annotation;
		an.value="@JoinColumn(name=\"ID_"+self.ref.name.toUpperCase()+"\")";
		a.annotations.add(an);
	} else {
		a.typeOf=self.getPrimitiveType();
		a.name=self.description.replace(" ","").firstToLowerCase();
		if(a.name=="id" and isEntity){
			var an = new java!Annotation;
			an.value="@Id";
			a.annotations.add(an);
			an = new java!Annotation;
			an.value="@SequenceGenerator(name=\""+className.toUpperCase()+"_ID_GENERATOR\", sequenceName=\""+className.toUpperCase()+"_SEQ\", allocationSize=1)";
			a.annotations.add(an);
			an = new java!Annotation;
			an.value="@GeneratedValue(strategy=GenerationType.SEQUENCE, generator=\""+className.toUpperCase()+"_ID_GENERATOR\")";
			a.annotations.add(an);
		}
	}
	return a;
}

//Metodo que construye los atributos Entity
operation snap!Attribute getAttributeRef(): java!Attribute {
	var a = new java!Attribute;
	var cRef = new java!Class;
	a.visibility=java!EVisibility#private;
	cRef.name=self.ref.name.toLowerCase().firstToUpperCase();
	a.typeOf=cRef;
	a.name=self.ref.name.toLowerCase();
	return a;
}

//Metodo que construye los atributos para los modulos
operation snap!Entity getAttributeModule(): java!Attribute{
	var a = new java!Attribute;
	var cType = new java!Class;
	var an = new java!Annotation;
	an.value="@EJB";
	cType.name = self.name.toLowerCase().firstToUpperCase()+"DAOLocal";
	a.name=self.name.toLowerCase()+"DAOLocal";
	a.visibility=java!EVisibility#private;
	a.typeOf=cType;
	a.annotations.add(an);
	return a;
} 

//Metodo que construye los atributos de las clases DTO
operation snap!Attribute getAttributeDTO(): java!Attribute {
	var a = new java!Attribute;
	a.name=self.description.replace(" ","").firstToLowerCase();
	a.visibility=java!EVisibility#private;
	a.typeOf=self.getPrimitiveType();
	return a;
}

/*******METODOS*******/
//Metodo que construye los metodos de referencia para entities
operation snap!Entity getClassMethodAttributeRef(entRefs:Set): Set {
	var methods = new Set;
	for(at in entRefs){
		var m = new java!Method;
		var lt = new java!ArrayList;
		var cRef = new java!Class;
		cRef.name = at.firstToUpperCase();
		lt.typeOf=cRef;
		m.name="get"+at.firstToUpperCase();
		m.visibility=java!EVisibility#public;
		m.content="return this."+at.toLowerCase()+";";
		m.returns=lt;
		methods.add(m);
		m = new java!Method;
		lt = new java!ArrayList;
		cRef = new java!Class;
		cRef.name = at.firstToUpperCase();
		lt.typeOf=cRef;
		var t = new java!PrimitiveType;
		var parameter = new java!Parameter;
		parameter.name=at.toLowerCase();
		parameter.typeOf=lt;
		t.type=java!EJavaType#void;
		m.visibility=java!EVisibility#public;
		m.returns=t;
		m.name="set"+at.firstToUpperCase();
		m.content="this."+at.toLowerCase()+"="+at.toLowerCase()+";";
		m.parameters.add(parameter);
		methods.add(m);
		m = new java!Method;
		cRef = new java!Class;
		cRef.name = at.firstToUpperCase();
		var parameter = new java!Parameter;
		parameter.name=at.toLowerCase();
		parameter.typeOf=cRef;
		cRef = new java!Class;
		cRef.name = at.firstToUpperCase();
		m.visibility=java!EVisibility#public;
		m.returns=cRef;
		m.name="add"+at.firstToUpperCase();
		m.content="get"+at.toLowerCase().firstToUpperCase()+"().add("+at.toLowerCase()+");";
		m.content=m.content+"\n"+at.toLowerCase()+".set"+self.name.toLowerCase().firstToUpperCase()+"(this);";
		m.content=m.content+"\nreturn "+at.toLowerCase()+";";
		m.parameters.add(parameter);
		methods.add(m);
		m = new java!Method;
		cRef = new java!Class;
		cRef.name = at.firstToUpperCase();
		var parameter = new java!Parameter;
		parameter.name=at.toLowerCase();
		parameter.typeOf=cRef;
		cRef = new java!Class;
		cRef.name = at.firstToUpperCase();
		m.visibility=java!EVisibility#public;
		m.returns=cRef;
		m.name="remove"+at.firstToUpperCase();
		m.content="get"+at.toLowerCase().firstToUpperCase()+"().remove("+at.toLowerCase()+");";
		m.content=m.content+"\n"+at.toLowerCase()+".set"+self.name.toLowerCase().firstToUpperCase()+"(null);";
		m.content=m.content+"\nreturn "+at.toLowerCase()+";";
		m.parameters.add(parameter);
		methods.add(m);
	}
	return methods;
}

//Metodo que construye los metodos de referencia para entities
operation snap!Entity getClassDTOMethodAttributeRef(entRefs:Set): Set {
	var methods = new Set;
	for(at in entRefs){
		var m = new java!Method;
		var lt = new java!ArrayList;
		var cRef = new java!Class;
		cRef.name = at.firstToUpperCase()+"DTO";
		lt.typeOf=cRef;
		m.name="get"+at.firstToUpperCase();
		m.visibility=java!EVisibility#public;
		m.content="return this."+at.toLowerCase()+";";
		m.returns=lt;
		methods.add(m);
		m = new java!Method;
		lt = new java!ArrayList;
		cRef = new java!Class;
		cRef.name = at.firstToUpperCase()+"DTO";
		lt.typeOf=cRef;
		var t = new java!PrimitiveType;
		var parameter = new java!Parameter;
		parameter.name=at.toLowerCase();
		parameter.typeOf=lt;
		t.type=java!EJavaType#void;
		m.visibility=java!EVisibility#public;
		m.returns=t;
		m.name="set"+at.firstToUpperCase();
		m.content="this."+at.toLowerCase()+"="+at.toLowerCase()+";";
		m.parameters.add(parameter);
		methods.add(m);
	}
	return methods;
}

//Metodo que construye los metodos Entity
operation snap!Entity getMethod(): Set {
	var methods = new Set;
	var m = new java!Method;
	m.name=self.name.toLowerCase().firstToUpperCase();
	m.visibility=java!EVisibility#public;
	methods.add(m);
	for (at in self.attributes){
		if(at.ref <> null){
			var params = new Sequence;
			var cRef = new java!Class;
			cRef.name=at.ref.name.toLowerCase().firstToUpperCase();
			var m = new java!Method;
			m.name="get"+at.ref.name.toLowerCase().firstToUpperCase();
			m.visibility=java!EVisibility#public;
			m.returns=cRef;
			m.content="return this."+at.ref.name.toLowerCase()+";";
			methods.add(m);
			var m = new java!Method;
			var t = new java!PrimitiveType;
			t.type=java!EJavaType#void;
			m.name="set"+at.ref.name.toLowerCase().firstToUpperCase();
			m.visibility=java!EVisibility#public;
			m.returns=t;
			params.add(at.getAttribute("",true));
			m.parameters=params;
			m.content="this."+at.ref.name.toLowerCase()+" = "+at.ref.name.toLowerCase()+";";
			methods.add(m);
		} else {
			var params = new Sequence;
			var m = new java!Method;
			m.name="get"+at.description.replace(" ","").firstToUpperCase();
			m.visibility=java!EVisibility#public;
			m.returns=at.getPrimitiveType();
			m.content="return this."+at.description.replace(" ","").firstToLowerCase()+";";
			methods.add(m);
			var m = new java!Method;
			var t = new java!PrimitiveType;
			t.type=java!EJavaType#void;
			m.name="set"+at.description.replace(" ","").firstToUpperCase();
			m.visibility=java!EVisibility#public;
			m.returns=t;
			params.add(at.getAttribute("",false));
			m.parameters=params;
			m.content="this."+at.description.replace(" ","").firstToLowerCase()+" = "+at.description.replace(" ","").firstToLowerCase()+";";
			methods.add(m);
		}
	}
	return methods;
}

//Metodo que construye los metodos para los modulos
operation snap!Program getMethodService(nameApp:String): Set {
	var methods = new Set;
	var m = new java!Method;
	m.name=self.name.replace(" ","").firstToUpperCase()+"Service";
	m.visibility=java!EVisibility#public;
	methods.add(m);
	for (mod in self.modules){
		var m = new java!Method;
		var t = new java!PrimitiveType;
		t.type=java!EJavaType#void;
		m.name=nameApp.replace(" ","")+mod.name.toLowerCase().firstToUpperCase();
		m.visibility=java!EVisibility#public;
		m.returns=t;
		m.content=mod.block.content;
		methods.add(m);
	}
	return methods;
}

//Metodo que construye los metodos de las clases DTO
operation snap!Entity getMethodDTO(): Set {
	var methods = new Set;
	var m = new java!Method;
	m.name=self.name.toLowerCase().firstToUpperCase()+"DTO";
	m.visibility=java!EVisibility#public;
	methods.add(m);
	for (at in self.attributes){
		if(at.ref == null){
			var params = new Sequence;
			var m = new java!Method;
			m.name="get"+at.description.replace(" ","").toLowerCase().firstToUpperCase();
			m.visibility=java!EVisibility#public;
			m.returns=at.getPrimitiveType();
			m.content="return this."+at.description.replace(" ","").toLowerCase().firstToLowerCase()+";";
			methods.add(m);
			var m = new java!Method;
			var t = new java!PrimitiveType;
			t.type=java!EJavaType#void;
			m.name="set"+at.description.replace(" ","").toLowerCase().firstToUpperCase();
			m.visibility=java!EVisibility#public;
			m.returns=t;
			params.add(at.getAttribute("",false));
			m.parameters=params;
			m.content="this."+at.description.replace(" ","").toLowerCase()+" = "+at.description.replace(" ","").toLowerCase()+";";
			methods.add(m);
		}
	}
	return methods;
}

//Metodo que construye los metodos de las clases DAO
operation snap!Entity getMethodDAO(): Set {
	var methods = new Set;
	var m = new java!Method;
	var lt = new java!ArrayList;
	var cRef = new java!Class;//Clase referencia para el tipo Lista
	var an = new java!Annotation;
	an.value="@Override";
	m.name=self.name.toLowerCase().firstToUpperCase()+"DAO";
	m.visibility=java!EVisibility#public;
	methods.add(m);
	m = new java!Method;
	m.name="get"+self.name.toLowerCase().firstToUpperCase();
	m.visibility=java!EVisibility#public;
	m.content="Query q = em.createQuery(\"SELECT p FROM "+self.name.toLowerCase().firstToUpperCase()+" p\");";
	m.content=m.content+"\n\tList<"+self.name.toLowerCase().firstToUpperCase()+"> a = q.getResultList();";
	m.content=m.content+"\n\treturn a;";
	cRef.name = self.name.toLowerCase().firstToUpperCase();
	lt.typeOf=cRef;
	m.returns=lt;
	m.annotations.add(an);
	methods.add(m);
	return methods;
}

//Metodo que construye los metodos de las Interfaces DAO
operation snap!Entity getMethodIntDAO(): Set {
	var methods = new Set;
	var m = new java!Method;
	var lt = new java!ArrayList;
	var cRef = new java!Class;//Clase referencia para el tipo Lista
	//m.name=self.name.firstToUpperCase()+"DAO";
	//m.visibility=java!EVisibility#public;
	//methods.add(m);
	m = new java!Method;
	m.name="get"+self.name.toLowerCase().firstToUpperCase();
	m.visibility=java!EVisibility#public;
	cRef.name = self.name.toLowerCase().firstToUpperCase();
	lt.typeOf=cRef;
	m.returns=lt;
	methods.add(m);
	return methods;
}

//Metodo que construye los metodos de las Interfaces DAO
operation snap!Application getMethodClassGenericDAO(): Set {
	var methods = new Set;
	//Metodo crear
	var m = new java!Method;
	var t = new java!PrimitiveType;
	var an = new java!Annotation;
	an.value="@Override";
    t.type=java!EJavaType#void;
    m.annotations.add(an);
	m.name="create";
	m.visibility=java!EVisibility#public;
	m.returns=t;
	m.parameters.add(self.getGenericParam(true));
	m.content="em.persist(p);";
	methods.add(m);
	//Metodo editar
	m = new java!Method;
	t = new java!PrimitiveType;
	an = new java!Annotation;
	an.value="@Override";
    t.type=java!EJavaType#void;
    m.annotations.add(an);
	m.name="edit";
	m.visibility=java!EVisibility#public;
	m.returns=t;
	m.parameters.add(self.getGenericParam(true));
	m.content="em.merge(p);";
	methods.add(m);
	//Metodo delete
	m = new java!Method;
	t = new java!PrimitiveType;
	an = new java!Annotation;
	an.value="@Override";
    t.type=java!EJavaType#void;
    m.annotations.add(an);
	m.name="delete";
	m.visibility=java!EVisibility#public;
	m.returns=t;
	m.parameters.add(self.getGenericParam(true));
	m.content="em.remove(em.merge(p));";
	methods.add(m);
	//Metodo searchById
	m = new java!Method;
	t = new java!PrimitiveType;
	an = new java!Annotation;
	an.value="@Override";
    t.type=java!EJavaType#T;
    m.annotations.add(an);
	m.name="searchById";
	m.visibility=java!EVisibility#public;
	m.returns=t;
	m.parameters.add(self.getGenericParam(false));
	m.content="Class<T> classEntity = (Class<T>) ((ParameterizedType) getClass().getGenericSuperclass()).getActualTypeArguments()[0];";
	m.content=m.content+"\n\treturn em.find(classEntity, p);";
	methods.add(m);
	return methods;
}

//Metodo que construye los metodos de las Interfaces DAO
operation snap!Application getMethodIntGenericDAO(): Set {
	var methods = new Set;
	//Metodo crear
	var m = new java!Method;
	var t = new java!PrimitiveType;
    t.type=java!EJavaType#void;
	m.name="create";
	m.visibility=java!EVisibility#public;
	m.returns=t;
	m.parameters.add(self.getGenericParam(true));
	methods.add(m);
	//Metodo editar
	m = new java!Method;
	t = new java!PrimitiveType;
    t.type=java!EJavaType#void;
	m.name="edit";
	m.visibility=java!EVisibility#public;
	m.returns=t;
	m.parameters.add(self.getGenericParam(true));
	methods.add(m);
	//Metodo delete
	m = new java!Method;
	t = new java!PrimitiveType;
    t.type=java!EJavaType#void;
	m.name="delete";
	m.visibility=java!EVisibility#public;
	m.returns=t;
	m.parameters.add(self.getGenericParam(true));
	methods.add(m);
	//Metodo searchById
	m = new java!Method;
	t = new java!PrimitiveType;
    t.type=java!EJavaType#T;
	m.name="searchById";
	m.visibility=java!EVisibility#public;
	m.returns=t;
	m.parameters.add(self.getGenericParam(false));
	methods.add(m);
	return methods;
}

/*******PARAMS-METHODS********/
//Metodo que construye los parametros de los metodos de la interfaz y clase generic
operation snap!Application getGenericParam(isT : Boolean): java!Attribute {
	var at = new java!Attribute;
	var tAt = new java!PrimitiveType;
	if (isT){
		tAt.type=java!EJavaType#T;
		at.name="p";
		at.typeOf=tAt;
	} else {
		tAt.type=java!EJavaType#Object;
		at.name="p";
		at.typeOf=tAt;
	}
	return at;
}

//Metodo que construye los parametros para los metodos convert en la clase Util
operation snap!Entity getParams(isDTO : Boolean): Bag {
	var params = new Bag;
	var attrDTO = new java!Attribute;
	var attrDom = new java!Attribute;
	var cDTO = new java!Class;
	var cDom = new java!Class;
	attrDTO.name = self.name.toLowerCase()+"DTO";
	cDTO.name = self.name.toLowerCase().firstToUpperCase()+"DTO";
	attrDTO.typeOf=cDTO;
	attrDom.name = self.name.toLowerCase();
	cDom.name = self.name.toLowerCase().firstToUpperCase();
	attrDom.typeOf=cDom;
	if (isDTO){
		params.add(attrDTO);
		params.add(attrDom);
	} else{
		params.add(attrDom);
		params.add(attrDTO);
	}
	return params;
}

/*******CONTENIDO-METODOS-UTILS********/
//Metodo que construye el contenido de los metodos para la clase utils
operation snap!Entity getContentToDTO(entRefs:Set): String {
	var content = new String;
	var className=self.name.toLowerCase();
	for (a in self.attributes){
		if(a.ref == null){
			var name = a.description.replace(" ","").firstToUpperCase();
			content=content+className+"DTO.set"+name+"("+className+".get"+name+"());\n";
		}
	}
	for (a in entRefs){
		content=content+"\nfor ("+a.firstToUpperCase()+" "+a+" :  "+className+".get"+a.firstToUpperCase()+"()){";
		content=content+"\n"+a.firstToUpperCase()+"DTO "+a+"DTO = new "+a.firstToUpperCase()+"DTO();";
		content=content+"\nconvertTo"+a.firstToUpperCase()+"DTO("+a+"DTO, "+a+");";
		content=content+"\n"+className+"DTO.get"+a.firstToUpperCase()+"().add("+a+"DTO);";
		content=content+"\n}";
	}
	return content;
}

//Metodo que construye el contenido de los metodos para la clase utils
operation snap!Entity getContentToDomain(entRefs:Set): String {
	var content = new String;
	var className=self.name.toLowerCase();
	for (a in self.attributes){
		if(a.ref == null){
			var name = a.description.replace(" ","").firstToUpperCase();
			content=content+className+".set"+name+"("+className+"DTO.get"+name+"());\n";
		}
	}
	for (a in entRefs){
		content=content+"\nfor ("+a.firstToUpperCase()+"DTO "+a+"DTO :  "+className+"DTO.get"+a.firstToUpperCase()+"()){";
		content=content+"\n"+a.firstToUpperCase()+" "+a+" = new "+a.firstToUpperCase()+"();";
		content=content+"\nconvertTo"+a.firstToUpperCase()+"("+a+", "+a+"DTO);";
		content=content+"\n"+a+".set"+className.firstToUpperCase+"("+className+");";
		content=content+"\n"+className+".get"+a.firstToUpperCase()+"().add("+a+");";
		content=content+"\n}";
	}
	return content;
}

/*******UTILS*******/
//Metodo para el mapeo de tipos primitivos
operation snap!Attribute getPrimitiveType(): java!PrimitiveType{
	if(self.dataType <> null){
		var t = new java!PrimitiveType;
		if(self.dataType.startsWith("I0")){
			t.type=java!EJavaType#int;
		} else {
			t.type=java!EJavaType#String;
		}
		//String corresponde al 0 y 1
		
		//} else if (self.dataType==2){
		//int corresponde al 2
		//	t.type=java!EJavaType#int;
		//}
		return t;
	}
}
@emf.gen(classPackageSuffix="metamodel.impl", utilityPackageSuffix="metamodel.util", metaDataPackageSuffix="metamodel", interfacePackageSuffix="metamodel", basePackage="org.eclipse.epsilon")
@emf.gen.usedGenPackage(name="eol", genModel="platform:/resource/org.eclipse.epsilon.eol.metamodel/model/EOL.genmodel")
@emf.gen.annotation(source="emf.gen", key="extends", value="eol")
@namespace(uri="http://www.eclipse.org/epsilon/etl", prefix="etl")
package etl;

import "platform:/resource/org.eclipse.epsilon.eol.metamodel/model/EOL.ecore";

class ETLElement extends eol.EOLElement {
}

class NamedBlock extends ETLElement {
  val eol.NameExpression[1] name;
  val eol.Block body;
}

class ETLModule extends eol.EOLLibraryModule {
  val TransformationRule[*] transformationRules;
  val NamedBlock[*] preBlocks;
  val NamedBlock[*] postBlocks;
}

class TransformationRule extends ETLElement {
  val eol.NameExpression[1] name;
  val eol.FormalParameterExpression[1] source;
  val eol.FormalParameterExpression[*] targets;
  val eol.Block body;
  val eol.AnnotationBlock annotationBlock;
  val eol.NameExpression[*] ~extends;
  ref TransformationRule[*] resolvedParentRules;
  val RuleDependency[*] resolvedRuleDependencies;
  val eol.ExpressionOrStatementBlock guard;
  attr boolean ~abstract;
  attr boolean lazy;
  attr boolean primary;
  attr boolean greedy;
}

class RuleDependency extends ETLElement {
  ref TransformationRule dependingRule;
  ref eol.EOLElement sourceElement;
}


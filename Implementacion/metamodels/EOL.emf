@emf.gen(classPackageSuffix="metamodel.impl", utilityPackageSuffix="metamodel.util", metaDataPackageSuffix="metamodel", interfacePackageSuffix="metamodel", basePackage="org.eclipse.epsilon")
@namespace(uri="http://www.eclipse.org/epsilon/eol", prefix="eol")
package eol;

class EOLElement {
  ref EOLElement container;
  attr String uri;
  val TextRegion region;
}

class TextRegion {
  val TextPosition[1] start;
  val TextPosition end;
}

class TextPosition {
  attr int[1] line;
  attr int[1] column;
}

class EOLLibraryModule extends EOLElement {
  attr String[1] name;
  val Import[*] imports;
  val ModelDeclarationStatement[*] modelDeclarations;
  val OperationDefinition[*] operations;
}

class EOLModule extends EOLLibraryModule {
  val Block block;
}

class Import extends EOLElement {
  val EOLLibraryModule[1] importedModule;
  attr String[1] imported;
}

class Block extends EOLElement {
  val Statement[*] statements;
}

class AnnotationBlock extends Block {
}

class ExpressionOrStatementBlock extends EOLElement {
  val Block block;
  val Expression expression;
  val Expression condition;
}

class OperationDefinition extends EOLElement {
  val Type[1] contextType;
  val Type[1] returnType;
  val AnnotationBlock annotationBlock;
  val Block body;
  val NameExpression[1] name;
  val FormalParameterExpression[*] parameters;
  val VariableDeclarationExpression[1] self;
  val VariableDeclarationExpression _result;
  ref OperationDefinition[*] dependingOperationDefinitions;
}

abstract class Expression extends EOLElement {
  val Type[1] resolvedType;
  attr boolean[1] inBrackets = false;
}

abstract class OperatorExpression extends Expression {
}

abstract class UnaryOperatorExpression extends OperatorExpression {
  val Expression[1] expression;
}

class NotOperatorExpression extends UnaryOperatorExpression {
}

class NegativeOperatorExpression extends UnaryOperatorExpression {
}

abstract class BinaryOperatorExpression extends OperatorExpression {
  val Expression[1] lhs;
  val Expression[1] rhs;
}

abstract class LogicalOperatorExpression extends BinaryOperatorExpression {
}

class AndOperatorExpression extends LogicalOperatorExpression {
}

class XorOperatorExpression extends LogicalOperatorExpression {
}

class OrOperatorExpression extends LogicalOperatorExpression {
}

class ImpliesOperatorExpression extends LogicalOperatorExpression {
}

abstract class ArithmeticOperatorExpression extends BinaryOperatorExpression {
}

class DivideOperatorExpression extends ArithmeticOperatorExpression {
}

class MultiplyOperatorExpression extends ArithmeticOperatorExpression {
}

class MinusOperatorExpression extends ArithmeticOperatorExpression {
}

class PlusOperatorExpression extends ArithmeticOperatorExpression {
}

abstract class ComparisonOperatorExpression extends BinaryOperatorExpression {
}

class GreaterThanOrEqualToOperatorExpression extends ComparisonOperatorExpression {
}

class GreaterThanOperatorExpression extends ComparisonOperatorExpression {
}

class LessThanOrEqualToOperatorExpression extends ComparisonOperatorExpression {
}

class LessThanOperatorExpression extends ComparisonOperatorExpression {
}

class NotEqualsOperatorExpression extends ComparisonOperatorExpression {
}

class EqualsOperatorExpression extends ComparisonOperatorExpression {
}

class VariableDeclarationExpression extends Expression {
  attr boolean[1] create;
  val NameExpression[1] name;
  ref NameExpression[*] references;
}

class FormalParameterExpression extends VariableDeclarationExpression {
}

class NameExpression extends Expression {
  attr String[1] name;
  transient attr EJavaObject resolvedContent;
  attr boolean[1] isType;
}

abstract class FeatureCallExpression extends Expression {
  val Expression target;
  attr boolean[1] arrow = false;
}

class MethodCallExpression extends FeatureCallExpression {
  val Expression[*] arguments;
  val NameExpression[1] method;
  ref OperationDefinition resolvedOperationDefinition;
}

class PropertyCallExpression extends FeatureCallExpression {
  attr boolean extended = false;
  val NameExpression[1] property;
}

class FOLMethodCallExpression extends FeatureCallExpression {
  val FormalParameterExpression[1] iterator;
  val Expression[+] conditions;
  val NameExpression[1] method;
  ref OperationDefinition resolvedFOLDefinition;
}

class KeyValueExpression extends Expression {
  val Expression[1] key;
  val Expression[1] value;
}

class ModelDeclarationParameter extends KeyValueExpression {
}

class NewExpression extends Expression {
  val NameExpression[1] typeName;
  val Expression[*] parameters;
}

class MapExpression extends Expression {
  val KeyValueExpression[*] keyValues;
}

abstract class CollectionExpression extends Expression {
  val Expression[*] contents;
  val CollectionInitialisationExpression parameterList;
}

abstract class PrimitiveExpression extends Expression {
}

abstract class ComparableExpression extends PrimitiveExpression {
}

abstract class SummableExpression extends PrimitiveExpression {
}

class StringExpression extends ComparableExpression, SummableExpression {
  attr String[1] value;
}

class BooleanExpression extends PrimitiveExpression {
  attr boolean[1] value;
}

class RealExpression extends ComparableExpression, SummableExpression {
  attr double[1] value;
}

class IntegerExpression extends ComparableExpression, SummableExpression {
  attr int[1] value;
}

class BagExpression extends CollectionExpression {
}

class SetExpression extends UniqueCollection {
}

class OrderedSetExpression extends OrderedCollection, UniqueCollection {
}

class SequenceExpression extends OrderedCollection {
}

abstract class OrderedCollection extends CollectionExpression {
}

abstract class UniqueCollection extends CollectionExpression {
}

class EnumerationLiteralExpression extends Expression {
  val NameExpression[1] literal;
  val NameExpression[1] enumeration;
  val NameExpression[1] model;
}

abstract class CollectionInitialisationExpression extends Expression {
}

class ExpressionRange extends CollectionInitialisationExpression {
  val Expression[1] start;
  val Expression[1] end;
}

class ExpressionList extends CollectionInitialisationExpression {
  val Expression[+] expressions;
}

abstract class Statement extends EOLElement {
}

class TransactionStatement extends Statement {
  val NameExpression[*] names;
  val ExpressionOrStatementBlock[1] body;
}

class ExpressionStatement extends Statement {
  val Expression[1] expression;
}

class SwitchStatement extends Statement {
  val Expression[1] expression;
  val SwitchCaseExpressionStatement[*] cases;
  val SwitchCaseDefaultStatement default;
}

abstract class SwitchCaseStatement extends Statement {
  val ExpressionOrStatementBlock[1] body;
}

class SwitchCaseDefaultStatement extends SwitchCaseStatement {
}

class SwitchCaseExpressionStatement extends SwitchCaseStatement {
  val Expression[1] expression;
}

class IfStatement extends Statement {
  val Expression[1] condition;
  val ExpressionOrStatementBlock[1] ifBody;
  val ExpressionOrStatementBlock[*] elseIfBodies;
  val ExpressionOrStatementBlock elseBody;
}

class ForStatement extends Statement {
  val FormalParameterExpression[1] iterator;
  val Expression[1] condition;
  val ExpressionOrStatementBlock[1] body;
}

class WhileStatement extends Statement {
  val Expression[1] condition;
  val ExpressionOrStatementBlock[1] body;
}

class ReturnStatement extends Statement {
  val Expression[1] expression;
}

class ThrowStatement extends Statement {
  val Expression[1] expression;
}

class DeleteStatement extends Statement {
  val Expression[1] expression;
}

class AssignmentStatement extends Statement {
  val Expression[1] lhs;
  val Expression[1] rhs;
}

class SpecialAssignmentStatement extends AssignmentStatement {
}

class ContinueStatement extends Statement {
}

class AbortStatement extends Statement {
}

class BreakStatement extends Statement {
}

class BreakAllStatement extends Statement {
}

abstract class AnnotationStatement extends Statement {
  val NameExpression[1] name;
}

class SimpleAnnotationStatement extends AnnotationStatement {
  val StringExpression[*] values;
}

class ExecutableAnnotationStatement extends AnnotationStatement {
  val Expression[1] expression;
}

class ModelDeclarationStatement extends Statement {
  val VariableDeclarationExpression[1] name;
  val NameExpression[1] driver;
  val VariableDeclarationExpression[*] aliases;
  val ModelDeclarationParameter[*] parameters;
  transient derived attr EJavaObject resolvedIMetamodel;
}

class Type extends EOLElement {
}

class AnyType extends Type {
  val Type[*] dynamicTypes;
  attr boolean[1] declared;
}

class ModelType extends AnyType {
  transient derived attr EJavaObject resolvedIMetamodel;
}

class ModelElementType extends AnyType {
  attr String modelName;
  attr String[1] elementName;
  ref ModelDeclarationStatement[1] resolvedModelDeclaration;
  transient derived attr EJavaObject resolvedIMetamodel;
  transient derived attr EJavaObject resolvedIPackage;
  transient derived attr EJavaObject modelElementType;
}

abstract class PseudoType extends AnyType {
}

class SelfType extends PseudoType {
}

class SelfContentType extends PseudoType {
}

class MapType extends AnyType {
  val AnyType keyType;
  val AnyType valueType;
}

class NativeType extends AnyType {
  val StringExpression[1] expression;
}

class VoidType extends AnyType {
}

class InvalidType extends AnyType {
}

class CollectionType extends AnyType {
  val Type[1] contentType;
}

class BagType extends CollectionType {
}

abstract class OrderedCollectionType extends CollectionType {
}

abstract class UniqueCollectionType extends CollectionType {
}

class SetType extends UniqueCollectionType {
}

class OrderedSetType extends UniqueCollectionType, OrderedCollectionType {
}

class SequenceType extends OrderedCollectionType {
}

abstract class PrimitiveType extends AnyType {
}

abstract class ComparablePrimitiveType extends PrimitiveType {
}

abstract class SummablePrimitiveType extends PrimitiveType {
}

class BooleanType extends PrimitiveType {
}

class RealType extends ComparablePrimitiveType, SummablePrimitiveType {
}

class IntegerType extends RealType {
}

class StringType extends ComparablePrimitiveType, SummablePrimitiveType {
}


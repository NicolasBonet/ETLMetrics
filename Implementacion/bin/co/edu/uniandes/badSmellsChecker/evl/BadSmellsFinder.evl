/*
* Settings
*/
pre{
	var threshold_complex_ocl = 5;
	var threshold_output_code = 5;
	var threshold_inline_operation_lines = 3;
}

/*
* Rules
*/
context ETL!TransformationRule
{
	/*
		Bad Smell: Name convention
	*/
	critique NameShouldStartWithUpperCase
	{
		guard : self.name.name <> ""
		
		check : self.name.name.substring(0,1) = self.name.name.substring(0,1).toUpperCase()
	    
	    message : "[02] The name of transformation rule " + self.name.name + " should start with a upper-case letter - Lines: " + self.region.start.line + "/" + self.region.end.line
    }
    
    critique SourceNameShouldStartWitLowerCase
	{
		guard : self.source.name.name <> ""
	
		check : self.source.name.name.substring(0,1) = self.source.name.name.substring(0,1).toLowerCase()
	    
	   message : "[01] The source parameter " + self.source.name.name + " of transformation rule " + self.name.name + " should start with a lower-case letter - Lines: " + self.region.start.line + "/" + self.region.end.line
    }
    
    critique TargetNameShouldStartWitLowerCase
	{
		guard : self.targets.size() > 0
	
		check : self.targets.select(target | target.name.name <> "" and target.name.name.substring(0,1) <> target.name.name.substring(0,1).toLowerCase()).size() = 0
	    
	    message : "[01] All target parameters of transformation rule " + self.name.name + " should start with a lower-case letter - Lines: " + self.region.start.line + "/" + self.region.end.line
    }
	
	/*
		Bad Smell: Split Rules
	*/
	critique SplitRules
	{
		guard : self.body.statements.size() = 1
		
		check : self.body.statements.select(s | s.isTypeOf(ETL!IfStatement)).size() = 0
		
		message : "[05] The rule " + self.name.name + " (between lines " + self.region.start.line + " and " + self.region.end.line + ") has an if as its only child, consider the use of guards to factorize it  - Lines: " + self.region.start.line + "/" + self.region.end.line
    }

}

/*
* Operations
*/
context ETL!OperationDefinition
{
	/*
		Bad Smell: Name convention
	*/
	critique NameShouldStartWithLowerCase
	{
		guard : self.name.name <> ""
		
		check : self.name.name.substring(0,1) = self.name.name.substring(0,1).toLowerCase()
	    
	    message : "[02] The name of operation " + self.name.name + " (line #" + self.region.start.line  + ") should start with a lower-case letter - Lines: " + self.region.start.line + "/" + self.region.end.line
    }
    
    /*
		Bad Smell: Inline Operations
	*/
	critique UseInlineOperations
	{
		guard : self.name.name <> "" and (self.region.end.line - self.region.start.line) <= threshold_inline_operation_lines
		
		check : ETL!MethodCallExpression.allInstances.select(c | c.hasProperty('method') and c.method.name = self.name.name).size() <> 1
	    
	    message : "[04] Operation " + self.name.name + " (line #" + self.region.start.line  + ") is only being used once, consider to remove it and place content inside the parent - Lines: " + self.region.start.line + "/" + self.region.end.line
    }
}

/*
* For statements
*/
context ETL!ForStatement
{
	/*
		Bad Smell: Elements creation in rules
	*/
	critique ElementsCreationInLoops
	{
		guard : self.body.hasProperty('block') and self.body.block.statements.select(s | s.isTypeOf(ETL!AssignmentStatement)).size() > 0
		
		check : self.body.block.statements.select(s | s.isTypeOf(ETL!AssignmentStatement) and (s.lhs.isTypeOf(ETL!NewExpression) or s.rhs.isTypeOf(ETL!NewExpression))).size() = 0
		
		message : "[08] The for statement (between lines " + self.region.start.line + " and " + self.region.end.line + ") is creating elements, consider to create these as rules. - Lines: " + self.region.start.line + "/" + self.region.end.line
    }
    
    /*
		Bad Smell: Avoid for/if in favor of OCL Expressions
	*/
	critique AvoidForIfInFavorOfOCLExpressions
	{
		guard : self.body.block.statements.size() = 1
		
		check : self.body.block.statements.select(s | s.isTypeOf(ETL!IfStatement)).size() = 0
		
		message : "[07] The for statement (between lines " + self.region.start.line + " and " + self.region.end.line + ") has an if as its only child, consider the use of OCL Expressions to factorize it. - Lines: " + self.region.start.line + "/" + self.region.end.line
    }
}

/*
* If statements
*/
context ETL!IfStatement
{
	/*
		Bad Smell: Substituting IF/ELSE Chains with Switch
	*/
	critique SubstitutingIFELSEChainsWithSwitch
	{
		// check : self.eContents.select(c | c.isTypeOf(ETL!ExpressionOrStatementBlock) and c.block.statements.exists(s | s.isTypeOf(ETL!AssignmentStatement))).collect( c | c.block.statements.select(s | s.isTypeOf(ETL!AssignmentStatement) and s.lhs.hasProperty('property') and s.rhs.isTypeOf(ETL!MethodCallExpression)).lhs.property.name )->asSet().size() <> 1
		
		guard : self.elseIfBodies.size() > 0
		
		check : self.eContents.select(c | c.isTypeOf(ETL!ExpressionOrStatementBlock) and c.block.statements.exists(s | s.isTypeOf(ETL!AssignmentStatement))).collect( c | c.block.statements.select(s | s.isTypeOf(ETL!AssignmentStatement) and s.lhs.hasProperty('property') and s.rhs.isTypeOf(ETL!MethodCallExpression)).lhs.property.name)->asSet().size() <> 1
		
		message : "[09] The if statement (between lines " + self.region.start.line + " and " + self.region.end.line + ") can be replaced with a Switch or a Hashmap. - Lines: " + self.region.start.line + "/" + self.region.end.line
    }
}

/*
* Block
*/
context ETL!Block
{
	/*
		Bad Smell: Merge Bindings
	*/
	critique MergeBindings
	{
		guard : self.statements.size() > 0
		
		check {
			var nameOcurrences = new Map;
			var nameVariable = "";
			var statement = new ETL!EOLElement;
			
			for (nameStatement in self.statements.select(s | s.hasProperty('lhs') and s.lhs.isTypeOf(ETL!PropertyCallExpression) and s.lhs.target.hasProperty('name')) )
			{
				// Get the name
				statement = nameStatement;
				nameVariable = nameStatement.lhs.property.name;
				
				// Use the map to see if it was used before
				if (nameOcurrences.containsKey(nameStatement.lhs.target.name + '.' + nameVariable))
					return false;
				else
					nameOcurrences.put(nameStatement.lhs.target.name + '.' + nameVariable, 1);
			}
		
			return true;
		}
		
		message : "[06] The target feature " + nameVariable + " being set at lines " + statement.region.start.line + " and " + statement.region.end.line + " was already used before, consider to merge those bindings. - Lines: " + statement.region.start.line + "/" + statement.region.end.line
    }
}

/*
* Method Call Expressions (OCL for example)
*/
context ETL!MethodCallExpression
{
	/*
		Bad Smell: Extract complex OCL in Operations
	*/
	critique ExtractComplexOCLInOperations
	{
		guard : self.eContents.size() > 0
		
		check : self.countComplexOperations(0) < threshold_complex_ocl
		
		message : "[03] The OCL expression (between lines " + self.region.start.line + " and " + self.region.end.line + ") has too many OCL expressions, try to split it into operations. - Lines: " + self.region.start.line + "/" + self.region.end.line
    }
    
    /*
		Bad Smell: Replace select/first with any
	*/
	critique ReplaceSelectFirst
	{
		guard : self.hasProperty('target') and self.target.hasProperty('method') and self.target.method.hasProperty('name') 
	
		check : self.method.name <> "first" or self.target.method.name <> "select"
		
		message : "[10] The method between lines " + self.region.start.line + " and " + self.region.end.line + " is using a select()->first() navigation, use selectFirst() instead for better performance. - Lines: " + self.region.start.line + "/" + self.region.end.line
    }
}

/*
* Operations
*/
operation Any findParentRule(): ETL!TransformationRule
{
	if (self.container = null or self.container.isTypeOf(ETL!ETLModule))
		return null;
	else if (self.container.isTypeOf(ETL!TransformationRule))
		return self.container;
	else
		return self.container.findParentRule();
}

operation Any countComplexOperations(i) : Integer
{
	for (c in self.eContents)
	{
		if (c.isTypeOf(ETL!MethodCallExpression) or c.isTypeOf(ETL!FOLMethodCallExpression))
			i = i + 1;
		
		i = i + c.countComplexOperations(0);
	}
	
	return i;
}
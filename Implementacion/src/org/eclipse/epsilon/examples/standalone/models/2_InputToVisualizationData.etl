pre{
	"-------------------------".println();
	"Start Phase 2: Transformation - Ecore Metamodel with Validated Annotations to Visualization's Data".println();
	"-------------------------".println();
	var id = 0;
	var idR = 0;
	"1. Create configuration for Visualization Specification".println();
	var system = Data!System.allInstances().first();
	var package = Input!EPackage.allInstances().first();
	system.name = package.name;
	system.elements = new List();
	system.relations = new List();
	system.metaPackage = package;
	"2. Get all classes from Ecore's input.".println();
	var allClasses = Input!EClass.allInstances();
	"3. Find all relationships by Annotation 'Relationship'".println();
	var allRelations = Input!EClass.allInstances().select(r|r.getEAnnotation("Relationship") <> null);
	"4. Process All Clusters".println();
	processAllClusters();
	"5. Process All Relationships".println();
	processRelationships();
}
post{
	"-------------------------".println();
	"End Phase 2".println();
	"-------------------------".println();	
}

//-------------------------------------------------------------------
//	Lógica para Relaciones
//-------------------------------------------------------------------

/*
* Nombre: processRelationships
* Parametros: Ninguno
* Descripción: 
Este método se encarga de procesar todas las metaclases que hayan sido anotadas con @Relationship,
para convertirlas en instancias del metamodelo de visualización.

Por cada metaclase busca en sus propiedades aquella que contenga una anotación con @source y @target,
así mismo busca el contenedor de la metaclases en una relación de tipo containment. Si cuanta con estos
tres elementos, es posible generar la relación.

Si la relación es valida, procede a buscar por cada Cluster y sus elementos contenidos los elementos
los elementos de inicio y fin que pueden ser el mismo cluster o un clusteredElement, si estos son
encontrado crea una instancia de Relationship y la agrega a la instancia XMI del metamodelo de 
visualizaciones.

Nota: Tenga presente que esto también implica la buscada sobre clases abstractas.
*/
operation processRelationships(){
	for(relation in allRelations){
		var sourceClassForQuery = getRefEndpointByRelationClass(relation,"source");
		var targetClassForQuery = getRefEndpointByRelationClass(relation,"target");
		var containerClassForQuery = getContainerFromRelationClass(relation);

		
		if(sourceClassForQuery <> null and targetClassForQuery<>null and containerClassForQuery<>null){
			for(cluster in system.elements){
				
				var allClusteredElements = getAllElementsFromCluster(cluster);
				
				var sourceElement = allClusteredElements.select(e|e.metaClass = sourceClassForQuery.eReferenceType.name).first();
				var targetElement = allClusteredElements.select(e|e.metaClass = targetClassForQuery.eReferenceType.name).first();
				var containerElement = allClusteredElements.select(e|e.metaClass = containerClassForQuery.name).first();
				
				var clusterClass = allClasses.select(c|c.name = cluster.metaClass).first();
				
				if(sourceElement==null){
					if(sourceClassForQuery.eReferenceType.name == cluster.metaClass or sourceClassForQuery.eReferenceType.isSuperTypeOf(clusterClass)){
						sourceElement = cluster;
					}
				}
				if(targetElement==null){
					if(targetClassForQuery.eReferenceType.name == cluster.metaClass  or targetClassForQuery.eReferenceType.isSuperTypeOf(clusterClass)){
						targetElement = cluster;
					}
				}
				if(containerElement==null){
					if(containerClassForQuery.name == cluster.metaClass){
						containerElement = cluster;
					}
					else{
						if(containerClassForQuery.name = cluster.domainClass){
							containerElement = allClasses.select(c|c.name = cluster.domainClass).first();
						}
					}
				}
				
				if(sourceClassForQuery <> null and targetClassForQuery <> null and containerClassForQuery <> null and sourceElement <> null and targetElement<>null and containerElement<>null){
					
					var relationship = new Data!Relationship();
					idR=idR+1;
					relationship.name = "R"+idR+"_"+relation.name;
					relationship.metaClass = relation.name;
					
					relationship.sourceEndQuery=sourceClassForQuery.name;
					relationship.targetEndQuery=targetClassForQuery.name;
					
					relationship.sourceEnd = sourceElement;
					relationship.targetEnd = targetElement; 
					
					var rquery = "";
					if(containerElement.eClass.name = "EClass"){
						var ref = containerElement.eAllReferences.select(r|r.eReferenceType = relation or r.eReferenceType.isSuperTypeOf(relation)).first();
						rquery = ref.name;
					}
					else{
						rquery = containerElement.elementsQuery;
						var ref = containerClassForQuery.eAllReferences.select(r|r.eReferenceType = relation or r.eReferenceType.isSuperTypeOf(relation)).first();
						rquery = rquery+"."+ref.name;					
					}
					relationship.relationsQuery =rquery;
					relationship.measurements = new List();
					addMeasureFromAnotationForRelations(relation,relationship);
					system.relations.add(relationship);
					cluster.innerRelationships.add(relationship);
				}
				else{
					if(sourceClassForQuery.eReferenceType.abstract or targetClassForQuery.eReferenceType.abstract){
						var sourceClasses = new List();
						var targetClasses = new List();
						
						if(sourceClassForQuery.eReferenceType.abstract){
							sourceClasses = allClasses.select(c|sourceClassForQuery.eReferenceType.isSuperTypeOf(c));
						}
						sourceClasses.add(sourceClassForQuery.eReferenceType);
						
						if(targetClassForQuery.eReferenceType.abstract){
							targetClasses = allClasses.select(c|sourceClassForQuery.eReferenceType.isSuperTypeOf(c));
						}
						targetClasses.add(sourceClassForQuery.eReferenceType);
						
						for(sourceClass in sourceClasses){
							for(targetClass in targetClasses){
								var sourceElement = allClusteredElements.select(e|e.metaClass = sourceClass.name).first();
								var targetElement = allClusteredElements.select(e|e.metaClass = targetClass.name).first();
								if(sourceElement <> null and targetElement <> null and containerElement <> null){
									var relationship = new Data!Relationship();
									idR=idR+1;
									relationship.name = "R"+idR+"_"+relation.name;
									relationship.metaClass = relation.name;
									
									relationship.sourceEndQuery=sourceClassForQuery.name;
									relationship.targetEndQuery=targetClassForQuery.name;
									
									relationship.sourceEnd = sourceElement;
									relationship.targetEnd = targetElement; 
									
									var rquery = "";
									if(containerElement.eClass.name = "EClass"){
										var ref = containerElement.eAllReferences.select(r|r.eReferenceType = relation or r.eReferenceType.isSuperTypeOf(relation)).first();
										rquery = ref.name;
									}
									else{
										rquery = containerElement.elementsQuery;
										var ref = containerClassForQuery.eAllReferences.select(r|r.eReferenceType = relation or r.eReferenceType.isSuperTypeOf(relation)).first();
										rquery = rquery+ref.name;					
									}
									relationship.relationsQuery =rquery;
									relationship.measurements = new List();
									addMeasureFromAnotationForRelations(relation,relationship);
									system.relations.add(relationship);
									cluster.innerRelationships.add(relationship);
								}
							}
						}
					}
				}
			}
		}
		
	}
}

/*
* Nombre: getRefEndpointByRelationClass
* Parametros: relationClass -> es la metaclase que fue anotada como relación, annotation -> es el tipo de anotación a buscar
* Descripción: 
Este metado se encarga de buscar en las referencias de la metaclase una que contenga el tipo de anotación requerido.
*/
operation getRefEndpointByRelationClass(relationClass : Input!EClass, annotation : String) : Input!EReference{
	var reference = relationClass.eAllReferences.select(r|r.getEAnnotation(annotation) <>null).first();
	return reference;
}

/*
* Nombre: getContainerFromRelationClass
* Parametros: relation -> es la metaclase que fue anotada como relación
* Descripción: 
Se encarga de buscar una clase que contenga una relación de tipo containment con el tipo de la relación ingresado.
*/
operation getContainerFromRelationClass(relation : Input!EClass) : Input!EClass{
	var container = allClasses.select(c|c.eAllReferences.select(r|r.containment = true and (r.eReferenceType = relation or r.eReferenceType.isSuperTypeOf(relation)=true)).size() > 0).first();
	return container;
}

/*
* Nombre: getAllElementsFromCluster
* Parametros: cluster -> Es un cluster del cual se quiere obtener sus elementos contenidos.
* Descripción: 
Este metado de encarga de buscar todos los elementos contenidos de un cluster, incluyendo aquellos
que se encuentran en Clusters contenidos.
*/
operation getAllElementsFromCluster(cluster : Data!Cluster){
	var elements = new List();
	for(el in cluster.clusteredElements){
		elements.add(el);
		if(el.eClass.name == "Cluster"){
			var temps = getAllElementsFromCluster(el);
			for(t in temps){
				elements.add(t);
			}
		}
	}
	return elements;
}

//-------------------------------------------------------------------
//	Lógica para Clusters
//-------------------------------------------------------------------

/*
* Nombre: processAllClusters
* Parametros: Ninguno
* Descripción: 
Este metodo se encarga de buscar todos las metaclases anotadas con @Cluster, de igual manera verifica
si el cluster encontrado es contenido por un elemento Raiz mediante un relación (Reference) de tipo containment, esto 
también implica buscar la clase terminar si dado el caso su referencia corresponde a una dada por una clase abstract o de la cual
herede.
Teniendo el domainClass y la referencia se puede generar un Cluster para visualización.
*/
operation processAllClusters(){
	var eClassesWithCluster = allClasses.select(c|c.getEAnnotation("Cluster") <>null);
	for(class in eClassesWithCluster){
		var domainClass= allClasses.select(c|c.eAllReferences.select(r|r.eReferenceType = class and r.containment = true).size()>0).first();
		var typeRef;
		if(domainClass==null){
			for(superClass in class.eAllSuperTypes){
				domainClass = allClasses.select(c|c.eAllReferences.select(r|r.eReferenceType = superClass and r.containment = true).size()>0).first();
				if(domainClass<>null){
					typeRef = domainClass.eAllReferences.select(r|r.eReferenceType = superClass and r.containment = true).first();
					break;
				}
			}
		}
		else{
			typeRef = domainClass.eAllReferences.select(r|r.eReferenceType = class and r.containment = true).first();
		}
		
		if(domainClass <> null and typeRef<>null){
			var cluster = generateCluster(class,typeRef.name);
			cluster.domainClass = domainClass.name;
			system.elements.add(cluster);
		}
		
	}
}

/*
* Nombre: generateCluster
* Parametros: class -> Es la metaclases anotada, reference -> es una cadena de texto con el nombre de la referencia requerida para acceder desde el elemento raiz del cluster.
* Descripción:
Este método se encarga de generar una instancia de un Cluster con base en la referencia que lo contiene y la información de la clase
anotada. A su vez, incluye sus elementos contenidos, inicializa las referencia asociadas al cluster y finalmente las metricas
que puedan derivarse de este.
*/
operation generateCluster(class : Input!EClass, reference : String) : Data!Cluster{
	id=id+1;
	var cluster = new Data!Cluster();
	cluster.id="cls_"+id;
	cluster.metaClass=class.name;
	cluster.label="Cluster - "+class.name;
	cluster.clusteredElements = new List();
	cluster.innerRelationships = new List();
	cluster.measurements = new List();
	cluster.elementsQuery = reference;
	
	getClusteredElements(class,cluster);
	addMeasureFromAnotation(class,cluster);
	return cluster;
}

/*
* Nombre: getClusteredElements
* Parametros: class -> es la clase del cluster, cluster -> es la data del cluster conforme al metamodelo de visualización.
* Descripción:
Este metodo busca las referencias anotada con @ClusteredElements dentro del Cluster para procesar cada una de ellas
de la siguiente forma: 1.) ejecuta un ciclo con todas la referencia anotadas, 2.) por cada referencia verifica que 
el tipo de Metaclase asociado es abstracto o no. 3.a.1) Si es abstracta, busca en todas las clases aquella que extiendan
de la metaclase buscada y cuente con algún tipo de anotación y que no sea abstracta. 3.a.2) Por cada clase terminal de
que extiende de la superclase se crea un representación como elemento contenido y se agrega al cluster.
3.b.1) Si dado el caso no es abstracta la metaclase de la referencia anotada, crea directamente la representación y lo agrega
al cluster como elemento contenido.
*/
operation getClusteredElements(class : Input!EClass, cluster : Data!Cluster){
	var references = class.eAllReferences.select(r|r.getEAnnotation("ClusteredElements") <>null);
	for(ref in references){
		var refClass = ref.eReferenceType;
		if(refClass.abstract){
			var eclasses = allClasses.select(c|ref.eReferenceType.isSuperTypeOf(c) = true and c.abstract = false and (c.getEAnnotation("ClusteredElement")<>null or c.getEAnnotation("Cluster")<>null));
			for(eclass in eclasses){
				var element = createRepresentation(eclass,cluster,ref);
				cluster.clusteredElements.add(element);
			}
		}
		else{
			var element = createRepresentation(refClass,cluster,ref);
			cluster.clusteredElements.add(element);
		}
	}
	return cluster;
}

/*
* Nombre: createRepresentation
* Parametros: class -> es la clase contenida dentro de un cluster, cluster -> es el cluster al cual pertenece,
ref -> es la referencia de la metaclase del cluster donde esta el elemento contenido asociado.

* Descripción:
El proceso de crear un elemento contenido de un cluster para su representación toma como base: 1.) verifica si
el cluster contenedor cuenta con una query asociada para incluirla dentro del query del elemento contenido.
2.) Se verifica si el elemento contenido es una Cluster, si es así es procesado como cluster. 3.) Si no es cluster,
se crea una instancia de ClusteredElement para su uso.
*/
operation createRepresentation(class : Input!EClass, cluster : Data!Cluster, ref : Input!EReference ) : Data!Element{
	var element;
	var rquery="";
	if(cluster.elementsQuery <> ""){
		rquery = cluster.elementsQuery+"."+ ref.name;
	}
	else{
		rquery = ref.name;
	}
	if(class.eAnnotations.select(c|c.source = "Cluster").size() > 0){		
			element = generateCluster(class,rquery);
			return element;
	}
	else{
		element = new Data!ClusteredElement();
		element.id="cle+"+id+"_"+class.name;
		element.metaClass=class.name;
		element.label="as Node - "+class.name;
		element.elementsQuery = rquery;	
		element.measurements = new List();
		addMeasureFromAnotation(class,element);
		return element;	
	}
}

// This method filter all EClass from an Abstract EClass for Endpoint.

/*
* Nombre: getEClassFromAbstractClass
* Parametro: abstractClass -> Es la clase abstracta frente a la cual se espera obtener las clases terminales anotadas.
* Descripción:
Este método busca dentro de los metaclases del modelo de arquitectura que hayan herado de la clase abstract referenciada.
*/
operation getEClassFromAbstractClass(abstractClass : Input!EClass) : List{
	var list = new List();
	for(class in allClasses){
		if(abstractClass.isSuperTypeOf(class)){
			if(class.eAnnotations.select(c|c.source = "Cluster" or c.source = "ClusteredElement").size() > 0){
				list.add(class);
			}			
		}
	}
	return list;
}

//-------------------------------------------------------------------
//	Lógica para Anotaciones
//-------------------------------------------------------------------

/*
* Nombre: addMeasureFromAnotation
* Parametro: class -> Es la metaclase que contiene la anotación, element -> Es un element del metamodelo de visualización que puede ser un Cluster o un ClusteredElement.
* Descripción: 
Este método se encarga de recibir una metaclase que contiene una anotación de tipo Cluster o ClusteredElement, a la cual se
evaluará si contiene definiciones en el interior de la anotación para metricas. Si es así, agregará al element
una configuración de métrica para modificar su característica visual en las vistas generadas.
*/
operation addMeasureFromAnotation(class : Input!EClass,element : Data!Element){
	var anotation = class.eAnnotations.select(a|a.source="Cluster" or a.source="ClusteredElement").first();
	if(anotation.details.size()>0){
		for(data in anotation.details){
			if(data.key.equals('size')){
				addMeasure(Data!VisualCharacteristic#SIZE,data.value,element);
			}
			if(data.key.equals('color')){
				addMeasure(Data!VisualCharacteristic#COLOR,data.value,element);
			}
			if(data.key.equals('label')){
				addMeasure(Data!VisualCharacteristic#LABEL,data.value,element);
			}
		}
	}
}

/*
* Nombre: addMeasureFromAnotationForRelations
* Parametro: class -> Es la metaclase que contiene la anotación, relationship -> Es una relación del metamodelo de visualización.
* Descripción: 
Este método se encarga de recibir una metaclase que contiene una anotación de tipo Relationship, a la cual se
evaluará si contiene definiciones en el interior de la anotación para metricas. Si es así, agregará a la relationship
una configuración de métrica para modificar su característica visual en las vistas generadas.
*/
operation addMeasureFromAnotationForRelations(class : Input!EClass,relationship : Data!Relationship){
	var anotation = class.eAnnotations.select(a|a.source="Relationship").first();
	if(anotation.details.size()>0){
		for(data in anotation.details){
			if(data.key.equals('size')){
				addMeasure(Data!VisualCharacteristic#SIZE,data.value,relationship);
			}
			if(data.key.equals('color')){
				addMeasure(Data!VisualCharacteristic#COLOR,data.value,relationship);
			}
			if(data.key.equals('label')){
				addMeasure(Data!VisualCharacteristic#LABEL,data.value,relationship);
			}
		}
	}
}

/*
* Nombre: addMeasure
* Parametro: type -> Es el tipo de característica visual a modificar, measureName -> Es el nombre de la métrica, visualElement-> Es un element o un relationship conforme al metamodelo de visualization.
* Descripción: 
Este método se encarga de recibir una metaclase que contiene una anotación de tipo Relationship, a la cual se
evaluará si contiene definiciones en el interior de la anotación para metricas. Si es así, agregará a la relationship
una configuración de métrica para modificar su característica visual en las vistas generadas.
*/
operation addMeasure(type , measureName : String, visualElement : Data!MeasurableElement){
	var measure = new Data!Measure();
	measure.visualCharacteristic = type;
	measure.measureName = measureName;
	visualElement.measurements.add(measure);
}
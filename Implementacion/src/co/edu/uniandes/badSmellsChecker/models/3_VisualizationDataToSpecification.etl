pre{
	"-------------------------".println();
	"Start Phase 3: Transformation - Visualization's Data to Visualization's Specification".println();
	"-------------------------".println();
	"1.) Get System Configuration".println();
}
post{
	"-------------------------".println();
	"End Phase 3".println();
	"-------------------------".println();	
}

//-------------------------------------------------------------------
//	Lógica para Navegación entre Diagramas.
//-------------------------------------------------------------------

operation addNavegationsMenus(){
	"3.) Add nagivations menus between diagramas in viewpoints".println();
	//Get All Diagrams
	var diagrams = new List();
	for(viewpoint in mainGroup.ownedViewpoints){
		for(diagram in viewpoint.ownedRepresentations){
			diagrams.add(diagram);
		}
	}
	for(mainDiagram in diagrams){
		for(subdiagram in diagrams){
			if(mainDiagram.name <> subdiagram.name){
				var candidates = getDiagramsWithDomainClass(mainDiagram,subdiagram);
				if(candidates.size()>0){
					var section = null;
					if(mainDiagram.defaultLayer.toolSections.size()>0){
						section = mainDiagram.defaultLayer.toolSections.first();
					}
					else{
						section = new Sirius!ToolSection();					
						mainDiagram.defaultLayer.toolSections = new List();
						mainDiagram.defaultLayer.toolSections.add(section);
						
						section.name = mainDiagram.name+"_menu";
						section.label = mainDiagram.label+" (Navegation Menu)";
						section.ownedTools = new List();
						
						var menu = new Sirius!PopupMenu();
						menu.name = mainDiagram.name+"_menu_popup";
						menu.label = "For Navegation between Diagrams";
						menu.menuItemDescription = new List();
						section.ownedTools.add(menu);
					}
					
					var menu = section.ownedTools.first();
					
					var operationAction = new Sirius!OperationAction();	
					menu.menuItemDescription.add(operationAction);
					
					operationAction.name = mainDiagram.name+"_menuItem";
					operationAction.label = "Go to "+subdiagram.label+" from this element";
					
					var navi = new Sirius!Navigation();
					navi.createIfNotExistent=true;
					navi.diagramDescription = subdiagram;
					
					var initialOperation = new Sirius!InitialOperation();
					initialOperation.FirstModelOperations = navi;
					
					operationAction.InitialOperation = initialOperation;
					
				}
			}	
		}
	}
}

operation getDiagramsWithDomainClass(mainDiagram : Sirius!DiagramDescription, subdiagram : Sirius!DiagramDescription) : List{
	var list = new List();
	for(node in mainDiagram.allNodeMappings){
		if(node.domainClass == subdiagram.domainClass){
			list.add(node);
		}
	}
	for(container in mainDiagram.allContainerMappings){
		if(container.domainClass == subdiagram.domainClass){
			list.add(container);
		}
		for(node in container.subNodeMappings){
			if(node.domainClass == subdiagram.domainClass){
				list.add(node);
			}
		}
	}
	return list;
}

//-------------------------------------------------------------------
//	Lógica para Métricas y Visualización.
//-------------------------------------------------------------------

// ------- For Ellipses ------
operation addEllipseStyleFromElementAndNode(element : Data!Element,node : Sirius!NodeMapping){
	if(element.measurements.size()>0){
		var size = element.measurements.select(m|m.visualCharacteristic = Data!VisualCharacteristic#SIZE);
		var color = element.measurements.select(m|m.visualCharacteristic = Data!VisualCharacteristic#COLOR);
		var label = element.measurements.select(m|m.visualCharacteristic = Data!VisualCharacteristic#LABEL);
		
		if((size.size()+color.size()+label.size())>0){
			if(size.size()>0 and color.size() >0 ){
				var labelMeasurement = null;
				if(label.size()>0){
					labelMeasurement = label.first();
				}
				setScaleColorFromMeasurementInEllipse(node,color.first(),size.first(),labelMeasurement);			
			}
			else if(size.size()>0 and color.size() == 0 ){
				var msm = size.first();
				var style = generateBasicEllipse();
				var finalQuery = getSizeQueryFromMeasurement(size.first());
				style.horizontalDiameterComputationExpression = finalQuery;
				style.verticalDiameterComputationExpression = finalQuery;
				var color = customColors.select(c|c.name = "simple_silver").first();
				style.color = color;
				node.style = style;
				if(label.size()>0){
					setLabel(label.first(),node);
				}
			}
			else if(size.size()==0 and color.size() >0 ){
				var labelMeasurement = null;
				if(label.size()>0){
					labelMeasurement = label.first();
				}
				setScaleColorFromMeasurementInEllipse(node,color.first(),null,labelMeasurement);
			}
			else{
				generateCommonEllipseStyle(node);
				if(label.size()>0){
					setLabel(label.first(),node);
				}
			}
		}
		else{
			generateCommonEllipseStyle(node);
		}
		
	}
	else{
		generateCommonEllipseStyle(node);
	}
}

operation generateBasicEllipse() : Sirius!EllipseNodeDescription{
	var style = new Sirius!EllipseNodeDescription();
	style.labelAlignment = Sirius!LabelAlignment#CENTER;
	style.labelPosition = Sirius!LabelPosition#node;
	style.resizeKind = Sirius!ResizeKind#NSEW;
	return style;
}

operation generateCommonEllipseStyle(node){
	var style = generateBasicEllipse();
	style.horizontalDiameterComputationExpression = "10";
	style.verticalDiameterComputationExpression = "10";
	var color = customColors.select(c|c.name = "simple_silver").first();
	style.color = color;
	node.style = style;
}

operation setLabel(label,node){
	node.style.labelExpression = generateQuery(label);
}

operation setLabelOnStyle(label,style){
	style.labelExpression = generateQuery(label);
}

operation generateQuery(label){
	var query = "MetricSystem.allInstances()->collect(measurements)->select(m|m.element = self and m.measure.name = '"+label.measureName+"')->asOrderedSet()->first().value.toString()";
	query = "[self.name.concat(' (').concat("+query+").concat(')') /]";
	return query;
}

// -TODO BIEN HASTA ACA

// ------- For Square -------
operation addSquareStyleFromElementAndNode(element : Data!Element,node : Sirius!NodeMapping){
	
	if(element.measurements.size()>0){
		
		var size = element.measurements.select(m|m.visualCharacteristic = Data!VisualCharacteristic#SIZE);
		var color = element.measurements.select(m|m.visualCharacteristic = Data!VisualCharacteristic#COLOR);
		var label = element.measurements.select(m|m.visualCharacteristic = Data!VisualCharacteristic#LABEL);
		if((size.size()+color.size()+label.size())>0){
			if(size.size()>0 and color.size() >0 ){
				var labelMeasurement = null;
				if(label.size()>0){
					labelMeasurement = label.first();
				}
				setScaleColorFromMeasurementInSquare(node,color.first(),size.first(),labelMeasurement);			
			}
			if(size.size()>0 and color.size() == 0 ){
				var style = generateBasicSquare();
				var finalQuery = getSizeQueryFromMeasurement(size.first());
				style.sizeComputationExpression = finalQuery;
				node.style = style;
				if(label.size()>0){
					setLabel(label.first(),node);
				}
			}
			if(size.size()==0 and color.size() >0){
				var labelMeasurement = null;
				if(label.size()>0){
					labelMeasurement = label.first();
				}
				setScaleColorFromMeasurementInSquare(node,color.first(),null,labelMeasurement);
			}			
		}
		else{
			generateCommonSquare(node);
			if(label.size()>0){
				setLabel(label.first(),node);
			}
		}
		
	}
	else{
		generateCommonSquare(node);
	}
}

operation setScaleColorFromMeasurementInSquare(node : Sirius!NodeMapping, colorMeasurement : Data!Measure, sizeMeasurement : Data!Measure, labelMeasurement : Data!Measure){
	node.conditionnalStyles = new List();
	var i = 1;
	var factor = 25;
	while(i <= 5){
		var conditional = new Sirius!ConditionalNodeStyleDescription();
		var colorQuery = generateColorQuery(colorMeasurement);
		var query = "[";
		if(i == 1){
			query = query+ colorQuery +" <= "+factor;
		}
		else if( i ==  5){
			query = query+colorQuery +" > "+factor;
		}
		else{
			var temp = factor * 2;
			query = query+colorQuery+" <= "+temp+" and "+colorQuery+" > "+factor;
			factor = temp;
		}
		query = query + " /]";
		conditional.predicateExpression = query;
		
		var style = generateBasicSquare();
		if(sizeMeasurement <> null){
			var finalQuery = getSizeQueryFromMeasurement(sizeMeasurement);
			style.sizeComputationExpression = finalQuery;
		}
		else{
			style.sizeComputationExpression = "10";
		}
		if(labelMeasurement<>null){
			setLabelOnStyle(labelMeasurement,style);
		}
		var color = customColors.select(c|c.name=("scale"+i)).first();
		style.color = color;
		conditional.style = style;
		node.conditionnalStyles.add(conditional);
		i = i + 1;
	}
}

operation generateBasicSquare() : Sirius!SquareDescription{
	var square = new Sirius!SquareDescription();
	square.height = 0;
	square.width = 0;
	var color = customColors.select(c|c.name='simple_yellow').first();
	square.color = color;
	square.labelAlignment = Sirius!LabelAlignment#CENTER;
	square.labelPosition = Sirius!LabelPosition#node;
	square.resizeKind = Sirius!ResizeKind#NSEW;
	return square;
}

operation generateCommonSquare(node : Sirius!NodeMapping){
	var style = generateBasicSquare();
	style.sizeComputationExpression = "10";
	var color = customColors.select(c|c.name = "simple_silver").first();
	style.color = color;
	node.style = style;
}

// ------- For Edge -------
operation addEdgeStyleFromRelationship(relationship : Data!Relationship, edge : Sirius!EdgeMapping){
	
	if(relationship.measurements.size()>0){
		
		var size = relationship.measurements.select(m|m.visualCharacteristic = Data!VisualCharacteristic#SIZE);
		var color = relationship.measurements.select(m|m.visualCharacteristic = Data!VisualCharacteristic#COLOR);
		var label = relationship.measurements.select(m|m.visualCharacteristic = Data!VisualCharacteristic#LABEL);
		
		if((size.size()+color.size()+label.size())>0){
			if(size.size()>0 and color.size() >0 ){
				setScaleColorFromMeasurementInEdge(node,color.first(),size.first());			
			}
			if(size.size()>0 and color.size() == 0 ){
				var style = generateBasicEdge();
				var finalQuery = getSizeQueryFromMeasurementInEdge(size.first());
				style.sizeComputationExpression = finalQuery;
				edge.style = style;
				
			}
			if(size.size()==0 and color.size() >0 ){
				setScaleColorFromMeasurementInEdge(edge,color.first(),null);
			}
			
			if(label.size()>0){
				addLabelToEdge(edge.style,label.first());
			}
		}
		else{
			var style = generateBasicEdge();
			edge.style = style;
		}
	}
	else{
		var style = generateBasicEdge();
		edge.style = style;
	}
}

operation setScaleColorFromMeasurementInEdge(node : Sirius!EdgeMapping, colorMeasurement : Data!Measure, sizeMeasurement : Data!Measure){
	node.conditionnalStyles = new List();
	var i = 1;
	var factor = 15;
	while(i <= 5){
		var conditional = new Sirius!ConditionalEdgeStyleDescription();
		var colorQuery = "(MetricSystem.allInstances()->collect(measurements)->select(m|m.measure.name = '"+colorMeasurement.measureName+"' and m.element = self)->asOrderedSet()->first().value).floor()";
		var query = "[";
		if(i == 1){
			query = query+ colorQuery +" <= "+factor;
		}
		else if( i ==  5){
			query = query+colorQuery +" > "+factor;
		}
		else{
			var temp = factor * 2;
			query = query+colorQuery+" <= "+temp+" and "+colorQuery+" > "+factor;
			factor = temp;
		}
		query = query + " /]";
		conditional.predicateExpression = query;
		
		var style = generateBasicEdge();
		if(sizeMeasurement <> null){
			var finalQuery = getSizeQueryFromMeasurementInEdge(size.first());
			style.sizeComputationExpression = finalQuery;
		}
		else{
			style.sizeComputationExpression = "1";
		}
		var color = customColors.select(c|c.name=("scale"+i)).first();
		style.strokeColor = color;
		conditional.style = style;
		node.conditionnalStyles.add(conditional);
		i = i + 1;
	}
}

operation generateBasicEdge() : Sirius!EdgeStyleDescription{
	return new Sirius!EdgeStyleDescription();
}

operation addLabelToEdge(style : Sirius!EdgeStyleDescription,labelMeasurement : Data!Measure){
	var label = new Sirius!CenterLabelStyleDescription();
	label.labelExpression = "[ MetricSystem.allInstances()->collect(measurements)->select(m|m.measure.name = '"+labelMeasurement.measureName+"' and m.element = self)->asOrderedSet()->first().value /]";
	style.centerLabelStyleDescription = label;
}
// ------- Share Methods ------
operation setStandarColorFromMeasurement(style, measurement : Data!Measure) {
	var color = customColors.select(c|c.name=measurement.query).first();
	if(color <> null){
		style.color = color;
	}
	else{
		var color = customColors.select(c|c.name='simple_silver').first();
		style.color = color;
	}	
}

operation getSizeQueryFromMeasurement(measurement : Data!Measure) : String{
	return "[ MetricSystem.allInstances()->collect(measurements)->select(m|m.measure.name = '"+measurement.measureName+"' and m.element = self)->asOrderedSet()->first().value.floor() + 5/]";
}

operation getSizeQueryFromMeasurementInEdge(measurement : Data!Measure) : String{
	return "[ MetricSystem.allInstances()->collect(measurements)->select(m|m.measure.name = '"+measurement.measureName+"' and m.element = self)->asOrderedSet()->first().value.floor() /]";
}

operation generateColorQuery(colorMeasurement : Data!Measure) : String{
	return "(MetricSystem.allInstances()->collect(measurements)->select(m|m.measure.name = '"+colorMeasurement.measureName+"' and m.element = self)->asOrderedSet()->first().value).floor()";
}

//-------------------------------------------------------------------
//	Lógica para Generación de Diagramas
//-------------------------------------------------------------------

/*
* Nombre: processMainClusters
* Parametros: Ninguno
* Descripción: 
Este método esta configurador para procesar todos los clusters del sistema.

Por cada uno de ellos se encarga de:
1.) Crear un Viewpoint
2.) Generar un diagrama de tipo 1: Vista de Clusters
3.) Generar un diagrama de tipo 2: Vista de Elementos Contenidos.
4.) Generar un diagrama de tipo 4: Vista de Clusters y Elementos Contenidos
5.) Asociar el metamodelo a cada diagrama.
6.) Agregar el Viewpoint a la Especificación del Sirius.
*/
operation processMainClusters(){
	"2.) Generate 'Viewpoint' per cluster".println();
	for(cluster in system.elements){
		
		// --> Step 1: Creating 'Viewpoint'
		var viewpoint = new Sirius!Viewpoint();
		viewpoint.name="VP_"+cluster.id;
		viewpoint.label="Viewpoints for Cluster "+cluster.metaClass;
		viewpoint.modelFileExtension = "*";
		viewpoint.ownedRepresentations = new List();
		
		//--> Step 2: Creating 'Global Clusters Diagram' (Type 1)"
		generateDiagramType1(cluster,viewpoint);
		
		//--> Step 3: Creating 'Global Clustered Elements Diagram' (Type 2)"
		generateDiagramType2(cluster,viewpoint);
		
		//--> Step 4: Creating 'Global Clusters and Clustered Elements Diagram(Mixed)' (Type 3)"
		generateDiagramType3(cluster,viewpoint);
		
		addMetamodelInformation(viewpoint);
		mainGroup.ownedViewpoints.add(viewpoint);
	}
}

operation addMetamodelInformation(viewpoint : Sirius!Viewpoint){
	var principal :=emfTool.getEPackage(system.metaPackage.nsURI);
	for(diagram in viewpoint.ownedRepresentations){
		diagram.metamodel = new List();
		if(principal.eClassifiers.size()>0){
			diagram.metamodel.add(principal);
		}
		diagram.metamodel.add(principal);
		for(package in principal.eSubpackages){
			diagram.metamodel.add(package);
		}
	}
}

/*
* Nombre: generateDiagramType1
* Parametros: cluster -> cluster del cual se genera el diagrama, viewpoint -> es el Viewpoint al cual pertene el diagrama.
* Descripción: 
Este método se encarga de crear un diagrama de tipo 1, el cual se procesa de la siguiente forma:
1.) Se crea una instancia del tipo DiagramDescription.
2.) Se crea una instancia del tipo Layer para el diagram
3.) Se crea una representación de tipo NodeMapping
4.) Se agregar un estilo de representación de tipo Elipse.
5.) Se agrega el nodo de representado la Layer del diagrama.
6.) Se obtienen la relaciones pertenencientes al diagrama
7.) Se filtran las relaciones que sean validas al nivel o dominio de diagrama.
8.) Se crean una representación de tipo EdgeDescription.
9.) Se agrega al EdgeDescription un estilo.
10.) Agrega cada EdgeDescription generado al Layer asociado al diagrama.
11.) Finaliza con agregar el diagrama al viewpoint.
*/
operation generateDiagramType1(cluster : Data!Cluster, viewpoint : Sirius!Viewpoint){

	// Create Diagram
	var diagram = new Sirius!DiagramDescription();
	diagram.name = "DT1_For"+cluster.metaClass;
	diagram.label = "Clusters for "+cluster.metaClass;
	diagram.domainClass=cluster.domainClass;
	// create a layer for the diagram
	var defaultLayer = new Sirius!Layer();
	defaultLayer.name="Default";
	defaultLayer.label="Default";
	defaultLayer.nodeMappings = new List();
	defaultLayer.edgeMappings = new List();
	defaultLayer.containerMappings = new List();
	diagram.defaultLayer = defaultLayer;
	
	// Create a representation for the cluster
	var eNode = new Sirius!NodeMapping();
	eNode.name = "DT1_Cluster"+cluster.id;
	eNode.label = cluster.label;
	eNode.domainClass = cluster.metaClass;
	eNode.semanticCandidatesExpression = "[ self."+cluster.elementsQuery+" /]";

	addEllipseStyleFromElementAndNode(cluster,eNode);
	diagram.defaultLayer.nodeMappings.add(eNode);
	
	var relationsFilter = cluster.innerRelationships.select(r|r.sourceEnd = cluster and r.targetEnd = cluster);
	
	for(cls in system.elements){
		if(cls.domainClass == cluster.domainClass  and cls.metaClass <> cluster.metaClass and cls.id <> cluster.id){
			var clsRelations = cls.innerRelationships.select(r|r.sourceEnd.metaClass = cluster.metaClass and r.targetEnd.metaClass = cluster.metaClass);
			for(clsR in clsRelations){
				relationsFilter.add(clsR);
			}
		}	
	}

	for(relation in relationsFilter){
		var edge = new Sirius!EdgeMapping();
		edge.sourceMapping = new List();
		edge.targetMapping = new List();
		edge.name = "DT1_Relation_"+relation.name;
		edge.label = relation.name;
		edge.semanticCandidatesExpression = "[ self."+relation.relationsQuery+" /]";
		edge.useDomainElement=true;
		edge.domainClass=relation.metaClass;
		edge.sourceFinderExpression = "feature:"+relation.sourceEndQuery;
		edge.targetFinderExpression = "feature:"+relation.targetEndQuery;	
		//edge.style = new Sirius!EdgeStyleDescription();
		edge.sourceMapping.add(eNode);
		edge.targetMapping.add(eNode);
		addEdgeStyleFromRelationship(relation, edge);
		diagram.defaultLayer.edgeMappings.add(edge);	
	}
	viewpoint.ownedRepresentations.add(diagram);
}

operation generateDiagramType2(cluster : Data!Cluster, viewpoint : Sirius!Viewpoint){
	// Create Diagram
	var diagram = new Sirius!DiagramDescription();
	diagram.name = "DT2_For"+cluster.metaClass;
	diagram.label = "Clustered Elements for "+cluster.metaClass;
	diagram.domainClass=cluster.domainClass;
	// create a layer for the diagram
	var defaultLayer = new Sirius!Layer();
	defaultLayer.name="Default";
	defaultLayer.label="Default";
	defaultLayer.nodeMappings = new List();
	defaultLayer.edgeMappings = new List();
	defaultLayer.containerMappings = new List();
	diagram.defaultLayer = defaultLayer;
	
	for(element in cluster.clusteredElements){
		// Create a representation for the cluster
		var eNode = new Sirius!NodeMapping();
		eNode.name = "DT2_Element"+element.id;
		eNode.label = element.label;
		eNode.domainClass = element.metaClass;
		eNode.semanticCandidatesExpression = "[ self."+element.elementsQuery+" /]";

		addSquareStyleFromElementAndNode(element,eNode);
		diagram.defaultLayer.nodeMappings.add(eNode);
	}
	
	for(relation in cluster.innerRelationships){
		var sNode = diagram.defaultLayer.nodeMappings.select(n|n.domainClass = relation.sourceEnd.metaClass).first();
		var sTarget = diagram.defaultLayer.nodeMappings.select(n|n.domainClass = relation.targetEnd.metaClass).first();
		if(sNode <> null and sTarget<>null){
			var edge = new Sirius!EdgeMapping();
			edge.sourceMapping = new List();
			edge.targetMapping = new List();
			edge.name = "DT2_Relation_"+relation.name;
			edge.label = relation.name;
			edge.semanticCandidatesExpression = "[ self."+relation.relationsQuery+" /]";
			edge.useDomainElement=true;
			edge.domainClass=relation.metaClass;
			edge.sourceFinderExpression = "feature:"+relation.sourceEndQuery;
			edge.targetFinderExpression = "feature:"+relation.targetEndQuery;	
			edge.style = new Sirius!EdgeStyleDescription();
			edge.sourceMapping.add(sNode);
			edge.targetMapping.add(sTarget);
			diagram.defaultLayer.edgeMappings.add(edge);	
		}
	}
	
	viewpoint.ownedRepresentations.add(diagram);
}

operation generateDiagramType3(cluster : Data!Cluster, viewpoint : Sirius!Viewpoint){
	
	// Create Diagram
	var diagram = new Sirius!DiagramDescription();
	diagram.name = "DT3_For"+cluster.metaClass;
	diagram.label = "Clusters and Clustered Elements for "+cluster.metaClass;
	diagram.domainClass=cluster.domainClass;
	// create a layer for the diagram
	var defaultLayer = new Sirius!Layer();
	defaultLayer.name="Default";
	defaultLayer.label="Default";
	defaultLayer.nodeMappings = new List();
	defaultLayer.edgeMappings = new List();
	defaultLayer.containerMappings = new List();
	diagram.defaultLayer = defaultLayer;
	// Generate a TreeLayout 
	var treeLayout = new Sirius!OrderedTreeLayout();
	treeLayout.nodeMapping = new List();
	diagram.Layout = treeLayout;
	
	// Create a Container for the cluster 
	var container = new Sirius!ContainerMapping();
	container.name = "DT3_Container_"+cluster.metaClass;
	container.label = cluster.label;
	container.domainClass = cluster.metaClass;
	container.semanticCandidatesExpression = "[ self."+cluster.elementsQuery+" /]";
	container.subNodeMappings = new List();
	
	// Set a WorkspaceImageDescription as container's style
	var nodeStyle = new Sirius!WorkspaceImageDescription();
	nodeStyle.labelAlignment = Sirius!LabelAlignment#CENTER;
	nodeStyle.labelPosition = Sirius!LabelPosition#border;
	nodeStyle.resizeKind = Sirius!ResizeKind#NONE;
	
	var dgreen = Sirius!SystemColor.allInstances().select(c|c.name='dark_green').first();
	var black = Sirius!SystemColor.allInstances().select(c|c.name='black').first();
	nodeStyle.borderColor = dgreen;
	nodeStyle.borderSizeComputationExpression = "2";
	nodeStyle.labelColor = black;
	nodeStyle.borderLineStyle = Sirius!LineStyle#solid;
	container.style = nodeStyle;
	
	// Add container to the diagram
	diagram.defaultLayer.containerMappings.add(container);
	
	// Add Container to the TreeLayout
	treeLayout.nodeMapping.add(container);
	
	for(element in cluster.clusteredElements){
		var eNode = new Sirius!NodeMapping();
		eNode.name = "DT3_Node_"+element.metaClass;
		eNode.label = element.label;
		eNode.domainClass = element.metaClass;
		eNode.semanticCandidatesExpression = "[self."+element.elementsQuery.replace(cluster.elementsQuery+".","")+" /]";

		addSquareStyleFromElementAndNode(element,eNode);
		container.subNodeMappings.add(eNode);
		treeLayout.nodeMapping.add(eNode);
	}
	
	for(relation in cluster.innerRelationships){
		var sNode = treeLayout.nodeMapping.select(n|n.domainClass = relation.sourceEnd.metaClass).first();
		var sTarget = treeLayout.nodeMapping.select(n|n.domainClass = relation.targetEnd.metaClass).first();
		if(sNode <> null and sTarget<>null){
			var edge = new Sirius!EdgeMapping();
			edge.sourceMapping = new List();
			edge.targetMapping = new List();
			edge.name = "DT2_Relation_"+relation.name;
			edge.label = relation.name;
			edge.semanticCandidatesExpression = "[ self."+relation.relationsQuery+" /]";
			edge.useDomainElement=true;
			edge.domainClass=relation.metaClass;
			edge.sourceFinderExpression = "feature:"+relation.sourceEndQuery;
			edge.targetFinderExpression = "feature:"+relation.targetEndQuery;	
			edge.style = new Sirius!EdgeStyleDescription();
			edge.sourceMapping.add(sNode);
			edge.targetMapping.add(sTarget);
			diagram.defaultLayer.edgeMappings.add(edge);
		}
	}
	
	viewpoint.ownedRepresentations.add(diagram);
}

operation setScaleColorFromMeasurementInEllipse(node : Sirius!NodeMapping, colorMeasurement : Data!Measure, sizeMeasurement : Data!Measure,labelMeasurement : Data!Measure){
	node.conditionnalStyles = new List();
	var i = 1;
	var factor = 15;
	while(i <= 5){
		var conditional = new Sirius!ConditionalNodeStyleDescription();
		var colorQuery = generateColorQuery(colorMeasurement);
		var query = "[";
		if(i == 1){
			query = query+ colorQuery +" <= "+factor;
		}
		else if( i ==  5){
			query = query+colorQuery +" > "+factor;
		}
		else{
			var temp = factor * 2;
			query = query+colorQuery+" <= "+temp+" and "+colorQuery+" > "+factor;
			factor = temp;
		}
		query = query + " /]";
		conditional.predicateExpression = query;
		
		var style = generateBasicEllipse();
		if(sizeMeasurement <> null){
			var finalQuery = getSizeQueryFromMeasurement(sizeMeasurement);
			style.horizontalDiameterComputationExpression = finalQuery;
			style.verticalDiameterComputationExpression = finalQuery;
		}
		else{
			style.horizontalDiameterComputationExpression = "10";
		    style.verticalDiameterComputationExpression = "10";
		}
		if(labelMeasurement<>null){
			setLabelOnStyle(labelMeasurement,style);
		}
		var color = customColors.select(c|c.name=("scale"+i)).first();
		style.color = color;
		conditional.style = style;
		node.conditionnalStyles.add(conditional);
		i = i + 1;
	}
}

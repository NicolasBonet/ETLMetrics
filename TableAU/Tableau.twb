<?xml version='1.0' encoding='utf-8' ?>

<!-- build 10200.17.0328.0755                               -->
<workbook source-build='10.2.1 (10200.17.0328.0755)' source-platform='mac' version='10.2' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='10.2'>
      <aliases enabled='yes' />
      <column caption='Top Customers' datatype='integer' name='[Parameter 1]' param-domain-type='range' role='measure' type='quantitative' value='5'>
        <calculation class='tableau' formula='5' />
        <range granularity='5' max='20' min='5' />
      </column>
      <column caption='Profit Bin Size' datatype='integer' name='[Parameter 2]' param-domain-type='range' role='measure' type='quantitative' value='200'>
        <calculation class='tableau' formula='200' />
        <range granularity='50' max='200' min='50' />
      </column>
    </datasource>
    <datasource caption='correlaciones' inline='true' name='federated.03mxiqb0z0dw1412o3fu10pf8478' version='10.2'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='correlaciones' name='textscan.1ug8as2184hmn5194imum1gonty4'>
            <connection class='textscan' directory='/Users/nicolas/Desktop' filename='correlaciones.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.1ug8as2184hmn5194imum1gonty4' name='correlaciones.csv' table='[correlaciones#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='es_CO' separator='.' text-qualifier=''>
            <column datatype='string' name='&quot;LOC&quot;,&quot;Bad Smells&quot;,&quot;Density&quot;,&quot;Rules&quot;,&quot;Matched Rules&quot;,&quot;Lazy&quot;,&quot;OWC&quot;,&quot;ONC&quot;,&quot;IF&quot;,&quot;Iterators&quot;,&quot;Selfs&quot;,&quot;Variables per rule&quot;,&quot;Calls to' ordinal='0' />
            <column datatype='string' name='&quot;,&quot;2: Non-conventional names for rules and operations' ordinal='1' />
            <column datatype='string' name='&quot;,&quot;3: Duplicated and complex OCL expressions&quot;,&quot;4: Trivial operation called once&quot;,&quot;5: Rule body is embedded into if blocks&quot;,&quot;6: ' ordinal='2' />
            <column datatype='string' name='F4' ordinal='3' />
            <column datatype='string' name='F5' ordinal='4' />
            <column datatype='string' name='F6' ordinal='5' />
            <column datatype='string' name='F7' ordinal='6' />
            <column datatype='string' name='F8' ordinal='7' />
            <column datatype='string' name='F9' ordinal='8' />
            <column datatype='string' name='F10' ordinal='9' />
            <column datatype='string' name='F11' ordinal='10' />
            <column datatype='string' name='F12' ordinal='11' />
            <column datatype='string' name='F13' ordinal='12' />
            <column datatype='string' name='F14' ordinal='13' />
            <column datatype='string' name='F15' ordinal='14' />
            <column datatype='string' name='F16' ordinal='15' />
            <column datatype='string' name='F17' ordinal='16' />
            <column datatype='string' name='F18' ordinal='17' />
            <column datatype='string' name='F19' ordinal='18' />
            <column datatype='string' name='F20' ordinal='19' />
            <column datatype='string' name='F21' ordinal='20' />
            <column datatype='string' name='F22' ordinal='21' />
            <column datatype='string' name='F23' ordinal='22' />
            <column datatype='string' name='F24' ordinal='23' />
            <column datatype='string' name='F25' ordinal='24' />
            <column datatype='real' name='F26' ordinal='25' />
            <column datatype='integer' name='F27' ordinal='26' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>&quot;LOC&quot;,&quot;Bad Smells&quot;,&quot;Density&quot;,&quot;Rules&quot;,&quot;Matched Rules&quot;,&quot;Lazy&quot;,&quot;OWC&quot;,&quot;ONC&quot;,&quot;IF&quot;,&quot;Iterators&quot;,&quot;Selfs&quot;,&quot;Variables per rule&quot;,&quot;Calls to</remote-name>
            <remote-type>129</remote-type>
            <local-name>[&quot;LOC&quot;,&quot;Bad Smells&quot;,&quot;Density&quot;,&quot;Rules&quot;,&quot;Matched Rules&quot;,&quot;Lazy&quot;,&quot;OWC&quot;,&quot;ONC&quot;,&quot;IF&quot;,&quot;Iterators&quot;,&quot;Selfs&quot;,&quot;Variables per rule&quot;,&quot;Calls to]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>&quot;LOC&quot;,&quot;Bad Smells&quot;,&quot;Density&quot;,&quot;Rules&quot;,&quot;Matched Rules&quot;,&quot;Lazy&quot;,&quot;OWC&quot;,&quot;ONC&quot;,&quot;IF&quot;,&quot;Iterators&quot;,&quot;Selfs&quot;,&quot;Variables per rule&quot;,&quot;Calls to</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LES_RES' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>&quot;,&quot;2: Non-conventional names for rules and operations</remote-name>
            <remote-type>129</remote-type>
            <local-name>[&quot;,&quot;2: Non-conventional names for rules and operations]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>&quot;,&quot;2: Non-conventional names for rules and operations</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LES_RES' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>&quot;,&quot;3: Duplicated and complex OCL expressions&quot;,&quot;4: Trivial operation called once&quot;,&quot;5: Rule body is embedded into if blocks&quot;,&quot;6: </remote-name>
            <remote-type>129</remote-type>
            <local-name>[&quot;,&quot;3: Duplicated and complex OCL expressions&quot;,&quot;4: Trivial operation called once&quot;,&quot;5: Rule body is embedded into if blocks&quot;,&quot;6: ]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>&quot;,&quot;3: Duplicated and complex OCL expressions&quot;,&quot;4: Trivial operation called once&quot;,&quot;5: Rule body is embedded into if blocks&quot;,&quot;6: </remote-alias>
            <ordinal>2</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LES_RES' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F4</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F4]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>F4</remote-alias>
            <ordinal>3</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LES_RES' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F5</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F5]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>F5</remote-alias>
            <ordinal>4</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LES_RES' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F6</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F6]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>F6</remote-alias>
            <ordinal>5</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LES_RES' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F7</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F7]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>F7</remote-alias>
            <ordinal>6</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LES_RES' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F8</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F8]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>F8</remote-alias>
            <ordinal>7</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LES_RES' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F9</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F9]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>F9</remote-alias>
            <ordinal>8</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LES_RES' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F10</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F10]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>F10</remote-alias>
            <ordinal>9</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LES_RES' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F11</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F11]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>F11</remote-alias>
            <ordinal>10</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LES_RES' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F12</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F12]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>F12</remote-alias>
            <ordinal>11</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LES_RES' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F13</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F13]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>F13</remote-alias>
            <ordinal>12</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LES_RES' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F14</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F14]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>F14</remote-alias>
            <ordinal>13</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LES_RES' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F15</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F15]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>F15</remote-alias>
            <ordinal>14</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LES_RES' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F16</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F16]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>F16</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LES_RES' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F17</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F17]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>F17</remote-alias>
            <ordinal>16</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LES_RES' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F18</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F18]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>F18</remote-alias>
            <ordinal>17</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LES_RES' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F19</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F19]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>F19</remote-alias>
            <ordinal>18</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LES_RES' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F20</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F20]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>F20</remote-alias>
            <ordinal>19</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LES_RES' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F21</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F21]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>F21</remote-alias>
            <ordinal>20</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LES_RES' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F22</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F22]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>F22</remote-alias>
            <ordinal>21</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LES_RES' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F23</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F23]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>F23</remote-alias>
            <ordinal>22</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LES_RES' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F24</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F24]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>F24</remote-alias>
            <ordinal>23</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LES_RES' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F25</remote-name>
            <remote-type>129</remote-type>
            <local-name>[F25]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>F25</remote-alias>
            <ordinal>24</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LES_RES' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteCollation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='DebugRemoteMetadata (compression)'>&quot;heap&quot;</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>4294967292</attribute>
              <attribute datatype='integer' name='DebugRemoteMetadata (storagewidth)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;str&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F26</remote-name>
            <remote-type>5</remote-type>
            <local-name>[F26]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>F26</remote-alias>
            <ordinal>25</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;double&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F27</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F27]</local-name>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias>F27</remote-alias>
            <ordinal>26</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='DebugRemoteMetadata (size)'>8</attribute>
              <attribute datatype='string' name='DebugRemoteType'>&quot;sint64&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[correlaciones.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;es&quot;</attribute>
              <attribute datatype='string' name='debit-close-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='debit-open-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='decimal-char'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;.&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;es_CO&quot;</attribute>
              <attribute datatype='string' name='quote-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
              <attribute datatype='string' name='thousands-char'>&quot;.&quot;</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='&quot;,&quot;3: Duplicated and complex OCL expressions&quot;,&quot;4: Trivial operation called once&quot;,&quot;5: Rule body is embedded into if blocks&quot;,&quot;6:' datatype='string' name='[&quot;,&quot;3: Duplicated and complex OCL expressions&quot;,&quot;4: Trivial operation called once&quot;,&quot;5: Rule body is embedded into if blocks&quot;,&quot;6: ]' role='dimension' type='nominal' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <layout dim-ordering='alphabetic' dim-percentage='0.760911' measure-ordering='alphabetic' measure-percentage='0.159393' parameter-percentage='0.0796964' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Colombia&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
    <datasource caption='datos' inline='true' name='federated.0m9q5y71o1y1i20zx0q960h69akv' version='10.2'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='datos' name='excel-direct.0gevgvz0gppqle1f2auo80pc1wwa'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='/Users/nicolas/Desktop/report.xls' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.0gevgvz0gppqle1f2auo80pc1wwa' name='Datos' table='[Datos$]' type='table'>
          <columns gridOrigin='A1:AB287:no:A1:AB287:0' header='yes' outcome='6'>
            <column datatype='string' name='F1' ordinal='0' />
            <column datatype='string' name='Categoria' ordinal='1' />
            <column datatype='integer' name='LOC' ordinal='2' />
            <column datatype='integer' name='Bad Smells' ordinal='3' />
            <column datatype='real' name='Density' ordinal='4' />
            <column datatype='integer' name='Rules' ordinal='5' />
            <column datatype='integer' name='Matched Rules' ordinal='6' />
            <column datatype='integer' name='Lazy' ordinal='7' />
            <column datatype='integer' name='OWC' ordinal='8' />
            <column datatype='integer' name='ONC' ordinal='9' />
            <column datatype='integer' name='IF' ordinal='10' />
            <column datatype='integer' name='Iterators' ordinal='11' />
            <column datatype='integer' name='Selfs' ordinal='12' />
            <column datatype='real' name='Variables per rule' ordinal='13' />
            <column datatype='integer' name='Calls to operations per rule' ordinal='14' />
            <column datatype='integer' name='Call to lazy per rule' ordinal='15' />
            <column datatype='integer' name='Unused operations' ordinal='16' />
            <column datatype='integer' name='Unused parameters' ordinal='17' />
            <column datatype='integer' name='1: Non-conventional names for from/to elements of rules.' ordinal='18' />
            <column datatype='integer' name='2: Non-conventional names for rules and operations.' ordinal='19' />
            <column datatype='integer' name='3: Duplicated and complex OCL expressions' ordinal='20' />
            <column datatype='integer' name='4: Trivial operation called once' ordinal='21' />
            <column datatype='integer' name='5: Rule body is embedded into if blocks' ordinal='22' />
            <column datatype='integer' name='6: Target metamodel attribute set in multiple bindings' ordinal='23' />
            <column datatype='integer' name='7: If statements embedded into a for are less efficient than OCL filters' ordinal='24' />
            <column datatype='integer' name='8: Creation of new elements done on loops' ordinal='25' />
            <column datatype='integer' name='9: Nested if/else chains should be replaced with switch' ordinal='26' />
            <column datatype='integer' name='10: A chain of select/first in OCL is less efficient than using selectFirst' ordinal='27' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>130</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LES_RCO_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Categoria</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Categoria]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>Categoria</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LES_RCO_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LOC</remote-name>
            <remote-type>20</remote-type>
            <local-name>[LOC]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>LOC</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Bad Smells</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Bad Smells]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>Bad Smells</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Density</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Density]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>Density</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Rules</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Rules]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>Rules</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Matched Rules</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Matched Rules]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>Matched Rules</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Lazy</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Lazy]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>Lazy</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>OWC</remote-name>
            <remote-type>20</remote-type>
            <local-name>[OWC]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>OWC</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ONC</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ONC]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>ONC</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>IF</remote-name>
            <remote-type>20</remote-type>
            <local-name>[IF]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>IF</remote-alias>
            <ordinal>10</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Iterators</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Iterators]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>Iterators</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Selfs</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Selfs]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>Selfs</remote-alias>
            <ordinal>12</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Variables per rule</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Variables per rule]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>Variables per rule</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Calls to operations per rule</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Calls to operations per rule]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>Calls to operations per rule</remote-alias>
            <ordinal>14</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Call to lazy per rule</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Call to lazy per rule]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>Call to lazy per rule</remote-alias>
            <ordinal>15</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Unused operations</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Unused operations]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>Unused operations</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Unused parameters</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Unused parameters]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>Unused parameters</remote-alias>
            <ordinal>17</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1: Non-conventional names for from/to elements of rules.</remote-name>
            <remote-type>20</remote-type>
            <local-name>[1: Non-conventional names for from/to elements of rules.]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>1: Non-conventional names for from/to elements of rules.</remote-alias>
            <ordinal>18</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2: Non-conventional names for rules and operations.</remote-name>
            <remote-type>20</remote-type>
            <local-name>[2: Non-conventional names for rules and operations.]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>2: Non-conventional names for rules and operations.</remote-alias>
            <ordinal>19</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>3: Duplicated and complex OCL expressions</remote-name>
            <remote-type>20</remote-type>
            <local-name>[3: Duplicated and complex OCL expressions]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>3: Duplicated and complex OCL expressions</remote-alias>
            <ordinal>20</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>4: Trivial operation called once</remote-name>
            <remote-type>20</remote-type>
            <local-name>[4: Trivial operation called once]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>4: Trivial operation called once</remote-alias>
            <ordinal>21</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>5: Rule body is embedded into if blocks</remote-name>
            <remote-type>20</remote-type>
            <local-name>[5: Rule body is embedded into if blocks]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>5: Rule body is embedded into if blocks</remote-alias>
            <ordinal>22</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>6: Target metamodel attribute set in multiple bindings</remote-name>
            <remote-type>20</remote-type>
            <local-name>[6: Target metamodel attribute set in multiple bindings]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>6: Target metamodel attribute set in multiple bindings</remote-alias>
            <ordinal>23</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>7: If statements embedded into a for are less efficient than OCL filters</remote-name>
            <remote-type>20</remote-type>
            <local-name>[7: If statements embedded into a for are less efficient than OCL filters]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>7: If statements embedded into a for are less efficient than OCL filters</remote-alias>
            <ordinal>24</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>8: Creation of new elements done on loops</remote-name>
            <remote-type>20</remote-type>
            <local-name>[8: Creation of new elements done on loops]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>8: Creation of new elements done on loops</remote-alias>
            <ordinal>25</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>9: Nested if/else chains should be replaced with switch</remote-name>
            <remote-type>20</remote-type>
            <local-name>[9: Nested if/else chains should be replaced with switch]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>9: Nested if/else chains should be replaced with switch</remote-alias>
            <ordinal>26</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>10: A chain of select/first in OCL is less efficient than using selectFirst</remote-name>
            <remote-type>20</remote-type>
            <local-name>[10: A chain of select/first in OCL is less efficient than using selectFirst]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>10: A chain of select/first in OCL is less efficient than using selectFirst</remote-alias>
            <ordinal>27</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Datos]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>1</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:AB287:no:A1:AB287:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[10: A chain of select/first in OCL is less efficient than using selectFirst]' role='measure' type='quantitative' />
      <column datatype='integer' name='[11: allInstances should be avoided as possible]' role='measure' type='quantitative' />
      <column datatype='integer' name='[1: Non-conventional names for from/to elements of rules.]' role='measure' type='quantitative' />
      <column datatype='integer' name='[2: Non-conventional names for rules and operations.]' role='measure' type='quantitative' />
      <column datatype='integer' name='[3: Duplicated and complex OCL expressions]' role='measure' type='quantitative' />
      <column datatype='integer' name='[4: Trivial operation called once]' role='measure' type='quantitative' />
      <column datatype='integer' name='[5: Rule body is embedded into if blocks]' role='measure' type='quantitative' />
      <column datatype='integer' name='[6: Target metamodel attribute set in multiple bindings]' role='measure' type='quantitative' />
      <column datatype='integer' name='[7: If statements embedded into a for are less efficient than OCL filters]' role='measure' type='quantitative' />
      <column datatype='integer' name='[8: Creation of new elements done on loops]' role='measure' type='quantitative' />
      <column datatype='integer' name='[9: Nested if/else chains should be replaced with switch]' role='measure' type='quantitative' />
      <column datatype='string' name='[Categoria]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;Github&quot;' value='Github (19.608 LOC)' />
          <alias key='&quot;Junior&quot;' value='Junior (23.865 LOC)' />
          <alias key='&quot;Senior&quot;' value='Senior (1.358 LOC)' />
        </aliases>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column-instance column='[3: Duplicated and complex OCL expressions]' derivation='Avg' name='[avg:3: Duplicated and complex OCL expressions:qk]' pivot='key' type='quantitative' />
      <column-instance column='[10: A chain of select/first in OCL is less efficient than using selectFirst]' derivation='Count' name='[cnt:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]' pivot='key' type='quantitative' />
      <column-instance column='[11: allInstances should be avoided as possible]' derivation='Count' name='[cnt:11: allInstances should be avoided as possible:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Count' name='[cnt:1: Non-conventional names for from/to elements of rules.:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Count' name='[cnt:2: Non-conventional names for rules and operations.:qk]' pivot='key' type='quantitative' />
      <column-instance column='[3: Duplicated and complex OCL expressions]' derivation='Count' name='[cnt:3: Duplicated and complex OCL expressions:qk]' pivot='key' type='quantitative' />
      <column-instance column='[4: Trivial operation called once]' derivation='Count' name='[cnt:4: Trivial operation called once:qk]' pivot='key' type='quantitative' />
      <column-instance column='[5: Rule body is embedded into if blocks]' derivation='Count' name='[cnt:5: Rule body is embedded into if blocks:qk]' pivot='key' type='quantitative' />
      <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Count' name='[cnt:6: Target metamodel attribute set in multiple bindings:qk]' pivot='key' type='quantitative' />
      <column-instance column='[7: If statements embedded into a for are less efficient than OCL filters]' derivation='Count' name='[cnt:7: If statements embedded into a for are less efficient than OCL filters:qk]' pivot='key' type='quantitative' />
      <column-instance column='[8: Creation of new elements done on loops]' derivation='Count' name='[cnt:8: Creation of new elements done on loops:qk]' pivot='key' type='quantitative' />
      <column-instance column='[9: Nested if/else chains should be replaced with switch]' derivation='Count' name='[cnt:9: Nested if/else chains should be replaced with switch:qk]' pivot='key' type='quantitative' />
      <column-instance column='[10: A chain of select/first in OCL is less efficient than using selectFirst]' derivation='Count' name='[cum:cnt:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[11: allInstances should be avoided as possible]' derivation='Count' name='[cum:cnt:11: allInstances should be avoided as possible:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Count' name='[cum:cnt:1: Non-conventional names for from/to elements of rules.:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Count' name='[cum:cnt:2: Non-conventional names for rules and operations.:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[3: Duplicated and complex OCL expressions]' derivation='Count' name='[cum:cnt:3: Duplicated and complex OCL expressions:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[4: Trivial operation called once]' derivation='Count' name='[cum:cnt:4: Trivial operation called once:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[5: Rule body is embedded into if blocks]' derivation='Count' name='[cum:cnt:5: Rule body is embedded into if blocks:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Count' name='[cum:cnt:6: Target metamodel attribute set in multiple bindings:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[7: If statements embedded into a for are less efficient than OCL filters]' derivation='Count' name='[cum:cnt:7: If statements embedded into a for are less efficient than OCL filters:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[8: Creation of new elements done on loops]' derivation='Count' name='[cum:cnt:8: Creation of new elements done on loops:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[9: Nested if/else chains should be replaced with switch]' derivation='Count' name='[cum:cnt:9: Nested if/else chains should be replaced with switch:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[10: A chain of select/first in OCL is less efficient than using selectFirst]' derivation='Sum' name='[cum:sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk:1]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' ordering-type='Field' type='CumTotal' />
      </column-instance>
      <column-instance column='[10: A chain of select/first in OCL is less efficient than using selectFirst]' derivation='Sum' name='[cum:sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk:2]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='CellInPane' type='CumTotal' />
      </column-instance>
      <column-instance column='[10: A chain of select/first in OCL is less efficient than using selectFirst]' derivation='Sum' name='[cum:sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[11: allInstances should be avoided as possible]' derivation='Sum' name='[cum:sum:11: allInstances should be avoided as possible:qk:1]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' ordering-type='Field' type='CumTotal' />
      </column-instance>
      <column-instance column='[11: allInstances should be avoided as possible]' derivation='Sum' name='[cum:sum:11: allInstances should be avoided as possible:qk:2]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='CellInPane' type='CumTotal' />
      </column-instance>
      <column-instance column='[11: allInstances should be avoided as possible]' derivation='Sum' name='[cum:sum:11: allInstances should be avoided as possible:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Sum' name='[cum:sum:1: Non-conventional names for from/to elements of rules.:qk:1]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' ordering-type='Field' type='CumTotal' />
      </column-instance>
      <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Sum' name='[cum:sum:1: Non-conventional names for from/to elements of rules.:qk:2]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='CellInPane' type='CumTotal' />
      </column-instance>
      <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Sum' name='[cum:sum:1: Non-conventional names for from/to elements of rules.:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Sum' name='[cum:sum:2: Non-conventional names for rules and operations.:qk:1]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' ordering-type='Field' type='CumTotal' />
      </column-instance>
      <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Sum' name='[cum:sum:2: Non-conventional names for rules and operations.:qk:2]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='CellInPane' type='CumTotal' />
      </column-instance>
      <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Sum' name='[cum:sum:2: Non-conventional names for rules and operations.:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[3: Duplicated and complex OCL expressions]' derivation='Sum' name='[cum:sum:3: Duplicated and complex OCL expressions:qk:1]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' ordering-type='Field' type='CumTotal' />
      </column-instance>
      <column-instance column='[3: Duplicated and complex OCL expressions]' derivation='Sum' name='[cum:sum:3: Duplicated and complex OCL expressions:qk:2]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='CellInPane' type='CumTotal' />
      </column-instance>
      <column-instance column='[3: Duplicated and complex OCL expressions]' derivation='Sum' name='[cum:sum:3: Duplicated and complex OCL expressions:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[4: Trivial operation called once]' derivation='Sum' name='[cum:sum:4: Trivial operation called once:qk:1]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' ordering-type='Field' type='CumTotal' />
      </column-instance>
      <column-instance column='[4: Trivial operation called once]' derivation='Sum' name='[cum:sum:4: Trivial operation called once:qk:2]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='CellInPane' type='CumTotal' />
      </column-instance>
      <column-instance column='[4: Trivial operation called once]' derivation='Sum' name='[cum:sum:4: Trivial operation called once:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[5: Rule body is embedded into if blocks]' derivation='Sum' name='[cum:sum:5: Rule body is embedded into if blocks:qk:1]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' ordering-type='Field' type='CumTotal' />
      </column-instance>
      <column-instance column='[5: Rule body is embedded into if blocks]' derivation='Sum' name='[cum:sum:5: Rule body is embedded into if blocks:qk:2]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='CellInPane' type='CumTotal' />
      </column-instance>
      <column-instance column='[5: Rule body is embedded into if blocks]' derivation='Sum' name='[cum:sum:5: Rule body is embedded into if blocks:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Sum' name='[cum:sum:6: Target metamodel attribute set in multiple bindings:qk:1]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' ordering-type='Field' type='CumTotal' />
      </column-instance>
      <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Sum' name='[cum:sum:6: Target metamodel attribute set in multiple bindings:qk:2]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='CellInPane' type='CumTotal' />
      </column-instance>
      <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Sum' name='[cum:sum:6: Target metamodel attribute set in multiple bindings:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[7: If statements embedded into a for are less efficient than OCL filters]' derivation='Sum' name='[cum:sum:7: If statements embedded into a for are less efficient than OCL filters:qk:1]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' ordering-type='Field' type='CumTotal' />
      </column-instance>
      <column-instance column='[7: If statements embedded into a for are less efficient than OCL filters]' derivation='Sum' name='[cum:sum:7: If statements embedded into a for are less efficient than OCL filters:qk:2]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='CellInPane' type='CumTotal' />
      </column-instance>
      <column-instance column='[7: If statements embedded into a for are less efficient than OCL filters]' derivation='Sum' name='[cum:sum:7: If statements embedded into a for are less efficient than OCL filters:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[8: Creation of new elements done on loops]' derivation='Sum' name='[cum:sum:8: Creation of new elements done on loops:qk:1]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' ordering-type='Field' type='CumTotal' />
      </column-instance>
      <column-instance column='[8: Creation of new elements done on loops]' derivation='Sum' name='[cum:sum:8: Creation of new elements done on loops:qk:2]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='CellInPane' type='CumTotal' />
      </column-instance>
      <column-instance column='[8: Creation of new elements done on loops]' derivation='Sum' name='[cum:sum:8: Creation of new elements done on loops:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[9: Nested if/else chains should be replaced with switch]' derivation='Sum' name='[cum:sum:9: Nested if/else chains should be replaced with switch:qk:1]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' ordering-type='Field' type='CumTotal' />
      </column-instance>
      <column-instance column='[9: Nested if/else chains should be replaced with switch]' derivation='Sum' name='[cum:sum:9: Nested if/else chains should be replaced with switch:qk:2]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='CellInPane' type='CumTotal' />
      </column-instance>
      <column-instance column='[9: Nested if/else chains should be replaced with switch]' derivation='Sum' name='[cum:sum:9: Nested if/else chains should be replaced with switch:qk]' pivot='key' type='quantitative'>
        <table-calc aggregation='Sum' ordering-type='Rows' type='CumTotal' />
      </column-instance>
      <column-instance column='[11: allInstances should be avoided as possible]' derivation='Sum' name='[diff:sum:11: allInstances should be avoided as possible:qk:2]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='CellInPane' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[11: allInstances should be avoided as possible]' derivation='Sum' name='[diff:sum:11: allInstances should be avoided as possible:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Sum' name='[diff:sum:1: Non-conventional names for from/to elements of rules.:qk:2]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='CellInPane' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Sum' name='[diff:sum:1: Non-conventional names for from/to elements of rules.:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Sum' name='[diff:sum:2: Non-conventional names for rules and operations.:qk:2]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='CellInPane' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Sum' name='[diff:sum:2: Non-conventional names for rules and operations.:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Sum' name='[diff:sum:6: Target metamodel attribute set in multiple bindings:qk:2]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='CellInPane' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Sum' name='[diff:sum:6: Target metamodel attribute set in multiple bindings:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='Difference'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[Categoria]' derivation='None' name='[none:Categoria:nk]' pivot='key' type='nominal' />
      <column-instance column='[10: A chain of select/first in OCL is less efficient than using selectFirst]' derivation='Count' name='[pcdf:cnt:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[11: allInstances should be avoided as possible]' derivation='Count' name='[pcdf:cnt:11: allInstances should be avoided as possible:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Count' name='[pcdf:cnt:1: Non-conventional names for from/to elements of rules.:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Count' name='[pcdf:cnt:2: Non-conventional names for rules and operations.:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[3: Duplicated and complex OCL expressions]' derivation='Count' name='[pcdf:cnt:3: Duplicated and complex OCL expressions:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[4: Trivial operation called once]' derivation='Count' name='[pcdf:cnt:4: Trivial operation called once:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[5: Rule body is embedded into if blocks]' derivation='Count' name='[pcdf:cnt:5: Rule body is embedded into if blocks:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Count' name='[pcdf:cnt:6: Target metamodel attribute set in multiple bindings:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[7: If statements embedded into a for are less efficient than OCL filters]' derivation='Count' name='[pcdf:cnt:7: If statements embedded into a for are less efficient than OCL filters:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[8: Creation of new elements done on loops]' derivation='Count' name='[pcdf:cnt:8: Creation of new elements done on loops:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[9: Nested if/else chains should be replaced with switch]' derivation='Count' name='[pcdf:cnt:9: Nested if/else chains should be replaced with switch:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[10: A chain of select/first in OCL is less efficient than using selectFirst]' derivation='Sum' name='[pcdf:sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[11: allInstances should be avoided as possible]' derivation='Sum' name='[pcdf:sum:11: allInstances should be avoided as possible:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Sum' name='[pcdf:sum:1: Non-conventional names for from/to elements of rules.:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Sum' name='[pcdf:sum:2: Non-conventional names for rules and operations.:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[3: Duplicated and complex OCL expressions]' derivation='Sum' name='[pcdf:sum:3: Duplicated and complex OCL expressions:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[4: Trivial operation called once]' derivation='Sum' name='[pcdf:sum:4: Trivial operation called once:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[5: Rule body is embedded into if blocks]' derivation='Sum' name='[pcdf:sum:5: Rule body is embedded into if blocks:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Sum' name='[pcdf:sum:6: Target metamodel attribute set in multiple bindings:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[7: If statements embedded into a for are less efficient than OCL filters]' derivation='Sum' name='[pcdf:sum:7: If statements embedded into a for are less efficient than OCL filters:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[8: Creation of new elements done on loops]' derivation='Sum' name='[pcdf:sum:8: Creation of new elements done on loops:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[9: Nested if/else chains should be replaced with switch]' derivation='Sum' name='[pcdf:sum:9: Nested if/else chains should be replaced with switch:qk]' pivot='key' type='quantitative'>
        <table-calc diff-options='Relative' ordering-type='Rows' type='PctDiff'>
          <address>
            <value>-1</value>
          </address>
        </table-calc>
      </column-instance>
      <column-instance column='[10: A chain of select/first in OCL is less efficient than using selectFirst]' derivation='Avg' name='[pcto:avg:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[11: allInstances should be avoided as possible]' derivation='Avg' name='[pcto:avg:11: allInstances should be avoided as possible:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Avg' name='[pcto:avg:1: Non-conventional names for from/to elements of rules.:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Avg' name='[pcto:avg:2: Non-conventional names for rules and operations.:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[3: Duplicated and complex OCL expressions]' derivation='Avg' name='[pcto:avg:3: Duplicated and complex OCL expressions:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[4: Trivial operation called once]' derivation='Avg' name='[pcto:avg:4: Trivial operation called once:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[5: Rule body is embedded into if blocks]' derivation='Avg' name='[pcto:avg:5: Rule body is embedded into if blocks:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Avg' name='[pcto:avg:6: Target metamodel attribute set in multiple bindings:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[7: If statements embedded into a for are less efficient than OCL filters]' derivation='Avg' name='[pcto:avg:7: If statements embedded into a for are less efficient than OCL filters:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[8: Creation of new elements done on loops]' derivation='Avg' name='[pcto:avg:8: Creation of new elements done on loops:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[9: Nested if/else chains should be replaced with switch]' derivation='Avg' name='[pcto:avg:9: Nested if/else chains should be replaced with switch:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[10: A chain of select/first in OCL is less efficient than using selectFirst]' derivation='Count' name='[pcto:cnt:10: A chain of select/first in OCL is less efficient than using selectFirst:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Table' type='PctTotal' />
      </column-instance>
      <column-instance column='[10: A chain of select/first in OCL is less efficient than using selectFirst]' derivation='Count' name='[pcto:cnt:10: A chain of select/first in OCL is less efficient than using selectFirst:qk:4]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[10: A chain of select/first in OCL is less efficient than using selectFirst]' derivation='Count' name='[pcto:cnt:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[11: allInstances should be avoided as possible]' derivation='Count' name='[pcto:cnt:11: allInstances should be avoided as possible:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Table' type='PctTotal' />
      </column-instance>
      <column-instance column='[11: allInstances should be avoided as possible]' derivation='Count' name='[pcto:cnt:11: allInstances should be avoided as possible:qk:4]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[11: allInstances should be avoided as possible]' derivation='Count' name='[pcto:cnt:11: allInstances should be avoided as possible:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Count' name='[pcto:cnt:1: Non-conventional names for from/to elements of rules.:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Table' type='PctTotal' />
      </column-instance>
      <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Count' name='[pcto:cnt:1: Non-conventional names for from/to elements of rules.:qk:4]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Count' name='[pcto:cnt:1: Non-conventional names for from/to elements of rules.:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Count' name='[pcto:cnt:2: Non-conventional names for rules and operations.:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Table' type='PctTotal' />
      </column-instance>
      <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Count' name='[pcto:cnt:2: Non-conventional names for rules and operations.:qk:4]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Count' name='[pcto:cnt:2: Non-conventional names for rules and operations.:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[3: Duplicated and complex OCL expressions]' derivation='Count' name='[pcto:cnt:3: Duplicated and complex OCL expressions:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Table' type='PctTotal' />
      </column-instance>
      <column-instance column='[3: Duplicated and complex OCL expressions]' derivation='Count' name='[pcto:cnt:3: Duplicated and complex OCL expressions:qk:4]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[3: Duplicated and complex OCL expressions]' derivation='Count' name='[pcto:cnt:3: Duplicated and complex OCL expressions:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[4: Trivial operation called once]' derivation='Count' name='[pcto:cnt:4: Trivial operation called once:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Table' type='PctTotal' />
      </column-instance>
      <column-instance column='[4: Trivial operation called once]' derivation='Count' name='[pcto:cnt:4: Trivial operation called once:qk:4]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[4: Trivial operation called once]' derivation='Count' name='[pcto:cnt:4: Trivial operation called once:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[5: Rule body is embedded into if blocks]' derivation='Count' name='[pcto:cnt:5: Rule body is embedded into if blocks:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Table' type='PctTotal' />
      </column-instance>
      <column-instance column='[5: Rule body is embedded into if blocks]' derivation='Count' name='[pcto:cnt:5: Rule body is embedded into if blocks:qk:4]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[5: Rule body is embedded into if blocks]' derivation='Count' name='[pcto:cnt:5: Rule body is embedded into if blocks:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Count' name='[pcto:cnt:6: Target metamodel attribute set in multiple bindings:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Table' type='PctTotal' />
      </column-instance>
      <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Count' name='[pcto:cnt:6: Target metamodel attribute set in multiple bindings:qk:4]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Count' name='[pcto:cnt:6: Target metamodel attribute set in multiple bindings:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[7: If statements embedded into a for are less efficient than OCL filters]' derivation='Count' name='[pcto:cnt:7: If statements embedded into a for are less efficient than OCL filters:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Table' type='PctTotal' />
      </column-instance>
      <column-instance column='[7: If statements embedded into a for are less efficient than OCL filters]' derivation='Count' name='[pcto:cnt:7: If statements embedded into a for are less efficient than OCL filters:qk:4]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[7: If statements embedded into a for are less efficient than OCL filters]' derivation='Count' name='[pcto:cnt:7: If statements embedded into a for are less efficient than OCL filters:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[8: Creation of new elements done on loops]' derivation='Count' name='[pcto:cnt:8: Creation of new elements done on loops:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Table' type='PctTotal' />
      </column-instance>
      <column-instance column='[8: Creation of new elements done on loops]' derivation='Count' name='[pcto:cnt:8: Creation of new elements done on loops:qk:4]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[8: Creation of new elements done on loops]' derivation='Count' name='[pcto:cnt:8: Creation of new elements done on loops:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[9: Nested if/else chains should be replaced with switch]' derivation='Count' name='[pcto:cnt:9: Nested if/else chains should be replaced with switch:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Table' type='PctTotal' />
      </column-instance>
      <column-instance column='[9: Nested if/else chains should be replaced with switch]' derivation='Count' name='[pcto:cnt:9: Nested if/else chains should be replaced with switch:qk:4]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[9: Nested if/else chains should be replaced with switch]' derivation='Count' name='[pcto:cnt:9: Nested if/else chains should be replaced with switch:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[10: A chain of select/first in OCL is less efficient than using selectFirst]' derivation='Sum' name='[pcto:sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[10: A chain of select/first in OCL is less efficient than using selectFirst]' derivation='Sum' name='[pcto:sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk:3]' pivot='key' type='quantitative'>
        <table-calc ordering-field='' ordering-type='Field' type='PctTotal' />
      </column-instance>
      <column-instance column='[10: A chain of select/first in OCL is less efficient than using selectFirst]' derivation='Sum' name='[pcto:sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk:4]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Pane' type='PctTotal' />
      </column-instance>
      <column-instance column='[10: A chain of select/first in OCL is less efficient than using selectFirst]' derivation='Sum' name='[pcto:sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk:5]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' type='PctTotal' />
      </column-instance>
      <column-instance column='[10: A chain of select/first in OCL is less efficient than using selectFirst]' derivation='Sum' name='[pcto:sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk:6]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Table' type='PctTotal' />
      </column-instance>
      <column-instance column='[10: A chain of select/first in OCL is less efficient than using selectFirst]' derivation='Sum' name='[pcto:sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk:7]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[Categoria]' ordering-type='Field' type='PctTotal' />
      </column-instance>
      <column-instance column='[10: A chain of select/first in OCL is less efficient than using selectFirst]' derivation='Sum' name='[pcto:sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[11: allInstances should be avoided as possible]' derivation='Sum' name='[pcto:sum:11: allInstances should be avoided as possible:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' ordering-type='Field' type='PctTotal' />
      </column-instance>
      <column-instance column='[11: allInstances should be avoided as possible]' derivation='Sum' name='[pcto:sum:11: allInstances should be avoided as possible:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[11: allInstances should be avoided as possible]' derivation='Sum' name='[pcto:sum:11: allInstances should be avoided as possible:qk:4]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Pane' type='PctTotal' />
      </column-instance>
      <column-instance column='[11: allInstances should be avoided as possible]' derivation='Sum' name='[pcto:sum:11: allInstances should be avoided as possible:qk:5]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' type='PctTotal' />
      </column-instance>
      <column-instance column='[11: allInstances should be avoided as possible]' derivation='Sum' name='[pcto:sum:11: allInstances should be avoided as possible:qk:6]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Table' type='PctTotal' />
      </column-instance>
      <column-instance column='[11: allInstances should be avoided as possible]' derivation='Sum' name='[pcto:sum:11: allInstances should be avoided as possible:qk:7]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[Categoria]' ordering-type='Field' type='PctTotal' />
      </column-instance>
      <column-instance column='[11: allInstances should be avoided as possible]' derivation='Sum' name='[pcto:sum:11: allInstances should be avoided as possible:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Sum' name='[pcto:sum:1: Non-conventional names for from/to elements of rules.:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' ordering-type='Field' type='PctTotal' />
      </column-instance>
      <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Sum' name='[pcto:sum:1: Non-conventional names for from/to elements of rules.:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Sum' name='[pcto:sum:1: Non-conventional names for from/to elements of rules.:qk:4]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Pane' type='PctTotal' />
      </column-instance>
      <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Sum' name='[pcto:sum:1: Non-conventional names for from/to elements of rules.:qk:5]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' type='PctTotal' />
      </column-instance>
      <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Sum' name='[pcto:sum:1: Non-conventional names for from/to elements of rules.:qk:6]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Table' type='PctTotal' />
      </column-instance>
      <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Sum' name='[pcto:sum:1: Non-conventional names for from/to elements of rules.:qk:7]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[Categoria]' ordering-type='Field' type='PctTotal' />
      </column-instance>
      <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Sum' name='[pcto:sum:1: Non-conventional names for from/to elements of rules.:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Sum' name='[pcto:sum:2: Non-conventional names for rules and operations.:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' ordering-type='Field' type='PctTotal' />
      </column-instance>
      <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Sum' name='[pcto:sum:2: Non-conventional names for rules and operations.:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Sum' name='[pcto:sum:2: Non-conventional names for rules and operations.:qk:4]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Pane' type='PctTotal' />
      </column-instance>
      <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Sum' name='[pcto:sum:2: Non-conventional names for rules and operations.:qk:5]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' type='PctTotal' />
      </column-instance>
      <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Sum' name='[pcto:sum:2: Non-conventional names for rules and operations.:qk:6]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Table' type='PctTotal' />
      </column-instance>
      <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Sum' name='[pcto:sum:2: Non-conventional names for rules and operations.:qk:7]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[Categoria]' ordering-type='Field' type='PctTotal' />
      </column-instance>
      <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Sum' name='[pcto:sum:2: Non-conventional names for rules and operations.:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[3: Duplicated and complex OCL expressions]' derivation='Sum' name='[pcto:sum:3: Duplicated and complex OCL expressions:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' ordering-type='Field' type='PctTotal' />
      </column-instance>
      <column-instance column='[3: Duplicated and complex OCL expressions]' derivation='Sum' name='[pcto:sum:3: Duplicated and complex OCL expressions:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[3: Duplicated and complex OCL expressions]' derivation='Sum' name='[pcto:sum:3: Duplicated and complex OCL expressions:qk:4]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Pane' type='PctTotal' />
      </column-instance>
      <column-instance column='[3: Duplicated and complex OCL expressions]' derivation='Sum' name='[pcto:sum:3: Duplicated and complex OCL expressions:qk:5]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' type='PctTotal' />
      </column-instance>
      <column-instance column='[3: Duplicated and complex OCL expressions]' derivation='Sum' name='[pcto:sum:3: Duplicated and complex OCL expressions:qk:6]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Table' type='PctTotal' />
      </column-instance>
      <column-instance column='[3: Duplicated and complex OCL expressions]' derivation='Sum' name='[pcto:sum:3: Duplicated and complex OCL expressions:qk:7]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[Categoria]' ordering-type='Field' type='PctTotal' />
      </column-instance>
      <column-instance column='[3: Duplicated and complex OCL expressions]' derivation='Sum' name='[pcto:sum:3: Duplicated and complex OCL expressions:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[4: Trivial operation called once]' derivation='Sum' name='[pcto:sum:4: Trivial operation called once:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' ordering-type='Field' type='PctTotal' />
      </column-instance>
      <column-instance column='[4: Trivial operation called once]' derivation='Sum' name='[pcto:sum:4: Trivial operation called once:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[4: Trivial operation called once]' derivation='Sum' name='[pcto:sum:4: Trivial operation called once:qk:4]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Pane' type='PctTotal' />
      </column-instance>
      <column-instance column='[4: Trivial operation called once]' derivation='Sum' name='[pcto:sum:4: Trivial operation called once:qk:5]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' type='PctTotal' />
      </column-instance>
      <column-instance column='[4: Trivial operation called once]' derivation='Sum' name='[pcto:sum:4: Trivial operation called once:qk:6]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Table' type='PctTotal' />
      </column-instance>
      <column-instance column='[4: Trivial operation called once]' derivation='Sum' name='[pcto:sum:4: Trivial operation called once:qk:7]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[Categoria]' ordering-type='Field' type='PctTotal' />
      </column-instance>
      <column-instance column='[4: Trivial operation called once]' derivation='Sum' name='[pcto:sum:4: Trivial operation called once:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[5: Rule body is embedded into if blocks]' derivation='Sum' name='[pcto:sum:5: Rule body is embedded into if blocks:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' ordering-type='Field' type='PctTotal' />
      </column-instance>
      <column-instance column='[5: Rule body is embedded into if blocks]' derivation='Sum' name='[pcto:sum:5: Rule body is embedded into if blocks:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[5: Rule body is embedded into if blocks]' derivation='Sum' name='[pcto:sum:5: Rule body is embedded into if blocks:qk:4]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Pane' type='PctTotal' />
      </column-instance>
      <column-instance column='[5: Rule body is embedded into if blocks]' derivation='Sum' name='[pcto:sum:5: Rule body is embedded into if blocks:qk:5]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' type='PctTotal' />
      </column-instance>
      <column-instance column='[5: Rule body is embedded into if blocks]' derivation='Sum' name='[pcto:sum:5: Rule body is embedded into if blocks:qk:6]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Table' type='PctTotal' />
      </column-instance>
      <column-instance column='[5: Rule body is embedded into if blocks]' derivation='Sum' name='[pcto:sum:5: Rule body is embedded into if blocks:qk:7]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[Categoria]' ordering-type='Field' type='PctTotal' />
      </column-instance>
      <column-instance column='[5: Rule body is embedded into if blocks]' derivation='Sum' name='[pcto:sum:5: Rule body is embedded into if blocks:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Sum' name='[pcto:sum:6: Target metamodel attribute set in multiple bindings:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' ordering-type='Field' type='PctTotal' />
      </column-instance>
      <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Sum' name='[pcto:sum:6: Target metamodel attribute set in multiple bindings:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Sum' name='[pcto:sum:6: Target metamodel attribute set in multiple bindings:qk:4]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Pane' type='PctTotal' />
      </column-instance>
      <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Sum' name='[pcto:sum:6: Target metamodel attribute set in multiple bindings:qk:5]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' type='PctTotal' />
      </column-instance>
      <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Sum' name='[pcto:sum:6: Target metamodel attribute set in multiple bindings:qk:6]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Table' type='PctTotal' />
      </column-instance>
      <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Sum' name='[pcto:sum:6: Target metamodel attribute set in multiple bindings:qk:7]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[Categoria]' ordering-type='Field' type='PctTotal' />
      </column-instance>
      <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Sum' name='[pcto:sum:6: Target metamodel attribute set in multiple bindings:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[7: If statements embedded into a for are less efficient than OCL filters]' derivation='Sum' name='[pcto:sum:7: If statements embedded into a for are less efficient than OCL filters:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' ordering-type='Field' type='PctTotal' />
      </column-instance>
      <column-instance column='[7: If statements embedded into a for are less efficient than OCL filters]' derivation='Sum' name='[pcto:sum:7: If statements embedded into a for are less efficient than OCL filters:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[7: If statements embedded into a for are less efficient than OCL filters]' derivation='Sum' name='[pcto:sum:7: If statements embedded into a for are less efficient than OCL filters:qk:4]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Pane' type='PctTotal' />
      </column-instance>
      <column-instance column='[7: If statements embedded into a for are less efficient than OCL filters]' derivation='Sum' name='[pcto:sum:7: If statements embedded into a for are less efficient than OCL filters:qk:5]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' type='PctTotal' />
      </column-instance>
      <column-instance column='[7: If statements embedded into a for are less efficient than OCL filters]' derivation='Sum' name='[pcto:sum:7: If statements embedded into a for are less efficient than OCL filters:qk:6]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Table' type='PctTotal' />
      </column-instance>
      <column-instance column='[7: If statements embedded into a for are less efficient than OCL filters]' derivation='Sum' name='[pcto:sum:7: If statements embedded into a for are less efficient than OCL filters:qk:7]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[Categoria]' ordering-type='Field' type='PctTotal' />
      </column-instance>
      <column-instance column='[7: If statements embedded into a for are less efficient than OCL filters]' derivation='Sum' name='[pcto:sum:7: If statements embedded into a for are less efficient than OCL filters:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[8: Creation of new elements done on loops]' derivation='Sum' name='[pcto:sum:8: Creation of new elements done on loops:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' ordering-type='Field' type='PctTotal' />
      </column-instance>
      <column-instance column='[8: Creation of new elements done on loops]' derivation='Sum' name='[pcto:sum:8: Creation of new elements done on loops:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[8: Creation of new elements done on loops]' derivation='Sum' name='[pcto:sum:8: Creation of new elements done on loops:qk:4]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Pane' type='PctTotal' />
      </column-instance>
      <column-instance column='[8: Creation of new elements done on loops]' derivation='Sum' name='[pcto:sum:8: Creation of new elements done on loops:qk:5]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' type='PctTotal' />
      </column-instance>
      <column-instance column='[8: Creation of new elements done on loops]' derivation='Sum' name='[pcto:sum:8: Creation of new elements done on loops:qk:6]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Table' type='PctTotal' />
      </column-instance>
      <column-instance column='[8: Creation of new elements done on loops]' derivation='Sum' name='[pcto:sum:8: Creation of new elements done on loops:qk:7]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[Categoria]' ordering-type='Field' type='PctTotal' />
      </column-instance>
      <column-instance column='[8: Creation of new elements done on loops]' derivation='Sum' name='[pcto:sum:8: Creation of new elements done on loops:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[9: Nested if/else chains should be replaced with switch]' derivation='Sum' name='[pcto:sum:9: Nested if/else chains should be replaced with switch:qk:1]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' ordering-type='Field' type='PctTotal' />
      </column-instance>
      <column-instance column='[9: Nested if/else chains should be replaced with switch]' derivation='Sum' name='[pcto:sum:9: Nested if/else chains should be replaced with switch:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' type='PctTotal' />
      </column-instance>
      <column-instance column='[9: Nested if/else chains should be replaced with switch]' derivation='Sum' name='[pcto:sum:9: Nested if/else chains should be replaced with switch:qk:4]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Pane' type='PctTotal' />
      </column-instance>
      <column-instance column='[9: Nested if/else chains should be replaced with switch]' derivation='Sum' name='[pcto:sum:9: Nested if/else chains should be replaced with switch:qk:5]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Columns' type='PctTotal' />
      </column-instance>
      <column-instance column='[9: Nested if/else chains should be replaced with switch]' derivation='Sum' name='[pcto:sum:9: Nested if/else chains should be replaced with switch:qk:6]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Table' type='PctTotal' />
      </column-instance>
      <column-instance column='[9: Nested if/else chains should be replaced with switch]' derivation='Sum' name='[pcto:sum:9: Nested if/else chains should be replaced with switch:qk:7]' pivot='key' type='quantitative'>
        <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[Categoria]' ordering-type='Field' type='PctTotal' />
      </column-instance>
      <column-instance column='[9: Nested if/else chains should be replaced with switch]' derivation='Sum' name='[pcto:sum:9: Nested if/else chains should be replaced with switch:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' type='PctTotal' />
      </column-instance>
      <column-instance column='[10: A chain of select/first in OCL is less efficient than using selectFirst]' derivation='Sum' name='[sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]' pivot='key' type='quantitative' />
      <column-instance column='[11: allInstances should be avoided as possible]' derivation='Sum' name='[sum:11: allInstances should be avoided as possible:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Sum' name='[sum:1: Non-conventional names for from/to elements of rules.:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Sum' name='[sum:2: Non-conventional names for rules and operations.:qk]' pivot='key' type='quantitative' />
      <column-instance column='[3: Duplicated and complex OCL expressions]' derivation='Sum' name='[sum:3: Duplicated and complex OCL expressions:qk]' pivot='key' type='quantitative' />
      <column-instance column='[4: Trivial operation called once]' derivation='Sum' name='[sum:4: Trivial operation called once:qk]' pivot='key' type='quantitative' />
      <column-instance column='[5: Rule body is embedded into if blocks]' derivation='Sum' name='[sum:5: Rule body is embedded into if blocks:qk]' pivot='key' type='quantitative' />
      <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Sum' name='[sum:6: Target metamodel attribute set in multiple bindings:qk]' pivot='key' type='quantitative' />
      <column-instance column='[7: If statements embedded into a for are less efficient than OCL filters]' derivation='Sum' name='[sum:7: If statements embedded into a for are less efficient than OCL filters:qk]' pivot='key' type='quantitative' />
      <column-instance column='[8: Creation of new elements done on loops]' derivation='Sum' name='[sum:8: Creation of new elements done on loops:qk]' pivot='key' type='quantitative' />
      <column-instance column='[9: Nested if/else chains should be replaced with switch]' derivation='Sum' name='[sum:9: Nested if/else chains should be replaced with switch:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.136659' measure-ordering='alphabetic' measure-percentage='0.772234' parameter-percentage='0.0911063' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cnt:7: If statements embedded into a for are less efficient than OCL filters:qk]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:cnt:7: If statements embedded into a for are less efficient than OCL filters:qk]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:7: If statements embedded into a for are less efficient than OCL filters:qk:1]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:7: If statements embedded into a for are less efficient than OCL filters:qk:2]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:7: If statements embedded into a for are less efficient than OCL filters:qk]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcdf:cnt:7: If statements embedded into a for are less efficient than OCL filters:qk]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcdf:sum:7: If statements embedded into a for are less efficient than OCL filters:qk]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:avg:7: If statements embedded into a for are less efficient than OCL filters:qk]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:7: If statements embedded into a for are less efficient than OCL filters:qk:2]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:7: If statements embedded into a for are less efficient than OCL filters:qk:4]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:7: If statements embedded into a for are less efficient than OCL filters:qk]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:7: If statements embedded into a for are less efficient than OCL filters:qk:1]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:7: If statements embedded into a for are less efficient than OCL filters:qk:2]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:7: If statements embedded into a for are less efficient than OCL filters:qk:4]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:7: If statements embedded into a for are less efficient than OCL filters:qk:5]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:7: If statements embedded into a for are less efficient than OCL filters:qk:6]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:7: If statements embedded into a for are less efficient than OCL filters:qk:7]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:7: If statements embedded into a for are less efficient than OCL filters:qk]&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:7: If statements embedded into a for are less efficient than OCL filters:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cnt:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:cnt:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk:1]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk:2]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Calculation_179721773554843662:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcdf:cnt:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcdf:sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:avg:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:10: A chain of select/first in OCL is less efficient than using selectFirst:qk:2]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:10: A chain of select/first in OCL is less efficient than using selectFirst:qk:4]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk:2]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk:3]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk:4]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk:5]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk:6]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk:7]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[avg:3: Duplicated and complex OCL expressions:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cnt:3: Duplicated and complex OCL expressions:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:cnt:3: Duplicated and complex OCL expressions:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:3: Duplicated and complex OCL expressions:qk:1]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:3: Duplicated and complex OCL expressions:qk:2]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:3: Duplicated and complex OCL expressions:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcdf:cnt:3: Duplicated and complex OCL expressions:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcdf:sum:3: Duplicated and complex OCL expressions:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:avg:3: Duplicated and complex OCL expressions:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:3: Duplicated and complex OCL expressions:qk:2]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:3: Duplicated and complex OCL expressions:qk:4]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:3: Duplicated and complex OCL expressions:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:3: Duplicated and complex OCL expressions:qk:1]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:3: Duplicated and complex OCL expressions:qk:2]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:3: Duplicated and complex OCL expressions:qk:4]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:3: Duplicated and complex OCL expressions:qk:5]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:3: Duplicated and complex OCL expressions:qk:6]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:3: Duplicated and complex OCL expressions:qk:7]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:3: Duplicated and complex OCL expressions:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:3: Duplicated and complex OCL expressions:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cnt:8: Creation of new elements done on loops:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:cnt:8: Creation of new elements done on loops:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:8: Creation of new elements done on loops:qk:1]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:8: Creation of new elements done on loops:qk:2]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:8: Creation of new elements done on loops:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcdf:cnt:8: Creation of new elements done on loops:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcdf:sum:8: Creation of new elements done on loops:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:avg:8: Creation of new elements done on loops:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:8: Creation of new elements done on loops:qk:2]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:8: Creation of new elements done on loops:qk:4]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:8: Creation of new elements done on loops:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:8: Creation of new elements done on loops:qk:1]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:8: Creation of new elements done on loops:qk:2]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:8: Creation of new elements done on loops:qk:4]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:8: Creation of new elements done on loops:qk:5]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:8: Creation of new elements done on loops:qk:6]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:8: Creation of new elements done on loops:qk:7]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:8: Creation of new elements done on loops:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:8: Creation of new elements done on loops:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cnt:4: Trivial operation called once:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:cnt:4: Trivial operation called once:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:4: Trivial operation called once:qk:1]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:4: Trivial operation called once:qk:2]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:4: Trivial operation called once:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcdf:cnt:4: Trivial operation called once:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcdf:sum:4: Trivial operation called once:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:avg:4: Trivial operation called once:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:4: Trivial operation called once:qk:2]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:4: Trivial operation called once:qk:4]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:4: Trivial operation called once:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:4: Trivial operation called once:qk:1]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:4: Trivial operation called once:qk:2]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:4: Trivial operation called once:qk:4]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:4: Trivial operation called once:qk:5]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:4: Trivial operation called once:qk:6]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:4: Trivial operation called once:qk:7]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:4: Trivial operation called once:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:4: Trivial operation called once:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cnt:11: allInstances should be avoided as possible:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:cnt:11: allInstances should be avoided as possible:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:11: allInstances should be avoided as possible:qk:1]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:11: allInstances should be avoided as possible:qk:2]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:11: allInstances should be avoided as possible:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[diff:sum:11: allInstances should be avoided as possible:qk:2]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[diff:sum:11: allInstances should be avoided as possible:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcdf:cnt:11: allInstances should be avoided as possible:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcdf:sum:11: allInstances should be avoided as possible:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:avg:11: allInstances should be avoided as possible:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:11: allInstances should be avoided as possible:qk:2]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:11: allInstances should be avoided as possible:qk:4]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:11: allInstances should be avoided as possible:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:11: allInstances should be avoided as possible:qk:1]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:11: allInstances should be avoided as possible:qk:2]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:11: allInstances should be avoided as possible:qk:4]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:11: allInstances should be avoided as possible:qk:5]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:11: allInstances should be avoided as possible:qk:6]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:11: allInstances should be avoided as possible:qk:7]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:11: allInstances should be avoided as possible:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:11: allInstances should be avoided as possible:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cnt:5: Rule body is embedded into if blocks:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:cnt:5: Rule body is embedded into if blocks:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:5: Rule body is embedded into if blocks:qk:1]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:5: Rule body is embedded into if blocks:qk:2]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:5: Rule body is embedded into if blocks:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcdf:cnt:5: Rule body is embedded into if blocks:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcdf:sum:5: Rule body is embedded into if blocks:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:avg:5: Rule body is embedded into if blocks:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:5: Rule body is embedded into if blocks:qk:2]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:5: Rule body is embedded into if blocks:qk:4]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:5: Rule body is embedded into if blocks:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:5: Rule body is embedded into if blocks:qk:1]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:5: Rule body is embedded into if blocks:qk:2]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:5: Rule body is embedded into if blocks:qk:4]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:5: Rule body is embedded into if blocks:qk:5]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:5: Rule body is embedded into if blocks:qk:6]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:5: Rule body is embedded into if blocks:qk:7]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:5: Rule body is embedded into if blocks:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:5: Rule body is embedded into if blocks:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cnt:9: Nested if/else chains should be replaced with switch:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:cnt:9: Nested if/else chains should be replaced with switch:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:9: Nested if/else chains should be replaced with switch:qk:1]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:9: Nested if/else chains should be replaced with switch:qk:2]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:9: Nested if/else chains should be replaced with switch:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcdf:cnt:9: Nested if/else chains should be replaced with switch:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcdf:sum:9: Nested if/else chains should be replaced with switch:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:avg:9: Nested if/else chains should be replaced with switch:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:9: Nested if/else chains should be replaced with switch:qk:2]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:9: Nested if/else chains should be replaced with switch:qk:4]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:9: Nested if/else chains should be replaced with switch:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:9: Nested if/else chains should be replaced with switch:qk:1]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:9: Nested if/else chains should be replaced with switch:qk:2]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:9: Nested if/else chains should be replaced with switch:qk:4]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:9: Nested if/else chains should be replaced with switch:qk:5]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:9: Nested if/else chains should be replaced with switch:qk:6]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:9: Nested if/else chains should be replaced with switch:qk:7]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:9: Nested if/else chains should be replaced with switch:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:9: Nested if/else chains should be replaced with switch:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cnt:6: Target metamodel attribute set in multiple bindings:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:cnt:6: Target metamodel attribute set in multiple bindings:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:6: Target metamodel attribute set in multiple bindings:qk:1]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:6: Target metamodel attribute set in multiple bindings:qk:2]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:6: Target metamodel attribute set in multiple bindings:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[diff:sum:6: Target metamodel attribute set in multiple bindings:qk:2]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[diff:sum:6: Target metamodel attribute set in multiple bindings:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcdf:cnt:6: Target metamodel attribute set in multiple bindings:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcdf:sum:6: Target metamodel attribute set in multiple bindings:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:avg:6: Target metamodel attribute set in multiple bindings:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:6: Target metamodel attribute set in multiple bindings:qk:2]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:6: Target metamodel attribute set in multiple bindings:qk:4]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:6: Target metamodel attribute set in multiple bindings:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:6: Target metamodel attribute set in multiple bindings:qk:1]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:6: Target metamodel attribute set in multiple bindings:qk:2]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:6: Target metamodel attribute set in multiple bindings:qk:4]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:6: Target metamodel attribute set in multiple bindings:qk:5]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:6: Target metamodel attribute set in multiple bindings:qk:6]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:6: Target metamodel attribute set in multiple bindings:qk:7]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:6: Target metamodel attribute set in multiple bindings:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:6: Target metamodel attribute set in multiple bindings:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cnt:1: Non-conventional names for from/to elements of rules.:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:cnt:1: Non-conventional names for from/to elements of rules.:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:1: Non-conventional names for from/to elements of rules.:qk:1]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:1: Non-conventional names for from/to elements of rules.:qk:2]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:1: Non-conventional names for from/to elements of rules.:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[diff:sum:1: Non-conventional names for from/to elements of rules.:qk:2]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[diff:sum:1: Non-conventional names for from/to elements of rules.:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcdf:cnt:1: Non-conventional names for from/to elements of rules.:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcdf:sum:1: Non-conventional names for from/to elements of rules.:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:avg:1: Non-conventional names for from/to elements of rules.:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:1: Non-conventional names for from/to elements of rules.:qk:2]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:1: Non-conventional names for from/to elements of rules.:qk:4]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:1: Non-conventional names for from/to elements of rules.:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:1: Non-conventional names for from/to elements of rules.:qk:1]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:1: Non-conventional names for from/to elements of rules.:qk:2]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:1: Non-conventional names for from/to elements of rules.:qk:4]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:1: Non-conventional names for from/to elements of rules.:qk:5]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:1: Non-conventional names for from/to elements of rules.:qk:6]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:1: Non-conventional names for from/to elements of rules.:qk:7]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:1: Non-conventional names for from/to elements of rules.:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:1: Non-conventional names for from/to elements of rules.:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cnt:2: Non-conventional names for rules and operations.:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:cnt:2: Non-conventional names for rules and operations.:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:2: Non-conventional names for rules and operations.:qk:1]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:2: Non-conventional names for rules and operations.:qk:2]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[cum:sum:2: Non-conventional names for rules and operations.:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[diff:sum:2: Non-conventional names for rules and operations.:qk:2]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[diff:sum:2: Non-conventional names for rules and operations.:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcdf:cnt:2: Non-conventional names for rules and operations.:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcdf:sum:2: Non-conventional names for rules and operations.:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:avg:2: Non-conventional names for rules and operations.:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:2: Non-conventional names for rules and operations.:qk:2]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:2: Non-conventional names for rules and operations.:qk:4]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:cnt:2: Non-conventional names for rules and operations.:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:2: Non-conventional names for rules and operations.:qk:1]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:2: Non-conventional names for rules and operations.:qk:2]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:2: Non-conventional names for rules and operations.:qk:4]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:2: Non-conventional names for rules and operations.:qk:5]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:2: Non-conventional names for rules and operations.:qk:6]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:2: Non-conventional names for rules and operations.:qk:7]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:2: Non-conventional names for rules and operations.:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:2: Non-conventional names for rules and operations.:qk]&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Categoria:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Github&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Senior&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Junior&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Colombia&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
    <datasource caption='Correlaciones' inline='true' name='federated.0giq4ev1783ro5100yn781wspt56' version='10.2'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='report' name='excel-direct.1w8a0kx1pogzxy11mnlhr00gixq5'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='/Users/nicolas/Documents/Repositorios/ETLMetrics/generated/reports/excel/report.xls' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.1w8a0kx1pogzxy11mnlhr00gixq5' name='Hoja1' table='[Hoja1$]' type='table'>
          <columns gridOrigin='A1:AB28:no:A1:AB28:0' header='yes' outcome='2'>
            <column datatype='string' name='F1' ordinal='0' />
            <column datatype='real' name='LOC' ordinal='1' />
            <column datatype='real' name='Bad Smells' ordinal='2' />
            <column datatype='real' name='Density' ordinal='3' />
            <column datatype='real' name='Rules' ordinal='4' />
            <column datatype='real' name='Matched Rules' ordinal='5' />
            <column datatype='real' name='Lazy' ordinal='6' />
            <column datatype='real' name='HWC' ordinal='7' />
            <column datatype='real' name='HNC' ordinal='8' />
            <column datatype='real' name='IF' ordinal='9' />
            <column datatype='real' name='Iterators' ordinal='10' />
            <column datatype='real' name='Selfs' ordinal='11' />
            <column datatype='real' name='Variables per rule' ordinal='12' />
            <column datatype='real' name='Calls to operations per rule' ordinal='13' />
            <column datatype='real' name='Call to lazy per rule' ordinal='14' />
            <column datatype='real' name='Unused operations' ordinal='15' />
            <column datatype='real' name='Unused parameters' ordinal='16' />
            <column datatype='real' name='1: Non-conventional names for from/to elements of rules.' ordinal='17' />
            <column datatype='real' name='2: Non-conventional names for rules and operations.' ordinal='18' />
            <column datatype='real' name='3: Duplicated and complex OCL expressions' ordinal='19' />
            <column datatype='real' name='4: Trivial operation called once' ordinal='20' />
            <column datatype='real' name='5: Rule body is embedded into if blocks' ordinal='21' />
            <column datatype='real' name='6: Target metamodel attribute set in multiple bindings' ordinal='22' />
            <column datatype='real' name='7: If statements embedded into a for are less efficient than OCL filters' ordinal='23' />
            <column datatype='real' name='8: Creation of new elements done on loops' ordinal='24' />
            <column datatype='real' name='9: Nested if/else chains should be replaced with switch' ordinal='25' />
            <column datatype='real' name='10: A chain of select/first in OCL is less efficient than using selectFirst' ordinal='26' />
            <column datatype='integer' name='11: allInstances should be avoided as possible' ordinal='27' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>130</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LES_RCO_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LOC</remote-name>
            <remote-type>5</remote-type>
            <local-name>[LOC]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>LOC</remote-alias>
            <ordinal>1</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Bad Smells</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Bad Smells]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>Bad Smells</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Density</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Density]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>Density</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Rules</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Rules]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>Rules</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Matched Rules</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Matched Rules]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>Matched Rules</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Lazy</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Lazy]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>Lazy</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>HWC</remote-name>
            <remote-type>5</remote-type>
            <local-name>[HWC]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>HWC</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>HNC</remote-name>
            <remote-type>5</remote-type>
            <local-name>[HNC]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>HNC</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>IF</remote-name>
            <remote-type>5</remote-type>
            <local-name>[IF]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>IF</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Iterators</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Iterators]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>Iterators</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Selfs</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Selfs]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>Selfs</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Variables per rule</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Variables per rule]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>Variables per rule</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Calls to operations per rule</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Calls to operations per rule]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>Calls to operations per rule</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Call to lazy per rule</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Call to lazy per rule]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>Call to lazy per rule</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Unused operations</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Unused operations]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>Unused operations</remote-alias>
            <ordinal>15</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Unused parameters</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Unused parameters]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>Unused parameters</remote-alias>
            <ordinal>16</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1: Non-conventional names for from/to elements of rules.</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1: Non-conventional names for from/to elements of rules.]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>1: Non-conventional names for from/to elements of rules.</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2: Non-conventional names for rules and operations.</remote-name>
            <remote-type>5</remote-type>
            <local-name>[2: Non-conventional names for rules and operations.]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>2: Non-conventional names for rules and operations.</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>3: Duplicated and complex OCL expressions</remote-name>
            <remote-type>5</remote-type>
            <local-name>[3: Duplicated and complex OCL expressions]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>3: Duplicated and complex OCL expressions</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>4: Trivial operation called once</remote-name>
            <remote-type>5</remote-type>
            <local-name>[4: Trivial operation called once]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>4: Trivial operation called once</remote-alias>
            <ordinal>20</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>5: Rule body is embedded into if blocks</remote-name>
            <remote-type>5</remote-type>
            <local-name>[5: Rule body is embedded into if blocks]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>5: Rule body is embedded into if blocks</remote-alias>
            <ordinal>21</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>6: Target metamodel attribute set in multiple bindings</remote-name>
            <remote-type>5</remote-type>
            <local-name>[6: Target metamodel attribute set in multiple bindings]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>6: Target metamodel attribute set in multiple bindings</remote-alias>
            <ordinal>22</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>7: If statements embedded into a for are less efficient than OCL filters</remote-name>
            <remote-type>5</remote-type>
            <local-name>[7: If statements embedded into a for are less efficient than OCL filters]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>7: If statements embedded into a for are less efficient than OCL filters</remote-alias>
            <ordinal>23</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>8: Creation of new elements done on loops</remote-name>
            <remote-type>5</remote-type>
            <local-name>[8: Creation of new elements done on loops]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>8: Creation of new elements done on loops</remote-alias>
            <ordinal>24</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>9: Nested if/else chains should be replaced with switch</remote-name>
            <remote-type>5</remote-type>
            <local-name>[9: Nested if/else chains should be replaced with switch]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>9: Nested if/else chains should be replaced with switch</remote-alias>
            <ordinal>25</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>10: A chain of select/first in OCL is less efficient than using selectFirst</remote-name>
            <remote-type>5</remote-type>
            <local-name>[10: A chain of select/first in OCL is less efficient than using selectFirst]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>10: A chain of select/first in OCL is less efficient than using selectFirst</remote-alias>
            <ordinal>26</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>11: allInstances should be avoided as possible</remote-name>
            <remote-type>20</remote-type>
            <local-name>[11: allInstances should be avoided as possible]</local-name>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias>11: allInstances should be avoided as possible</remote-alias>
            <ordinal>27</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Hoja1]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:AB28:no:A1:AB28:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>2</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[11: allInstances should be avoided as possible]' role='measure' type='quantitative' />
      <column datatype='real' name='[Bad Smells]' role='measure' type='quantitative' />
      <column datatype='real' name='[Call to lazy per rule]' role='measure' type='quantitative' />
      <column datatype='real' name='[Calls to operations per rule]' role='measure' type='quantitative' />
      <column datatype='real' name='[Density]' role='measure' type='quantitative' />
      <column caption='F11' datatype='string' name='[F1]' role='dimension' type='nominal' />
      <column caption='ONC' datatype='real' name='[HNC]' role='measure' type='quantitative' />
      <column caption='OWC' datatype='real' name='[HWC]' role='measure' type='quantitative' />
      <column datatype='real' name='[IF]' role='measure' type='quantitative' />
      <column datatype='real' name='[Iterators]' role='measure' type='quantitative' />
      <column datatype='real' name='[LOC]' role='measure' type='quantitative' />
      <column datatype='real' name='[Lazy]' role='measure' type='quantitative' />
      <column datatype='real' name='[Matched Rules]' role='measure' type='quantitative' />
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column datatype='real' name='[Rules]' role='measure' type='quantitative' />
      <column datatype='real' name='[Selfs]' role='measure' type='quantitative' />
      <column datatype='real' name='[Unused operations]' role='measure' type='quantitative' />
      <column datatype='real' name='[Unused parameters]' role='measure' type='quantitative' />
      <column datatype='real' name='[Variables per rule]' role='measure' type='quantitative' />
      <column-instance column='[11: allInstances should be avoided as possible]' derivation='Sum' name='[sum:11: allInstances should be avoided as possible:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Bad Smells]' derivation='Sum' name='[sum:Bad Smells:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Call to lazy per rule]' derivation='Sum' name='[sum:Call to lazy per rule:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calls to operations per rule]' derivation='Sum' name='[sum:Calls to operations per rule:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Density]' derivation='Sum' name='[sum:Density:qk]' pivot='key' type='quantitative' />
      <column-instance column='[HNC]' derivation='Sum' name='[sum:HNC:qk]' pivot='key' type='quantitative' />
      <column-instance column='[HWC]' derivation='Sum' name='[sum:HWC:qk]' pivot='key' type='quantitative' />
      <column-instance column='[IF]' derivation='Sum' name='[sum:IF:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Iterators]' derivation='Sum' name='[sum:Iterators:qk]' pivot='key' type='quantitative' />
      <column-instance column='[LOC]' derivation='Sum' name='[sum:LOC:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Lazy]' derivation='Sum' name='[sum:Lazy:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Matched Rules]' derivation='Sum' name='[sum:Matched Rules:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Rules]' derivation='Sum' name='[sum:Rules:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Selfs]' derivation='Sum' name='[sum:Selfs:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Unused operations]' derivation='Sum' name='[sum:Unused operations:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Unused parameters]' derivation='Sum' name='[sum:Unused parameters:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Variables per rule]' derivation='Sum' name='[sum:Variables per rule:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.0871369' measure-ordering='alphabetic' measure-percentage='0.825726' parameter-percentage='0.0871369' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[:Measure Names]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:LOC:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:11: allInstances should be avoided as possible:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Bad Smells:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:HNC:qk]&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Rules:qk]&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Lazy:qk]&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:HWC:qk]&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Call to lazy per rule:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Variables per rule:qk]&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:IF:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Selfs:qk]&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Unused operations:qk]&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Matched Rules:qk]&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Iterators:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Calls to operations per rule:qk]&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Unused parameters:qk]&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Number of Records:qk]&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Density:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Colombia&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
    <datasource caption='Datos (report)' inline='true' name='federated.0yusrt80zh31p11d02tj605voo97' version='10.2'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='report' name='excel-direct.14zinb319jq04r1emyzm605rima4'>
            <connection class='excel-direct' cleaning='no' compat='no' dataRefreshTime='' filename='/Users/nicolas/Documents/Trabajo Real/Kelly/report.xls' interpretationMode='0' password='' server='' validate='no' />
          </named-connection>
        </named-connections>
        <relation connection='excel-direct.14zinb319jq04r1emyzm605rima4' name='Datos' table='[Datos$]' type='table'>
          <columns gridOrigin='A1:Y287:no:A1:Y287:0' header='yes' outcome='6'>
            <column datatype='string' name='F1' ordinal='0' />
            <column datatype='string' name='Categoria' ordinal='1' />
            <column datatype='integer' name='LOC' ordinal='2' />
            <column datatype='integer' name='Bad Smells' ordinal='3' />
            <column datatype='integer' name='Matched Rules' ordinal='4' />
            <column datatype='integer' name='Lazy' ordinal='5' />
            <column datatype='integer' name='OWC' ordinal='6' />
            <column datatype='integer' name='ONC' ordinal='7' />
            <column datatype='integer' name='IF' ordinal='8' />
            <column datatype='integer' name='Iterators' ordinal='9' />
            <column datatype='real' name='Variables per rule' ordinal='10' />
            <column datatype='integer' name='Calls to operations per rule' ordinal='11' />
            <column datatype='integer' name='Call to lazy per rule' ordinal='12' />
            <column datatype='integer' name='Unused operations' ordinal='13' />
            <column datatype='integer' name='Unused parameters' ordinal='14' />
            <column datatype='integer' name='1: Non-conventional names for from/to elements of rules.' ordinal='15' />
            <column datatype='integer' name='2: Non-conventional names for rules and operations.' ordinal='16' />
            <column datatype='integer' name='3: Duplicated and complex OCL expressions' ordinal='17' />
            <column datatype='integer' name='4: Trivial operation called once' ordinal='18' />
            <column datatype='integer' name='5: Rule body is embedded into if blocks' ordinal='19' />
            <column datatype='integer' name='6: Target metamodel attribute set in multiple bindings' ordinal='20' />
            <column datatype='integer' name='7: If statements embedded into a for are less efficient than OCL filters' ordinal='21' />
            <column datatype='integer' name='8: Creation of new elements done on loops' ordinal='22' />
            <column datatype='integer' name='9: Nested if/else chains should be replaced with switch' ordinal='23' />
            <column datatype='integer' name='10: A chain of select/first in OCL is less efficient than using selectFirst' ordinal='24' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>130</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LES_RCO_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Categoria</remote-name>
            <remote-type>130</remote-type>
            <local-name>[Categoria]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>Categoria</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <collation flag='1' name='LES_RCO_S2' />
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;WSTR&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>LOC</remote-name>
            <remote-type>20</remote-type>
            <local-name>[LOC]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>LOC</remote-alias>
            <ordinal>2</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Bad Smells</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Bad Smells]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>Bad Smells</remote-alias>
            <ordinal>3</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Matched Rules</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Matched Rules]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>Matched Rules</remote-alias>
            <ordinal>4</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Lazy</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Lazy]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>Lazy</remote-alias>
            <ordinal>5</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>OWC</remote-name>
            <remote-type>20</remote-type>
            <local-name>[OWC]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>OWC</remote-alias>
            <ordinal>6</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>ONC</remote-name>
            <remote-type>20</remote-type>
            <local-name>[ONC]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>ONC</remote-alias>
            <ordinal>7</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>IF</remote-name>
            <remote-type>20</remote-type>
            <local-name>[IF]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>IF</remote-alias>
            <ordinal>8</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Iterators</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Iterators]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>Iterators</remote-alias>
            <ordinal>9</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Variables per rule</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Variables per rule]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>Variables per rule</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <precision>15</precision>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;R8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Calls to operations per rule</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Calls to operations per rule]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>Calls to operations per rule</remote-alias>
            <ordinal>11</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Call to lazy per rule</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Call to lazy per rule]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>Call to lazy per rule</remote-alias>
            <ordinal>12</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Unused operations</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Unused operations]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>Unused operations</remote-alias>
            <ordinal>13</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Unused parameters</remote-name>
            <remote-type>20</remote-type>
            <local-name>[Unused parameters]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>Unused parameters</remote-alias>
            <ordinal>14</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1: Non-conventional names for from/to elements of rules.</remote-name>
            <remote-type>20</remote-type>
            <local-name>[1: Non-conventional names for from/to elements of rules.]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>1: Non-conventional names for from/to elements of rules.</remote-alias>
            <ordinal>15</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>2: Non-conventional names for rules and operations.</remote-name>
            <remote-type>20</remote-type>
            <local-name>[2: Non-conventional names for rules and operations.]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>2: Non-conventional names for rules and operations.</remote-alias>
            <ordinal>16</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>3: Duplicated and complex OCL expressions</remote-name>
            <remote-type>20</remote-type>
            <local-name>[3: Duplicated and complex OCL expressions]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>3: Duplicated and complex OCL expressions</remote-alias>
            <ordinal>17</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>4: Trivial operation called once</remote-name>
            <remote-type>20</remote-type>
            <local-name>[4: Trivial operation called once]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>4: Trivial operation called once</remote-alias>
            <ordinal>18</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>5: Rule body is embedded into if blocks</remote-name>
            <remote-type>20</remote-type>
            <local-name>[5: Rule body is embedded into if blocks]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>5: Rule body is embedded into if blocks</remote-alias>
            <ordinal>19</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>6: Target metamodel attribute set in multiple bindings</remote-name>
            <remote-type>20</remote-type>
            <local-name>[6: Target metamodel attribute set in multiple bindings]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>6: Target metamodel attribute set in multiple bindings</remote-alias>
            <ordinal>20</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>7: If statements embedded into a for are less efficient than OCL filters</remote-name>
            <remote-type>20</remote-type>
            <local-name>[7: If statements embedded into a for are less efficient than OCL filters]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>7: If statements embedded into a for are less efficient than OCL filters</remote-alias>
            <ordinal>21</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>8: Creation of new elements done on loops</remote-name>
            <remote-type>20</remote-type>
            <local-name>[8: Creation of new elements done on loops]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>8: Creation of new elements done on loops</remote-alias>
            <ordinal>22</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>9: Nested if/else chains should be replaced with switch</remote-name>
            <remote-type>20</remote-type>
            <local-name>[9: Nested if/else chains should be replaced with switch]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>9: Nested if/else chains should be replaced with switch</remote-alias>
            <ordinal>23</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>10: A chain of select/first in OCL is less efficient than using selectFirst</remote-name>
            <remote-type>20</remote-type>
            <local-name>[10: A chain of select/first in OCL is less efficient than using selectFirst]</local-name>
            <parent-name>[Datos]</parent-name>
            <remote-alias>10: A chain of select/first in OCL is less efficient than using selectFirst</remote-alias>
            <ordinal>24</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='DebugRemoteType'>&quot;I8&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[Datos]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='integer' name='context'>0</attribute>
              <attribute datatype='string' name='gridOrigin'>&quot;A1:Y287:no:A1:Y287:0&quot;</attribute>
              <attribute datatype='boolean' name='header'>true</attribute>
              <attribute datatype='integer' name='outcome'>6</attribute>
            </attributes>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column datatype='integer' name='[10: A chain of select/first in OCL is less efficient than using selectFirst]' role='measure' type='quantitative' />
      <column datatype='integer' name='[1: Non-conventional names for from/to elements of rules.]' role='measure' type='quantitative' />
      <column datatype='integer' name='[2: Non-conventional names for rules and operations.]' role='measure' type='quantitative' />
      <column datatype='integer' name='[3: Duplicated and complex OCL expressions]' role='measure' type='quantitative' />
      <column datatype='integer' name='[4: Trivial operation called once]' role='measure' type='quantitative' />
      <column datatype='integer' name='[5: Rule body is embedded into if blocks]' role='measure' type='quantitative' />
      <column datatype='integer' name='[6: Target metamodel attribute set in multiple bindings]' role='measure' type='quantitative' />
      <column datatype='integer' name='[7: If statements embedded into a for are less efficient than OCL filters]' role='measure' type='quantitative' />
      <column datatype='integer' name='[8: Creation of new elements done on loops]' role='measure' type='quantitative' />
      <column datatype='integer' name='[9: Nested if/else chains should be replaced with switch]' role='measure' type='quantitative' />
      <column datatype='string' name='[:Measure Names]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:1: Non-conventional names for from/to elements of rules.:qk]&quot;' value='NCF' />
          <alias key='&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]&quot;' value='CSF' />
          <alias key='&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:2: Non-conventional names for rules and operations.:qk]&quot;' value='NCR' />
          <alias key='&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:3: Duplicated and complex OCL expressions:qk]&quot;' value='DOE' />
          <alias key='&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:4: Trivial operation called once:qk]&quot;' value='TOC' />
          <alias key='&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:5: Rule body is embedded into if blocks:qk]&quot;' value='REB' />
          <alias key='&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:6: Target metamodel attribute set in multiple bindings:qk]&quot;' value='TMB' />
          <alias key='&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:7: If statements embedded into a for are less efficient than OCL filters:qk]&quot;' value='IEO' />
          <alias key='&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:8: Creation of new elements done on loops:qk]&quot;' value='CNL' />
          <alias key='&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:9: Nested if/else chains should be replaced with switch:qk]&quot;' value='NIC' />
        </aliases>
      </column>
      <column datatype='string' name='[Categoria]' role='dimension' type='nominal'>
        <aliases>
          <alias key='&quot;Junior&quot;' value='Uniandes' />
          <alias key='&quot;Senior&quot;' value='York' />
        </aliases>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <column-instance column='[10: A chain of select/first in OCL is less efficient than using selectFirst]' derivation='Sum' name='[sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]' pivot='key' type='quantitative' />
      <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Sum' name='[sum:1: Non-conventional names for from/to elements of rules.:qk]' pivot='key' type='quantitative' />
      <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Sum' name='[sum:2: Non-conventional names for rules and operations.:qk]' pivot='key' type='quantitative' />
      <column-instance column='[3: Duplicated and complex OCL expressions]' derivation='Sum' name='[sum:3: Duplicated and complex OCL expressions:qk]' pivot='key' type='quantitative' />
      <column-instance column='[4: Trivial operation called once]' derivation='Sum' name='[sum:4: Trivial operation called once:qk]' pivot='key' type='quantitative' />
      <column-instance column='[5: Rule body is embedded into if blocks]' derivation='Sum' name='[sum:5: Rule body is embedded into if blocks:qk]' pivot='key' type='quantitative' />
      <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Sum' name='[sum:6: Target metamodel attribute set in multiple bindings:qk]' pivot='key' type='quantitative' />
      <column-instance column='[7: If statements embedded into a for are less efficient than OCL filters]' derivation='Sum' name='[sum:7: If statements embedded into a for are less efficient than OCL filters:qk]' pivot='key' type='quantitative' />
      <column-instance column='[8: Creation of new elements done on loops]' derivation='Sum' name='[sum:8: Creation of new elements done on loops:qk]' pivot='key' type='quantitative' />
      <column-instance column='[9: Nested if/else chains should be replaced with switch]' derivation='Sum' name='[sum:9: Nested if/else chains should be replaced with switch:qk]' pivot='key' type='quantitative' />
      <layout dim-ordering='alphabetic' dim-percentage='0.136659' measure-ordering='alphabetic' measure-percentage='0.772234' parameter-percentage='0.0911063' show-aliased-fields='true' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;Colombia&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Distribución # Datos'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Distribución de registros</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='datos' name='federated.0m9q5y71o1y1i20zx0q960h69akv' />
          </datasources>
          <datasource-dependencies datasource='federated.0m9q5y71o1y1i20zx0q960h69akv'>
            <column datatype='string' name='[Categoria]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Github&quot;' value='Github (19.608 LOC)' />
                <alias key='&quot;Junior&quot;' value='Junior (23.865 LOC)' />
                <alias key='&quot;Senior&quot;' value='Senior (1.358 LOC)' />
              </aliases>
            </column>
            <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
              <calculation class='tableau' formula='1' />
            </column>
            <column-instance column='[Categoria]' derivation='None' name='[none:Categoria:nk]' pivot='key' type='nominal' />
            <column-instance column='[Number of Records]' derivation='Sum' name='[sum:Number of Records:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' />
              <size column='[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:Number of Records:qk]' />
              <text column='[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:Number of Records:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
    </worksheet>
    <worksheet name='Distribución LOC'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Distribución de registros</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='datos' name='federated.0m9q5y71o1y1i20zx0q960h69akv' />
          </datasources>
          <datasource-dependencies datasource='federated.0m9q5y71o1y1i20zx0q960h69akv'>
            <column datatype='string' name='[Categoria]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Github&quot;' value='Github (19.608 LOC)' />
                <alias key='&quot;Junior&quot;' value='Junior (23.865 LOC)' />
                <alias key='&quot;Senior&quot;' value='Senior (1.358 LOC)' />
              </aliases>
            </column>
            <column datatype='integer' name='[LOC]' role='measure' type='quantitative' />
            <column-instance column='[Categoria]' derivation='None' name='[none:Categoria:nk]' pivot='key' type='nominal' />
            <column-instance column='[LOC]' derivation='Sum' name='[sum:LOC:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:LOC:qk]</rows>
        <cols>[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]</cols>
      </table>
    </worksheet>
    <worksheet name='Hoja 7'>
      <table>
        <view>
          <datasources>
            <datasource caption='Datos (report)' name='federated.0yusrt80zh31p11d02tj605voo97' />
          </datasources>
          <datasource-dependencies datasource='federated.0yusrt80zh31p11d02tj605voo97'>
            <column datatype='integer' name='[10: A chain of select/first in OCL is less efficient than using selectFirst]' role='measure' type='quantitative' />
            <column datatype='integer' name='[1: Non-conventional names for from/to elements of rules.]' role='measure' type='quantitative' />
            <column datatype='integer' name='[2: Non-conventional names for rules and operations.]' role='measure' type='quantitative' />
            <column datatype='integer' name='[3: Duplicated and complex OCL expressions]' role='measure' type='quantitative' />
            <column datatype='integer' name='[4: Trivial operation called once]' role='measure' type='quantitative' />
            <column datatype='integer' name='[5: Rule body is embedded into if blocks]' role='measure' type='quantitative' />
            <column datatype='integer' name='[6: Target metamodel attribute set in multiple bindings]' role='measure' type='quantitative' />
            <column datatype='integer' name='[7: If statements embedded into a for are less efficient than OCL filters]' role='measure' type='quantitative' />
            <column datatype='integer' name='[8: Creation of new elements done on loops]' role='measure' type='quantitative' />
            <column datatype='integer' name='[9: Nested if/else chains should be replaced with switch]' role='measure' type='quantitative' />
            <column datatype='string' name='[Categoria]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Junior&quot;' value='Uniandes' />
                <alias key='&quot;Senior&quot;' value='York' />
              </aliases>
            </column>
            <column-instance column='[Categoria]' derivation='None' name='[none:Categoria:nk]' pivot='key' type='nominal' />
            <column-instance column='[10: A chain of select/first in OCL is less efficient than using selectFirst]' derivation='Sum' name='[sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Sum' name='[sum:1: Non-conventional names for from/to elements of rules.:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Sum' name='[sum:2: Non-conventional names for rules and operations.:qk]' pivot='key' type='quantitative' />
            <column-instance column='[3: Duplicated and complex OCL expressions]' derivation='Sum' name='[sum:3: Duplicated and complex OCL expressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[4: Trivial operation called once]' derivation='Sum' name='[sum:4: Trivial operation called once:qk]' pivot='key' type='quantitative' />
            <column-instance column='[5: Rule body is embedded into if blocks]' derivation='Sum' name='[sum:5: Rule body is embedded into if blocks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Sum' name='[sum:6: Target metamodel attribute set in multiple bindings:qk]' pivot='key' type='quantitative' />
            <column-instance column='[7: If statements embedded into a for are less efficient than OCL filters]' derivation='Sum' name='[sum:7: If statements embedded into a for are less efficient than OCL filters:qk]' pivot='key' type='quantitative' />
            <column-instance column='[8: Creation of new elements done on loops]' derivation='Sum' name='[sum:8: Creation of new elements done on loops:qk]' pivot='key' type='quantitative' />
            <column-instance column='[9: Nested if/else chains should be replaced with switch]' derivation='Sum' name='[sum:9: Nested if/else chains should be replaced with switch:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0yusrt80zh31p11d02tj605voo97].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:3: Duplicated and complex OCL expressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:4: Trivial operation called once:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:5: Rule body is embedded into if blocks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:6: Target metamodel attribute set in multiple bindings:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:7: If statements embedded into a for are less efficient than OCL filters:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:8: Creation of new elements done on loops:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:9: Nested if/else chains should be replaced with switch:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[federated.0yusrt80zh31p11d02tj605voo97].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:1: Non-conventional names for from/to elements of rules.:qk]&quot;</bucket>
              <bucket>&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:2: Non-conventional names for rules and operations.:qk]&quot;</bucket>
              <bucket>&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:3: Duplicated and complex OCL expressions:qk]&quot;</bucket>
              <bucket>&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:4: Trivial operation called once:qk]&quot;</bucket>
              <bucket>&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:5: Rule body is embedded into if blocks:qk]&quot;</bucket>
              <bucket>&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:6: Target metamodel attribute set in multiple bindings:qk]&quot;</bucket>
              <bucket>&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:7: If statements embedded into a for are less efficient than OCL filters:qk]&quot;</bucket>
              <bucket>&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:8: Creation of new elements done on loops:qk]&quot;</bucket>
              <bucket>&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:9: Nested if/else chains should be replaced with switch:qk]&quot;</bucket>
              <bucket>&quot;[federated.0yusrt80zh31p11d02tj605voo97].[sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[federated.0yusrt80zh31p11d02tj605voo97].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.0yusrt80zh31p11d02tj605voo97].[Multiple Values]' scope='cols' value='Bad Smell Ocurrences' />
            <format attr='subtitle' class='0' field='[federated.0yusrt80zh31p11d02tj605voo97].[Multiple Values]' scope='cols' value='' />
            <format attr='auto-subtitle' class='0' field='[federated.0yusrt80zh31p11d02tj605voo97].[Multiple Values]' scope='cols' value='true' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.0yusrt80zh31p11d02tj605voo97].[:Measure Names]</rows>
        <cols>([federated.0yusrt80zh31p11d02tj605voo97].[none:Categoria:nk] * [federated.0yusrt80zh31p11d02tj605voo97].[Multiple Values])</cols>
      </table>
    </worksheet>
    <worksheet name='Metrics v Metrics'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Pearson</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Correlaciones' name='federated.0giq4ev1783ro5100yn781wspt56' />
          </datasources>
          <datasource-dependencies datasource='federated.0giq4ev1783ro5100yn781wspt56'>
            <column datatype='real' name='[Bad Smells]' role='measure' type='quantitative' />
            <column datatype='real' name='[Call to lazy per rule]' role='measure' type='quantitative' />
            <column datatype='real' name='[Calls to operations per rule]' role='measure' type='quantitative' />
            <column datatype='real' name='[Density]' role='measure' type='quantitative' />
            <column caption='F11' datatype='string' name='[F1]' role='dimension' type='nominal' />
            <column caption='ONC' datatype='real' name='[HNC]' role='measure' type='quantitative' />
            <column caption='OWC' datatype='real' name='[HWC]' role='measure' type='quantitative' />
            <column datatype='real' name='[IF]' role='measure' type='quantitative' />
            <column datatype='real' name='[Iterators]' role='measure' type='quantitative' />
            <column datatype='real' name='[LOC]' role='measure' type='quantitative' />
            <column datatype='real' name='[Lazy]' role='measure' type='quantitative' />
            <column datatype='real' name='[Matched Rules]' role='measure' type='quantitative' />
            <column datatype='real' name='[Rules]' role='measure' type='quantitative' />
            <column datatype='real' name='[Selfs]' role='measure' type='quantitative' />
            <column datatype='real' name='[Unused operations]' role='measure' type='quantitative' />
            <column datatype='real' name='[Unused parameters]' role='measure' type='quantitative' />
            <column datatype='real' name='[Variables per rule]' role='measure' type='quantitative' />
            <column-instance column='[F1]' derivation='None' name='[none:F1:nk]' pivot='key' type='nominal' />
            <column-instance column='[Bad Smells]' derivation='Sum' name='[sum:Bad Smells:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Call to lazy per rule]' derivation='Sum' name='[sum:Call to lazy per rule:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calls to operations per rule]' derivation='Sum' name='[sum:Calls to operations per rule:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Density]' derivation='Sum' name='[sum:Density:qk]' pivot='key' type='quantitative' />
            <column-instance column='[HNC]' derivation='Sum' name='[sum:HNC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[HWC]' derivation='Sum' name='[sum:HWC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[IF]' derivation='Sum' name='[sum:IF:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Iterators]' derivation='Sum' name='[sum:Iterators:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LOC]' derivation='Sum' name='[sum:LOC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Lazy]' derivation='Sum' name='[sum:Lazy:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Matched Rules]' derivation='Sum' name='[sum:Matched Rules:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Rules]' derivation='Sum' name='[sum:Rules:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Selfs]' derivation='Sum' name='[sum:Selfs:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Unused operations]' derivation='Sum' name='[sum:Unused operations:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Unused parameters]' derivation='Sum' name='[sum:Unused parameters:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Variables per rule]' derivation='Sum' name='[sum:Variables per rule:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Bad Smells:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Call to lazy per rule:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Calls to operations per rule:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Density:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Iterators:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Lazy:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:LOC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Matched Rules:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Rules:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Selfs:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Unused operations:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Unused parameters:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Variables per rule:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:HWC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:HNC:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]' kind='hide'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[:Measure Names]' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Density:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Bad Smells:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Call to lazy per rule:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Calls to operations per rule:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:IF:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Density:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Iterators:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Lazy:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:LOC:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Matched Rules:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Rules:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Selfs:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Unused operations:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Unused parameters:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Variables per rule:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[federated.0giq4ev1783ro5100yn781wspt56].[none:F1:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:F1:nk]' />
              <groupfilter function='union'>
                <groupfilter function='member' level='[none:F1:nk]' member='&quot;1: Non-conventional names for from/to elements of rules.&quot;' />
                <groupfilter function='member' level='[none:F1:nk]' member='&quot;10: A chain of select/first in OCL is less efficient than using selectFirst&quot;' />
                <groupfilter function='member' level='[none:F1:nk]' member='&quot;11: allInstances should be avoided as possible&quot;' />
                <groupfilter function='member' level='[none:F1:nk]' member='&quot;2: Non-conventional names for rules and operations.&quot;' />
                <groupfilter function='member' level='[none:F1:nk]' member='&quot;3: Duplicated and complex OCL expressions&quot;' />
                <groupfilter function='member' level='[none:F1:nk]' member='&quot;4: Trivial operation called once&quot;' />
                <groupfilter function='member' level='[none:F1:nk]' member='&quot;5: Rule body is embedded into if blocks&quot;' />
                <groupfilter function='member' level='[none:F1:nk]' member='&quot;6: Target metamodel attribute set in multiple bindings&quot;' />
                <groupfilter function='member' level='[none:F1:nk]' member='&quot;7: If statements embedded into a for are less efficient than OCL filters&quot;' />
                <groupfilter function='member' level='[none:F1:nk]' member='&quot;8: Creation of new elements done on loops&quot;' />
                <groupfilter function='member' level='[none:F1:nk]' member='&quot;9: Nested if/else chains should be replaced with switch&quot;' />
              </groupfilter>
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]</column>
            <column>[federated.0giq4ev1783ro5100yn781wspt56].[none:F1:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]' value='71' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0giq4ev1783ro5100yn781wspt56].[Multiple Values]' />
              <text column='[federated.0giq4ev1783ro5100yn781wspt56].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0giq4ev1783ro5100yn781wspt56].[none:F1:nk]</rows>
        <cols>[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='Ocurrencias dataset'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Ocurrencias en todos los dataset</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='datos' name='federated.0m9q5y71o1y1i20zx0q960h69akv' />
          </datasources>
          <datasource-dependencies datasource='federated.0m9q5y71o1y1i20zx0q960h69akv'>
            <column datatype='integer' name='[10: A chain of select/first in OCL is less efficient than using selectFirst]' role='measure' type='quantitative' />
            <column datatype='integer' name='[1: Non-conventional names for from/to elements of rules.]' role='measure' type='quantitative' />
            <column datatype='integer' name='[2: Non-conventional names for rules and operations.]' role='measure' type='quantitative' />
            <column datatype='integer' name='[3: Duplicated and complex OCL expressions]' role='measure' type='quantitative' />
            <column datatype='integer' name='[4: Trivial operation called once]' role='measure' type='quantitative' />
            <column datatype='integer' name='[5: Rule body is embedded into if blocks]' role='measure' type='quantitative' />
            <column datatype='integer' name='[6: Target metamodel attribute set in multiple bindings]' role='measure' type='quantitative' />
            <column datatype='integer' name='[7: If statements embedded into a for are less efficient than OCL filters]' role='measure' type='quantitative' />
            <column datatype='integer' name='[8: Creation of new elements done on loops]' role='measure' type='quantitative' />
            <column datatype='integer' name='[9: Nested if/else chains should be replaced with switch]' role='measure' type='quantitative' />
            <column datatype='string' name='[Categoria]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Github&quot;' value='Github (19.608 LOC)' />
                <alias key='&quot;Junior&quot;' value='Junior (23.865 LOC)' />
                <alias key='&quot;Senior&quot;' value='Senior (1.358 LOC)' />
              </aliases>
            </column>
            <column-instance column='[Categoria]' derivation='None' name='[none:Categoria:nk]' pivot='key' type='nominal' />
            <column-instance column='[10: A chain of select/first in OCL is less efficient than using selectFirst]' derivation='Sum' name='[sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Sum' name='[sum:1: Non-conventional names for from/to elements of rules.:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Sum' name='[sum:2: Non-conventional names for rules and operations.:qk]' pivot='key' type='quantitative' />
            <column-instance column='[3: Duplicated and complex OCL expressions]' derivation='Sum' name='[sum:3: Duplicated and complex OCL expressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[4: Trivial operation called once]' derivation='Sum' name='[sum:4: Trivial operation called once:qk]' pivot='key' type='quantitative' />
            <column-instance column='[5: Rule body is embedded into if blocks]' derivation='Sum' name='[sum:5: Rule body is embedded into if blocks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Sum' name='[sum:6: Target metamodel attribute set in multiple bindings:qk]' pivot='key' type='quantitative' />
            <column-instance column='[7: If statements embedded into a for are less efficient than OCL filters]' derivation='Sum' name='[sum:7: If statements embedded into a for are less efficient than OCL filters:qk]' pivot='key' type='quantitative' />
            <column-instance column='[8: Creation of new elements done on loops]' derivation='Sum' name='[sum:8: Creation of new elements done on loops:qk]' pivot='key' type='quantitative' />
            <column-instance column='[9: Nested if/else chains should be replaced with switch]' derivation='Sum' name='[sum:9: Nested if/else chains should be replaced with switch:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0m9q5y71o1y1i20zx0q960h69akv].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:1: Non-conventional names for from/to elements of rules.:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:2: Non-conventional names for rules and operations.:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:3: Duplicated and complex OCL expressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:4: Trivial operation called once:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:5: Rule body is embedded into if blocks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:6: Target metamodel attribute set in multiple bindings:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:7: If statements embedded into a for are less efficient than OCL filters:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:8: Creation of new elements done on loops:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:9: Nested if/else chains should be replaced with switch:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[federated.0m9q5y71o1y1i20zx0q960h69akv].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:1: Non-conventional names for from/to elements of rules.:qk]&quot;</bucket>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:2: Non-conventional names for rules and operations.:qk]&quot;</bucket>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:3: Duplicated and complex OCL expressions:qk]&quot;</bucket>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:4: Trivial operation called once:qk]&quot;</bucket>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:5: Rule body is embedded into if blocks:qk]&quot;</bucket>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:6: Target metamodel attribute set in multiple bindings:qk]&quot;</bucket>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:7: If statements embedded into a for are less efficient than OCL filters:qk]&quot;</bucket>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:8: Creation of new elements done on loops:qk]&quot;</bucket>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:9: Nested if/else chains should be replaced with switch:qk]&quot;</bucket>
              <bucket>&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <slices>
            <column>[federated.0m9q5y71o1y1i20zx0q960h69akv].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.0m9q5y71o1y1i20zx0q960h69akv].[:Measure Names] / [federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk])</rows>
        <cols>[federated.0m9q5y71o1y1i20zx0q960h69akv].[Multiple Values]</cols>
      </table>
    </worksheet>
    <worksheet name='Pearson: Metrics v BS'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Pearson</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='Correlaciones' name='federated.0giq4ev1783ro5100yn781wspt56' />
          </datasources>
          <datasource-dependencies datasource='federated.0giq4ev1783ro5100yn781wspt56'>
            <column datatype='real' name='[10: A chain of select/first in OCL is less efficient than using selectFirst]' role='measure' type='quantitative' />
            <column datatype='real' name='[1: Non-conventional names for from/to elements of rules.]' role='measure' type='quantitative' />
            <column datatype='real' name='[2: Non-conventional names for rules and operations.]' role='measure' type='quantitative' />
            <column datatype='real' name='[3: Duplicated and complex OCL expressions]' role='measure' type='quantitative' />
            <column datatype='real' name='[4: Trivial operation called once]' role='measure' type='quantitative' />
            <column datatype='real' name='[5: Rule body is embedded into if blocks]' role='measure' type='quantitative' />
            <column datatype='real' name='[6: Target metamodel attribute set in multiple bindings]' role='measure' type='quantitative' />
            <column datatype='real' name='[7: If statements embedded into a for are less efficient than OCL filters]' role='measure' type='quantitative' />
            <column datatype='real' name='[8: Creation of new elements done on loops]' role='measure' type='quantitative' />
            <column datatype='real' name='[9: Nested if/else chains should be replaced with switch]' role='measure' type='quantitative' />
            <column datatype='real' name='[Bad Smells]' role='measure' type='quantitative' />
            <column datatype='real' name='[Call to lazy per rule]' role='measure' type='quantitative' />
            <column datatype='real' name='[Calls to operations per rule]' role='measure' type='quantitative' />
            <column datatype='real' name='[Density]' role='measure' type='quantitative' />
            <column caption='F11' datatype='string' name='[F1]' role='dimension' type='nominal' />
            <column datatype='real' name='[IF]' role='measure' type='quantitative' />
            <column datatype='real' name='[Iterators]' role='measure' type='quantitative' />
            <column datatype='real' name='[LOC]' role='measure' type='quantitative' />
            <column datatype='real' name='[Lazy]' role='measure' type='quantitative' />
            <column datatype='real' name='[Matched Rules]' role='measure' type='quantitative' />
            <column datatype='real' name='[Rules]' role='measure' type='quantitative' />
            <column datatype='real' name='[Selfs]' role='measure' type='quantitative' />
            <column datatype='real' name='[Unused operations]' role='measure' type='quantitative' />
            <column datatype='real' name='[Unused parameters]' role='measure' type='quantitative' />
            <column datatype='real' name='[Variables per rule]' role='measure' type='quantitative' />
            <column-instance column='[F1]' derivation='None' name='[none:F1:nk]' pivot='key' type='nominal' />
            <column-instance column='[10: A chain of select/first in OCL is less efficient than using selectFirst]' derivation='Sum' name='[sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]' pivot='key' type='quantitative' />
            <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Sum' name='[sum:1: Non-conventional names for from/to elements of rules.:qk]' pivot='key' type='quantitative' />
            <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Sum' name='[sum:2: Non-conventional names for rules and operations.:qk]' pivot='key' type='quantitative' />
            <column-instance column='[3: Duplicated and complex OCL expressions]' derivation='Sum' name='[sum:3: Duplicated and complex OCL expressions:qk]' pivot='key' type='quantitative' />
            <column-instance column='[4: Trivial operation called once]' derivation='Sum' name='[sum:4: Trivial operation called once:qk]' pivot='key' type='quantitative' />
            <column-instance column='[5: Rule body is embedded into if blocks]' derivation='Sum' name='[sum:5: Rule body is embedded into if blocks:qk]' pivot='key' type='quantitative' />
            <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Sum' name='[sum:6: Target metamodel attribute set in multiple bindings:qk]' pivot='key' type='quantitative' />
            <column-instance column='[7: If statements embedded into a for are less efficient than OCL filters]' derivation='Sum' name='[sum:7: If statements embedded into a for are less efficient than OCL filters:qk]' pivot='key' type='quantitative' />
            <column-instance column='[8: Creation of new elements done on loops]' derivation='Sum' name='[sum:8: Creation of new elements done on loops:qk]' pivot='key' type='quantitative' />
            <column-instance column='[9: Nested if/else chains should be replaced with switch]' derivation='Sum' name='[sum:9: Nested if/else chains should be replaced with switch:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Bad Smells]' derivation='Sum' name='[sum:Bad Smells:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Call to lazy per rule]' derivation='Sum' name='[sum:Call to lazy per rule:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calls to operations per rule]' derivation='Sum' name='[sum:Calls to operations per rule:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Density]' derivation='Sum' name='[sum:Density:qk]' pivot='key' type='quantitative' />
            <column-instance column='[IF]' derivation='Sum' name='[sum:IF:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Iterators]' derivation='Sum' name='[sum:Iterators:qk]' pivot='key' type='quantitative' />
            <column-instance column='[LOC]' derivation='Sum' name='[sum:LOC:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Lazy]' derivation='Sum' name='[sum:Lazy:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Matched Rules]' derivation='Sum' name='[sum:Matched Rules:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Rules]' derivation='Sum' name='[sum:Rules:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Selfs]' derivation='Sum' name='[sum:Selfs:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Unused operations]' derivation='Sum' name='[sum:Unused operations:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Unused parameters]' derivation='Sum' name='[sum:Unused parameters:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Variables per rule]' derivation='Sum' name='[sum:Variables per rule:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:LOC:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:1: Non-conventional names for from/to elements of rules.:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:2: Non-conventional names for rules and operations.:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:3: Duplicated and complex OCL expressions:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:4: Trivial operation called once:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:5: Rule body is embedded into if blocks:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:6: Target metamodel attribute set in multiple bindings:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:7: If statements embedded into a for are less efficient than OCL filters:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:8: Creation of new elements done on loops:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:9: Nested if/else chains should be replaced with switch:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Call to lazy per rule:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Calls to operations per rule:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Density:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:IF:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Iterators:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Lazy:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Matched Rules:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Rules:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Selfs:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Unused operations:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Unused parameters:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Variables per rule:qk]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Bad Smells:qk]&quot;' />
            </groupfilter>
          </filter>
          <filter class='categorical' column='[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]' kind='hide'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[:Measure Names]' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Density:qk]&quot;' />
            </groupfilter>
          </filter>
          <sort class='manual' column='[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]' direction='ASC'>
            <dictionary>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:LOC:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:1: Non-conventional names for from/to elements of rules.:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:2: Non-conventional names for rules and operations.:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:3: Duplicated and complex OCL expressions:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:4: Trivial operation called once:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:5: Rule body is embedded into if blocks:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:6: Target metamodel attribute set in multiple bindings:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:7: If statements embedded into a for are less efficient than OCL filters:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:8: Creation of new elements done on loops:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:9: Nested if/else chains should be replaced with switch:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Call to lazy per rule:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Calls to operations per rule:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Density:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:IF:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Iterators:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Lazy:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Matched Rules:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Rules:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Selfs:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Unused operations:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Unused parameters:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Variables per rule:qk]&quot;</bucket>
              <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Bad Smells:qk]&quot;</bucket>
            </dictionary>
          </sort>
          <filter class='categorical' column='[federated.0giq4ev1783ro5100yn781wspt56].[none:F1:nk]'>
            <groupfilter function='except' user:ui-domain='relevant' user:ui-enumeration='exclusive' user:ui-marker='enumerate'>
              <groupfilter function='level-members' level='[none:F1:nk]' />
              <groupfilter function='member' level='[none:F1:nk]' member='&quot;11: allInstances should be avoided as possible&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]</column>
            <column>[federated.0giq4ev1783ro5100yn781wspt56].[none:F1:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]' value='71' />
          </style-rule>
        </style>
        <panes>
          <pane>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0giq4ev1783ro5100yn781wspt56].[Multiple Values]' />
              <text column='[federated.0giq4ev1783ro5100yn781wspt56].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0giq4ev1783ro5100yn781wspt56].[none:F1:nk]</rows>
        <cols>[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]</cols>
      </table>
    </worksheet>
    <worksheet name='Unificados'>
      <table>
        <view>
          <datasources>
            <datasource caption='datos' name='federated.0m9q5y71o1y1i20zx0q960h69akv' />
          </datasources>
          <datasource-dependencies datasource='federated.0m9q5y71o1y1i20zx0q960h69akv'>
            <column datatype='integer' name='[10: A chain of select/first in OCL is less efficient than using selectFirst]' role='measure' type='quantitative' />
            <column datatype='integer' name='[1: Non-conventional names for from/to elements of rules.]' role='measure' type='quantitative' />
            <column datatype='integer' name='[2: Non-conventional names for rules and operations.]' role='measure' type='quantitative' />
            <column datatype='integer' name='[3: Duplicated and complex OCL expressions]' role='measure' type='quantitative' />
            <column datatype='integer' name='[4: Trivial operation called once]' role='measure' type='quantitative' />
            <column datatype='integer' name='[5: Rule body is embedded into if blocks]' role='measure' type='quantitative' />
            <column datatype='integer' name='[6: Target metamodel attribute set in multiple bindings]' role='measure' type='quantitative' />
            <column datatype='integer' name='[7: If statements embedded into a for are less efficient than OCL filters]' role='measure' type='quantitative' />
            <column datatype='integer' name='[8: Creation of new elements done on loops]' role='measure' type='quantitative' />
            <column datatype='integer' name='[9: Nested if/else chains should be replaced with switch]' role='measure' type='quantitative' />
            <column datatype='string' name='[Categoria]' role='dimension' type='nominal'>
              <aliases>
                <alias key='&quot;Github&quot;' value='Github (19.608 LOC)' />
                <alias key='&quot;Junior&quot;' value='Junior (23.865 LOC)' />
                <alias key='&quot;Senior&quot;' value='Senior (1.358 LOC)' />
              </aliases>
            </column>
            <column-instance column='[Categoria]' derivation='None' name='[none:Categoria:nk]' pivot='key' type='nominal' />
            <column-instance column='[10: A chain of select/first in OCL is less efficient than using selectFirst]' derivation='Sum' name='[pcto:sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk:7]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[Categoria]' ordering-type='Field' type='PctTotal' />
            </column-instance>
            <column-instance column='[1: Non-conventional names for from/to elements of rules.]' derivation='Sum' name='[pcto:sum:1: Non-conventional names for from/to elements of rules.:qk:7]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[Categoria]' ordering-type='Field' type='PctTotal' />
            </column-instance>
            <column-instance column='[2: Non-conventional names for rules and operations.]' derivation='Sum' name='[pcto:sum:2: Non-conventional names for rules and operations.:qk:7]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[Categoria]' ordering-type='Field' type='PctTotal' />
            </column-instance>
            <column-instance column='[3: Duplicated and complex OCL expressions]' derivation='Sum' name='[pcto:sum:3: Duplicated and complex OCL expressions:qk:7]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[Categoria]' ordering-type='Field' type='PctTotal' />
            </column-instance>
            <column-instance column='[4: Trivial operation called once]' derivation='Sum' name='[pcto:sum:4: Trivial operation called once:qk:7]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[Categoria]' ordering-type='Field' type='PctTotal' />
            </column-instance>
            <column-instance column='[5: Rule body is embedded into if blocks]' derivation='Sum' name='[pcto:sum:5: Rule body is embedded into if blocks:qk:7]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[Categoria]' ordering-type='Field' type='PctTotal' />
            </column-instance>
            <column-instance column='[6: Target metamodel attribute set in multiple bindings]' derivation='Sum' name='[pcto:sum:6: Target metamodel attribute set in multiple bindings:qk:7]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[Categoria]' ordering-type='Field' type='PctTotal' />
            </column-instance>
            <column-instance column='[7: If statements embedded into a for are less efficient than OCL filters]' derivation='Sum' name='[pcto:sum:7: If statements embedded into a for are less efficient than OCL filters:qk:7]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[Categoria]' ordering-type='Field' type='PctTotal' />
            </column-instance>
            <column-instance column='[8: Creation of new elements done on loops]' derivation='Sum' name='[pcto:sum:8: Creation of new elements done on loops:qk:7]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[Categoria]' ordering-type='Field' type='PctTotal' />
            </column-instance>
            <column-instance column='[9: Nested if/else chains should be replaced with switch]' derivation='Sum' name='[pcto:sum:9: Nested if/else chains should be replaced with switch:qk:7]' pivot='key' type='quantitative'>
              <table-calc ordering-field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[Categoria]' ordering-type='Field' type='PctTotal' />
            </column-instance>
          </datasource-dependencies>
          <filter class='categorical' column='[federated.0m9q5y71o1y1i20zx0q960h69akv].[:Measure Names]'>
            <groupfilter function='union' user:op='manual'>
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:10: A chain of select/first in OCL is less efficient than using selectFirst:qk:7]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:1: Non-conventional names for from/to elements of rules.:qk:7]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:2: Non-conventional names for rules and operations.:qk:7]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:3: Duplicated and complex OCL expressions:qk:7]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:4: Trivial operation called once:qk:7]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:5: Rule body is embedded into if blocks:qk:7]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:6: Target metamodel attribute set in multiple bindings:qk:7]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:7: If statements embedded into a for are less efficient than OCL filters:qk:7]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:8: Creation of new elements done on loops:qk:7]&quot;' />
              <groupfilter function='member' level='[:Measure Names]' member='&quot;[federated.0m9q5y71o1y1i20zx0q960h69akv].[pcto:sum:9: Nested if/else chains should be replaced with switch:qk:7]&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.0m9q5y71o1y1i20zx0q960h69akv].[:Measure Names]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='width' field='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' value='104' />
          </style-rule>
        </style>
        <panes>
          <pane id='1'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.0m9q5y71o1y1i20zx0q960h69akv].[Multiple Values]' />
              <lod column='[federated.0m9q5y71o1y1i20zx0q960h69akv].[Multiple Values]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='false' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='-1' />
                <format attr='maxwidth' value='-1' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.0m9q5y71o1y1i20zx0q960h69akv].[Multiple Values]</rows>
        <cols>[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]</cols>
      </table>
    </worksheet>
  </worksheets>
  <windows source-height='93'>
    <window class='worksheet' name='Distribución # Datos'>
      <cards>
        <edge name='left'>
          <strip size='300'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='300'>
            <card pane-specification-id='0' param='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' type='color' />
            <card pane-specification-id='0' param='[federated.0m9q5y71o1y1i20zx0q960h69akv].[sum:Number of Records:qk]' type='size' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Distribución LOC'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='175'>
            <card pane-specification-id='0' param='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Pearson: Metrics v BS'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='175'>
            <card pane-specification-id='0' param='[federated.0giq4ev1783ro5100yn781wspt56].[Multiple Values]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='horizontal'>
              <node-reference>
                <fields>
                  <field>[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Call to lazy per rule:qk]&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='horizontal'>
              <node-reference>
                <fields>
                  <field>[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Calls to operations per rule:qk]&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='horizontal'>
              <node-reference>
                <fields>
                  <field>[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:IF:qk]&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='horizontal'>
              <node-reference>
                <fields>
                  <field>[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Iterators:qk]&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='horizontal'>
              <node-reference>
                <fields>
                  <field>[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Lazy:qk]&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='horizontal'>
              <node-reference>
                <fields>
                  <field>[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Matched Rules:qk]&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='horizontal'>
              <node-reference>
                <fields>
                  <field>[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Rules:qk]&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='horizontal'>
              <node-reference>
                <fields>
                  <field>[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Selfs:qk]&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='horizontal'>
              <node-reference>
                <fields>
                  <field>[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Unused operations:qk]&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='horizontal'>
              <node-reference>
                <fields>
                  <field>[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Unused parameters:qk]&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='horizontal'>
              <node-reference>
                <fields>
                  <field>[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Variables per rule:qk]&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='horizontal'>
              <node-reference>
                <fields>
                  <field>[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;[federated.0giq4ev1783ro5100yn781wspt56].[sum:Bad Smells:qk]&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]</field>
            <field>[federated.0giq4ev1783ro5100yn781wspt56].[none:F1:nk]</field>
            <field>[federated.1te0we10fu86fa17qthpw06u18yv].[none:Categoria:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Metrics v Metrics'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='175'>
            <card param='[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]' show-morefewerbutton='false' type='filter' />
            <card pane-specification-id='0' param='[federated.0giq4ev1783ro5100yn781wspt56].[Multiple Values]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <selection-collection>
          <node-selection select-tuples='false'>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0giq4ev1783ro5100yn781wspt56].[none:F1:nk]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;1: Non-conventional names for from/to elements of rules.&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0giq4ev1783ro5100yn781wspt56].[none:F1:nk]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;2: Non-conventional names for rules and operations.&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0giq4ev1783ro5100yn781wspt56].[none:F1:nk]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;3: Duplicated and complex OCL expressions&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0giq4ev1783ro5100yn781wspt56].[none:F1:nk]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;4: Trivial operation called once&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0giq4ev1783ro5100yn781wspt56].[none:F1:nk]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;5: Rule body is embedded into if blocks&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0giq4ev1783ro5100yn781wspt56].[none:F1:nk]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;6: Target metamodel attribute set in multiple bindings&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0giq4ev1783ro5100yn781wspt56].[none:F1:nk]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;7: If statements embedded into a for are less efficient than OCL filters&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0giq4ev1783ro5100yn781wspt56].[none:F1:nk]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;8: Creation of new elements done on loops&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0giq4ev1783ro5100yn781wspt56].[none:F1:nk]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;9: Nested if/else chains should be replaced with switch&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
            <oriented-node-reference orientation='vertical'>
              <node-reference>
                <fields>
                  <field>[federated.0giq4ev1783ro5100yn781wspt56].[none:F1:nk]</field>
                </fields>
                <multibucket>
                  <bucket>&quot;10: A chain of select/first in OCL is less efficient than using selectFirst&quot;</bucket>
                </multibucket>
              </node-reference>
              <page-reference />
            </oriented-node-reference>
          </node-selection>
        </selection-collection>
        <highlight>
          <color-one-way>
            <field>[federated.0giq4ev1783ro5100yn781wspt56].[:Measure Names]</field>
            <field>[federated.0giq4ev1783ro5100yn781wspt56].[none:F1:nk]</field>
            <field>[federated.1te0we10fu86fa17qthpw06u18yv].[none:Categoria:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Unificados'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='175'>
            <card pane-specification-id='1' param='[federated.0m9q5y71o1y1i20zx0q960h69akv].[Multiple Values]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0m9q5y71o1y1i20zx0q960h69akv].[Multiple Values]</field>
            <field>[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' name='Ocurrencias dataset'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='131'>
            <card pane-specification-id='0' param='[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0m9q5y71o1y1i20zx0q960h69akv].[Multiple Values]</field>
            <field>[federated.0m9q5y71o1y1i20zx0q960h69akv].[none:Categoria:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
    <window class='worksheet' maximized='true' name='Hoja 7'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
            <card type='measures' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0yusrt80zh31p11d02tj605voo97].[none:Categoria:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='328' name='Distribución # Datos' width='328'>
      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
      AElFTkSuQmCC
    </thumbnail>
    <thumbnail height='384' name='Distribución LOC' width='384'>
      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
      3e1cd85O1N4AAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='384' name='Hoja 7' width='384'>
      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
      TkSuQmCC
    </thumbnail>
    <thumbnail height='384' name='Metrics v Metrics' width='384'>
      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
    </thumbnail>
    <thumbnail height='384' name='Ocurrencias dataset' width='384'>
      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
      N4hueFCMoAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='384' name='Pearson: Metrics v BS' width='384'>
      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
      AABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='384' name='Unificados' width='384'>
      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
      RAz1/wHB6hvu60s+xgAAAABJRU5ErkJggg==
    </thumbnail>
  </thumbnails>
</workbook>

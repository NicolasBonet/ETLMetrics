package co.edu.uniandes.proyectoautomatizacion.database;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table productoUbicDb.
 */
public class ProductoUbicDb implements java.io.Serializable {

    private Long id;
    private String nombre;
    private long ubicacionId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ProductoUbicDbDao myDao;

    private UbicacionDb ubicacionDb;
    private Long ubicacionDb__resolvedKey;


    public ProductoUbicDb() {
    }

    public ProductoUbicDb(Long id) {
        this.id = id;
    }

    public ProductoUbicDb(Long id, String nombre, long ubicacionId) {
        this.id = id;
        this.nombre = nombre;
        this.ubicacionId = ubicacionId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getProductoUbicDbDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public long getUbicacionId() {
        return ubicacionId;
    }

    public void setUbicacionId(long ubicacionId) {
        this.ubicacionId = ubicacionId;
    }

    /** To-one relationship, resolved on first access. */
    public UbicacionDb getUbicacionDb() {
        long __key = this.ubicacionId;
        if (ubicacionDb__resolvedKey == null || !ubicacionDb__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            UbicacionDbDao targetDao = daoSession.getUbicacionDbDao();
            UbicacionDb ubicacionDbNew = targetDao.load(__key);
            synchronized (this) {
                ubicacionDb = ubicacionDbNew;
            	ubicacionDb__resolvedKey = __key;
            }
        }
        return ubicacionDb;
    }

    public void setUbicacionDb(UbicacionDb ubicacionDb) {
        if (ubicacionDb == null) {
            throw new DaoException("To-one property 'ubicacionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.ubicacionDb = ubicacionDb;
            ubicacionId = ubicacionDb.getId();
            ubicacionDb__resolvedKey = ubicacionId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}

package co.edu.uniandes.proyectoautomatizacion.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table promocionDb.
*/
public class PromocionDbDao extends AbstractDao<PromocionDb, Long> {

    public static final String TABLENAME = "promocionDb";

    /**
     * Properties of entity PromocionDb.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Imagen = new Property(1, String.class, "imagen", false, "IMAGEN");
        public final static Property Nombre = new Property(2, String.class, "nombre", false, "NOMBRE");
        public final static Property Descripcion = new Property(3, String.class, "descripcion", false, "DESCRIPCION");
        public final static Property Terminos = new Property(4, String.class, "terminos", false, "TERMINOS");
        public final static Property PassUrl = new Property(5, String.class, "passUrl", false, "PASS_URL");
        public final static Property DetalleUrl = new Property(6, String.class, "detalleUrl", false, "DETALLE_URL");
        public final static Property Cliente = new Property(7, String.class, "cliente", false, "CLIENTE");
    };


    public PromocionDbDao(DaoConfig config) {
        super(config);
    }
    
    public PromocionDbDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'promocionDb' (" + //
                "'_id' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'IMAGEN' TEXT," + // 1: imagen
                "'NOMBRE' TEXT," + // 2: nombre
                "'DESCRIPCION' TEXT," + // 3: descripcion
                "'TERMINOS' TEXT," + // 4: terminos
                "'PASS_URL' TEXT," + // 5: passUrl
                "'DETALLE_URL' TEXT," + // 6: detalleUrl
                "'CLIENTE' TEXT);"); // 7: cliente
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'promocionDb'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PromocionDb entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String imagen = entity.getImagen();
        if (imagen != null) {
            stmt.bindString(2, imagen);
        }
 
        String nombre = entity.getNombre();
        if (nombre != null) {
            stmt.bindString(3, nombre);
        }
 
        String descripcion = entity.getDescripcion();
        if (descripcion != null) {
            stmt.bindString(4, descripcion);
        }
 
        String terminos = entity.getTerminos();
        if (terminos != null) {
            stmt.bindString(5, terminos);
        }
 
        String passUrl = entity.getPassUrl();
        if (passUrl != null) {
            stmt.bindString(6, passUrl);
        }
 
        String detalleUrl = entity.getDetalleUrl();
        if (detalleUrl != null) {
            stmt.bindString(7, detalleUrl);
        }
 
        String cliente = entity.getCliente();
        if (cliente != null) {
            stmt.bindString(8, cliente);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PromocionDb readEntity(Cursor cursor, int offset) {
        PromocionDb entity = new PromocionDb( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // imagen
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // nombre
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // descripcion
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // terminos
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // passUrl
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // detalleUrl
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // cliente
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PromocionDb entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImagen(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setNombre(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescripcion(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTerminos(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPassUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDetalleUrl(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCliente(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PromocionDb entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PromocionDb entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

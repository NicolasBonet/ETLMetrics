model NG driver EMF {path='testAngular1.ecore'};
model CS driver EMF {path='webApiInput.ecore'};

rule CSharpToAngular
	transform cs : CS!CSharp
	to ng : NG!Angular 
	{
		var controllerString = "Controller";
		var dtoString = "DTO";
		var comboBoxString = "Combobox";
		
		var vistas = new List;
		for(csClase in cs.getClasesPorTipo(dtoString) )
		{
			var formElements = new List;
			for(csPropiedad in csClase.propiedades )
			{
				var atributos = csPropiedad.atributos; 
				
				// Ignorar si el atributo Hide existe 
				if( atributos.is("Hide") )
				{
				}
				else if( atributos.is("Textbox") )
				{
					var csAtributo = atributos.first("Textbox");
										
					var placeholder = "";
					if( csAtributo.propiedades.is("Placeholder") )
					{
						placeholder = csAtributo.propiedades.first("Placeholder").valor;
					}
															
					var ngInput = new NG!Input;
					ngInput.nombre = csPropiedad.name;
					ngInput.required = csAtributo.getPropiedadRequired();
					ngInput.label = csPropiedad.getAtributoDisplay();
					ngInput.id = "tb_" + csPropiedad.name.toLowerCase();
					ngInput.tipo = csAtributo.getPropiedadType();
					ngInput.placeholder = placeholder; 
					
					formElements.add(ngInput);
				}
				else if( atributos.is("Textarea") )
				{
					var csAtributo = atributos.first("Textarea");
					
					var filas = 3;
					if( csAtributo.propiedades.is("Rows") )
					{
						filas = csAtributo.propiedades.first("Rows").valor;
					}
				
					var ngTextarea = new NG!Textarea;
					ngTextarea.nombre = csPropiedad.name;
					ngTextarea.required = csAtributo.getPropiedadRequired();
					ngTextarea.label = csPropiedad.getAtributoDisplay();
					ngTextarea.id = "ta_" + csPropiedad.name.toLowerCase();
					ngTextarea.tipo = csAtributo.getPropiedadType();
					ngTextarea.filas = filas.asInteger(); 
					
					formElements.add(ngTextarea);
				}
				else if( atributos.is(comboBoxString) )
				{
					var csAtributo = atributos.first(comboBoxString);
					
					var propiedad = csAtributo.propiedades.select( x | x.name == "Clase").first();
					var propiedadNombre = propiedad.valor.replace(controllerString,"");
					
					var clase : CS!Clase = csPropiedad.tipo;
					var ngFormGroup = new NG!FormGroup;
					ngFormGroup.nombre = csPropiedad.name;
					ngFormGroup.required = csAtributo.getPropiedadRequired();
					ngFormGroup.label = csPropiedad.getAtributoDisplay();
					ngFormGroup.id = "cb_" + csPropiedad.name.toLowerCase();
					ngFormGroup.lista = propiedadNombre;
					
					formElements.add(ngFormGroup);
				}
				else if( csPropiedad.tipo.isTypeOf(CS!Enum) )
				{
					var elements = new List;
					var enum : CS!Enum = csPropiedad.tipo;
					for(csEnumLiteral in enum.valores)
					{
						var ngRadioButton = new NG!RadioButton;
						ngRadioButton.nombre = csEnumLiteral.name;
						
						elements.add(ngRadioButton);
					}
					
					var ngFormGroup = new NG!FormGroup;
					ngFormGroup.nombre = csPropiedad.name;
					ngFormGroup.required = true;
					ngFormGroup.label = csPropiedad.getAtributoDisplay();
					ngFormGroup.id = "rb_" + csPropiedad.name.toLowerCase();
					ngFormGroup.elements = elements;
					
					formElements.add(ngFormGroup);
				}
				else if( csPropiedad.tipoPrimitivo == "string" )
				{															
					var ngInput = new NG!Input;
					ngInput.nombre = csPropiedad.name;
					ngInput.required = true;
					ngInput.label = csPropiedad.getAtributoDisplay();
					ngInput.id = "tb_" + csPropiedad.name.toLowerCase();
					ngInput.tipo = "text";
					ngInput.placeholder = ""; 
					
					formElements.add(ngInput);
				}
				else if( csPropiedad.tipoPrimitivo == "bool" )
				{												
					var ngInput = new NG!Input;
					ngInput.nombre = csPropiedad.name;
					ngInput.required = false;
					ngInput.label = csPropiedad.getAtributoDisplay();
					ngInput.id = "chb_" + csPropiedad.name.toLowerCase();
					ngInput.tipo = "checkbox";
					ngInput.placeholder = ""; 
					
					formElements.add(ngInput);
				}
			}	
			
			var ngVista = new NG!Vista;
			ngVista.nombre = csClase.name.replace(dtoString, "");
			ngVista.dto = csClase.name;
			ngVista.formElements = formElements;
			vistas.add(ngVista);
		}
		
		var servicios = new List;
		var controladores = new List;
		for(csClase in cs.getClasesPorTipo(controllerString) )
		{
			// NombreClaseController => NombreClase 
			var csClaseNombre = csClase.name.replace(controllerString, "");
			
			// http://localhost:12345/
			var dominio = csClase.getValorAtributo("Domain");
			
			// api/NombreClase
			var rutaClase = csClase.getValorAtributo("RoutePrefix");

			var servicio = new NG!Service;					
			var metodos = new List;
			for(csMetodo in csClase.metodos)
			{
				// NombreMetodo
				var rutaMetodo = csMetodo.getValorAtributo("Route");
				
				// En C# el nombre de la ruta de la clase no se coloca con '/'
				// al final, por lo que se debe colocar entre la ruta de la clase
				// y la ruta del método
				var rutaCompleta = dominio + rutaClase + "/" + rutaMetodo;
			
				var parametros = new List;
				for(csParametro in csMetodo.parametros)
				{
					var ngParametro = new NG!Parametro;
					ngParametro.nombre = csParametro.name;
					
					parametros.add(ngParametro);
				}
				
				var ngMetodo = new NG!Metodo;
				ngMetodo.nombre = csMetodo.name;
				ngMetodo.service = servicio;
				ngMetodo.ruta = rutaCompleta;
				ngMetodo.verbo = csMetodo.getVerbo();
				ngMetodo.parametros = parametros;
				
				metodos.add(ngMetodo);
								

				if( csMetodo.atributos.exists( x | x.name == "ViewType") )
				{
					var parametroTipoNombre = csMetodo.parametros.first().tipo.name;
					
					var dto = csMetodo.parametros.at(0).tipo;
					var metodosListas = new List;
					for(propiedad in dto.propiedades)
					{
						var comboBoxAttr = propiedad.atributos.select( x | x.name == comboBoxString).first();
						if(comboBoxAttr <> null)
						{
							var claseNombre = comboBoxAttr.propiedades.select( x | x.name == "Clase").first().valor;
							claseNombre = claseNombre.replace(controllerString, "");
							
							var metodoNombre = comboBoxAttr.propiedades.select( x | x.name == "Metodo").first().valor;
							
							var servicio = servicios.select( x | x.nombre == claseNombre ).first();
							
							var metodoLista = servicio.metodos.select( x | x.nombre == metodoNombre).first();
							metodosListas.add(metodoLista);
						}
					}
					
					var obtenerPorId = null;				
					if(csMetodo.atributos.selectOne( x | x.name == "ViewType").valor == "Update")
					{
						obtenerPorId = csMetodo.atributos.selectOne( x | x.name == "GetId").valor;
						obtenerPorId = metodos.selectOne( x | x.nombre == obtenerPorId);	
					}
					
					var ngController = new NG!Controller;
					ngController.nombre = csClaseNombre + csMetodo.name + controllerString;
					ngController.vista = vistas.selectOne( x | x.dto == parametroTipoNombre);
					ngController.submit = ngMetodo;
					ngController.obtenerPorId = obtenerPorId;
					ngController.titulo = csMetodo.atributos.selectOne( x | x.name == "Title").valor;
					ngController.listas = metodosListas;
					
					controladores.add(ngController);	
				}
			}
			
			var ngServicio = servicio;
			ngServicio.nombre = csClaseNombre;
			ngServicio.metodos = metodos;
			
			servicios.add(ngServicio);
		}
		
		ng.vistas = vistas;
		ng.services = servicios;
		ng.controllers = controladores;
		
		for(ngController in ng.controllers)
		{
			ngController.services = ng.services;
		}
	}
operation CS!Propiedad getAtributoDisplay() : String {
	if( self.atributos.is("Display") )
	{
		return self.atributos.first("Display").propiedades.first("Name").valor;
	}
	return self.name;
}

operation CS!Atributo getPropiedadType() : String {
	if( self.propiedades.is("Type") )
	{
		return self.propiedades.first("Type").valor;
	}
	return "text";
}

operation CS!Atributo getPropiedadRequired() : Boolean {
	if( self.propiedades.is("Required") )
	{
		return self.propiedades.first("Required").valor == true;
	}
	return true;
}

operation Any is(tipo : String) : Boolean {
	return self.exists( x | x.name == tipo);
}

operation Any first(tipo : String) : CS!Object {
	return self.selectOne( x | x.name == tipo);
}

operation CS!CSharp getClasesPorTipo(tipo : String) : Collection {
	return self.clases.select( x | x.name.endsWith(tipo) );
}

operation Any getValorAtributo(nombre : String) : String {
	return self.atributos.selectOne( x | x.name == nombre ).valor;
}

operation Any getVerbo() : String {
	var httpString = "Http";
	
	// Tomar atributo que comienze por Http (HttpGet, HttpPost, HttpPut, HttpDelete)
	var httpAttribute = self.atributos.selectOne( x | x.name.startsWith(httpString) );
	
	// Obtener el nombre y remover la palabra Http
	var verbo = httpAttribute.name.replace(httpString, "");

	// Para Angular los verbos deben ser en minuscula
	return verbo.firstToLowerCase();
}
// automatically generated by Xtext
grammar org.xtext.Csharp with org.eclipse.xtext.common.Terminals

import "http://www.example.org/webApiInput" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

CSharp returns CSharp:
	{CSharp}
	(clases+=Clase)*;

Clase returns Clase:
	{Clase}
	namespace=ExpressionString
	'{'
	(atributos+=Atributo)*
	'public class' name = ID (':' super=ID)?
	'{'
		(texto=ExpressionString)
		(constructores += Constructor)*
		(enums += Enum)*
		(propiedades += Propiedad)*
		(metodos += Metodo)*
	'}''}';

Atributo returns Atributo:
	{Atributo}
	'[' name = ID ('(' ( ( propiedades+=PropiedadAtributo ("," propiedades+=PropiedadAtributo)* ) | valor = STRING ) ')')? ']';

PropiedadAtributo returns PropiedadAtributo:
	{PropiedadAtributo}
	name = ID '=' valor = EString;

Constructor returns Constructor:
	{Constructor}
	'public ' name= ID
	'(' (parametros+=Parametro ( "," parametros+=Parametro)*)? ')'
	'{'
		texto=ExpressionString
	'}';
	
Enum returns Enum:
	{Enum}
	'public enum ' name=EString
	'{'
		(valores+=EnumLiteral ( "," valores+=EnumLiteral)*)?
	'}';

EnumLiteral returns EnumLiteral:
	{EnumLiteral}
	name = EString;
	
List returns List:
	('List' | 'IEnumerable') '<' clase=[Clase] '>';

//Jaja returns TypedObject:
//	(clase = [Clase] | ^enum= [Enum]);

Tipo returns Tipo:
	Clase | Enum;

Propiedad returns Propiedad:
	{Propiedad}
	(atributos+=Atributo)*
	'public ' ( (tipo=[Tipo|EString])|(tipoPrimitivo=DATATYPES)|(lista+=List) ) name = ID
	'{' ('get' ';')? ('set' ';')? '}';
	

Metodo returns Metodo:
	{Metodo}
	(atributos+=Atributo)*
	'public ' ( (tipo=[Tipo|EString])|(tipoPrimitivo=DATATYPES)|(lista+=List) ) name = ID 
	'(' (parametros+=Parametro ( "," parametros+=Parametro)*)? ')'
	'{'
		texto=ExpressionString
	'}';

Parametro returns Parametro:
	{Parametro}
	(atributos+=Atributo)* 
	( (tipo=[Tipo|EString])|(tipoPrimitivo=DATATYPES)|(lista+=List) ) name = ID;
 
EString returns ecore::EString:
	STRING | ID;

Characters returns ecore::EString: 
	(ID|'.'|';'|'_'|'('|')'|'=');

Block returns ecore::EString: 
	'{' Characters* '}';
	
ExpressionString returns ecore::EString:
	(Characters | Block)* 
;	

terminal DATATYPES:
	'int'|'string'|'bool'|'void'|'decimal'|'double'|'IHttpActionResult';
//terminal PUBLIC:
//	"public";
//terminal CLASS:
//	"public class";